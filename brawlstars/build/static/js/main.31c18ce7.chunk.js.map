{"version":3,"sources":["components/ModeList.js","components/Firestore.js","components/PlayerTile.js","components/TrioMode.js","components/BrawlerList.js","components/SoloDuoMode.js","components/UserList.js","components/Pagination.js","components/PlayList.js","components/TopBar.js","components/Home.js","components/MapList.js","components/Map.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ModeList","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","props","state","value","change","bind","event","changeMode","this","mode","target","setState","console","log","className","htmlFor","id","onChange","Component","PlayerTile","brawlerName","playerName","trophies","src","width","TrioMode","imgSrc","brawler_name","battleTime","duration","map","isStarPalyer","trophyChange","power","result","type","groupRecords","substr","record","teamId","brawlerNameList","BrawlerList","changeBrawler","index","key","label","SoloDuoMode","rankCss","rank","signTrophyChange","Math","floor","tableStyle","margin","UserList","userList","curPage","numUser","pageUrl","nickname","searchNickname","searchInputChange","qs","parse","location","search","ignoreQueryPrefix","snapshot","page","rows","forEach","doc","data","push","queryPage","axios","get","then","response","content","number","totalElements","catch","error","prevProps","prevQuery","getQuery","query","getUserList","undefined","parseInt","history","tag","replace","placeholder","onClick","style","user","showPlayList","name","numTotal","numShowItems","changePageHandler","Page","link","pageNum","Pagination","maxPage","startPage","endPage","pageList","i","PlayList","playRecord","winRate","averageRank","isEmpty","getTag","getBattleLog","queryTag","str","toString","length","statement","where","pageable","pageNumber","isTrio","resultRank","isStarPlayer","TopBar","to","languageList","Home","language","changeLanguage","lang","MapList","maps","filteredMaps","clickMap","mapName","setFilteredMap","filter","x","Map","recordArr","records","e","cnt","victoryNum","victory","defeatNum","defeat","drawNum","draw","totalGameNum","sort","a","b","ele","round","App","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"kTA2CeA,G,MC3BMC,IAASC,cAXP,CACnBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKSC,Y,kDDf1B,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGRC,MAAQ,CACNC,MAAO,WAHP,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBAFG,E,mDAOZC,GAAQ,IACLC,EAAeC,KAAKP,MAApBM,WACJE,EAAOH,EAAMI,OAAOP,MACxBK,KAAKG,SAAS,CAAER,MAAOM,IACvBF,EAAWE,K,0CAEQ,IACXA,EAASD,KAAKP,MAAdQ,KACRG,QAAQC,IAAR,qBAA0BJ,IAC1BD,KAAKG,SAAS,CACZR,MAAOM,M,+BAIT,OACE,yBAAKK,UAAU,aACb,2BAAOC,QAAQ,YAAf,SACA,4BAAQC,GAAG,WAAWC,SAAUT,KAAKJ,OAAQD,MAAOK,KAAKN,MAAMC,OAC7D,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,eAAd,qB,GAlCae,cEuBRC,G,oEArBX,aAAe,wC,qDAGL,IAAD,EAKDX,KAAKP,MAHLmB,EAFC,EAEDA,YACAC,EAHC,EAGDA,WACAC,EAJC,EAIDA,SAEJ,OAAO,yBAAKR,UAAS,cACjB,6BACI,6BAAMQ,GACN,yBAAKC,IAAG,iBAAYH,EAAZ,QAA+BI,MAAM,SAC7C,yBAAKV,UAAS,cACTO,S,GAfIH,cCqFVO,E,4MAlFbvB,MAAQ,CACNwB,OAAQ,I,kEAGRd,QAAQC,IAAIL,KAAKP,OADC,IAEV0B,EAAiBnB,KAAKP,MAAtB0B,aACRnB,KAAKG,SAAS,CACZe,OAAO,UAAD,OAAYC,EAAZ,Y,+BAGA,IAAD,EAcHnB,KAAKP,MAZP2B,EAFK,EAELA,WAEAC,GAJK,EAGLF,aAHK,EAILE,UAEAC,GANK,EAKLC,aALK,EAMLD,KAGAE,GATK,EAOLC,MAPK,EAQLX,SARK,EASLU,cACAE,EAVK,EAULA,OACAC,EAXK,EAWLA,KACA1B,EAZK,EAYLA,KACA2B,EAbK,EAaLA,aAGF,OADAxB,QAAQC,IAAIuB,GAEV,yBAAKtB,UAAU,UACb,yBAAKA,UAAS,wBAAmBoB,IAC/B,yBAAKpB,UAAS,wBAAmBoB,IAC/B,yBAAKpB,UAAS,YACXe,EADH,YAGCM,EACD,yBAAKrB,UAAS,cAAiBc,EAAWS,OAAO,EAAG,KAEtD,yBAAKvB,UAAS,uBAAkBoB,IAC9B,yBAAKpB,UAAS,WACZ,yBAAKA,UAAS,QAAWL,GAEzB,yBAAKK,UAAS,OACXgB,IAGL,yBAAKhB,UAAS,cACXoB,GAEH,yBAAKpB,UAAS,gBACXkB,IAGL,yBAAKlB,UAAS,0BAAqBoB,IACjC,yBAAKpB,UAAS,uBACXsB,EAAaN,KAAI,SAAAQ,GAChB,GAAsB,IAAlBA,EAAOC,OACT,OAAO,kBAAC,EAAD,CACLnB,YAAakB,EAAOlB,YACpBC,WAAYiB,EAAOjB,WACnBC,SAAUgB,EAAOhB,eAIzB,yBAAKR,UAAS,qBACZ,oCAEF,yBAAKA,UAAS,uBACXsB,EAAaN,KAAI,SAAAQ,GAChB,GAAsB,IAAlBA,EAAOC,OACT,OAAO,kBAAC,EAAD,CACLnB,YAAakB,EAAOlB,YACpBC,WAAYiB,EAAOjB,WACnBC,SAAUgB,EAAOhB,sB,GAxEdJ,aCHnBsB,EAAkB,CACpB,MACA,SACA,OACA,OACA,OACA,SACA,QACA,WACA,WACA,SACA,OACA,OACA,SACA,QACA,QACA,KACA,SACA,OACA,MACA,QACA,OACA,QACA,OACA,OACA,OACA,OACA,QACA,OACA,OACA,MACA,MACA,SACA,QACA,QACA,MACA,QACA,QAwCaC,E,kDArCb,WAAYxC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,MAAQ,CACNC,MAAO,MACPuC,cAAe,IANf,EAAKtC,OAAS,EAAKA,OAAOC,KAAZ,gBAEdO,QAAQC,IAAI,EAAKZ,MAAMyC,eAJN,E,mDAUZpC,GACL,IAAIH,EAAQG,EAAMI,OAAOP,MACzBK,KAAKP,MAAMyC,cAAcvC,GACzBK,KAAKG,SAAS,CAAER,MAAOA,M,+BAGvB,OACE,yBAAKW,UAAU,aACb,2BAAOC,QAAQ,eAAf,WACA,4BACEC,GAAG,cACHC,SAAUT,KAAKJ,OACfD,MAAOK,KAAKN,MAAMC,OAEjBqC,EAAgBV,KAAI,SAACV,EAAauB,GACjC,OACE,4BAAQC,IAAKxB,EAAayB,MAAOzB,EAAajB,MAAOiB,GAClDA,Y,GA5BSF,aCsCX4B,G,8NA3Eb5C,MAAQ,CACN8B,aAAc,GACde,QAAS,I,kEAEU,IAAD,EACmBvC,KAAKP,MAAlC+B,EADU,EACVA,aAAcvB,EADJ,EACIA,KAAMuC,EADV,EACUA,KACxBC,EAAmB,KAErBA,EADEjB,EAAe,EACE,IAAMA,EAENA,EAET,gBAARvB,EACFD,KAAKG,SAAS,CACZoC,QAASG,KAAKC,OAAOH,EAAO,GAAK,KAGnCxC,KAAKG,SAAS,CACZoC,QAASC,IAIbxC,KAAKG,SAAS,CAAEqB,aAAciB,M,+BAEtB,IAAD,EAUHzC,KAAKP,MARP2B,EAFK,EAELA,WACAoB,EAHK,EAGLA,KAEArB,GALK,EAILO,OAJK,EAKLP,cACAG,EANK,EAMLA,IACAG,EAPK,EAOLA,MACAX,EARK,EAQLA,SARK,EASLU,aAEF,OACE,yBAAKlB,UAAU,UACb,yBAAKA,UAAS,mCAA8BN,KAAKN,MAAM6C,UACrD,yBAAKjC,UAAS,2BAAsBN,KAAKN,MAAM6C,UAC7C,yBAAKjC,UAAS,mBAAcN,KAAKN,MAAM6C,QAAzB,YACXC,GAEH,6BAAMpB,GACN,6BAAMpB,KAAKN,MAAM8B,eAEnB,yBAAKlB,UAAS,gCAA2BN,KAAKN,MAAM6C,UAClD,6BACE,yBAAKxB,IAAG,kBAAaI,EAAb,QAAiCH,MAAM,SAC/C,6BAAMG,IAER,yBAAKb,UAAU,kBACb,+BACE,+BACE,4BACE,mCACA,qCACA,0CAGJ,+BACE,4BACE,4BAAKgB,GACL,4BAAKG,GACL,4BAAKX,c,GAhECJ,c,iBCyBpBkC,G,MAAa,CACjBC,OAAQ,SA6LKC,E,kDA1Lb,WAAYrD,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,MAAQ,CACNqD,SAAU,GACVC,QAAS,EACTC,QAAS,EACTC,QAAS,WACTC,SAAU,IARV,EAAKC,eAAiB,EAAKA,eAAevD,KAApB,gBACtB,EAAKwD,kBAAoB,EAAKA,kBAAkBxD,KAAvB,gBAHR,E,qDAYVJ,GAIP,OAHc6D,IAAGC,MAAM9D,EAAM+D,SAASC,OAAQ,CAC5CC,mBAAmB,M,kCAIXC,EAAUC,GACpB,IAAIC,EAAO,GACXF,EAASG,SAAQ,SAACC,GAChB,IAAIC,EAAOD,EAAIC,OACfA,EAAI,IAAUD,EAAIvD,GAClBJ,QAAQC,IAAI2D,GACZH,EAAKI,KAAKD,MAEZ5D,QAAQC,IAAIwD,GACZ7D,KAAKG,SAAS,CAAE4C,SAAUc,EAAMb,QAASY,M,kCAE/BA,GAAO,IAAD,OAChBxD,QAAQC,IAAI,eACZ,IAAM6D,EAAYN,EAAO,EACzBO,IAAMC,IAAN,gDAAmDF,EAAnD,aAEGG,MAAK,SAAAC,GACJlE,QAAQC,IAAIiE,GACZ,IAAMN,EAAOM,EAASN,KACtB,EAAK7D,SAAS,CACZ4C,SAAUiB,EAAKO,QACfvB,QAASgB,EAAKQ,OAAS,EACvBvB,QAASe,EAAKS,mBAKjBC,OAAM,SAAAC,GACLvE,QAAQC,IAAIsE,Q,yCAICC,GAEjB,IAAIC,EAAY7E,KAAK8E,SAASF,GAC1BG,EAAQ/E,KAAK8E,SAAS9E,KAAKP,OAI3BoF,EAAU7B,UAAY+B,EAAM/B,UAC9B5C,QAAQC,IAAR,oCAAyC0E,EAAM/B,UAC/ChD,KAAKgF,YAAYD,EAAM/B,Y,0CAKzB5C,QAAQC,IAAI,SACZ,IACI2C,EADQhD,KAAK8E,SAAS9E,KAAKP,OACXuD,aACJiC,IAAZjC,IAAuBA,EAAU,GACrCA,EAAUkC,SAASlC,GACnB5C,QAAQC,IAAR,kBAAuB2C,SACPiC,IAAZjC,IAAuBA,EAAU,GACrChD,KAAKgF,YAAYhC,K,wCAYDY,GAAO,IACjBuB,EAAYnF,KAAKP,MAAjB0F,QACN/E,QAAQC,IAAI,qBAEZ8E,EAAQlB,KAAR,4BAAkCL,M,mCAGvBwB,GAAM,IACXD,EAAYnF,KAAKP,MAAjB0F,QACNC,EAAMA,EAAIC,QAAQ,IAAK,OACvBF,EAAQlB,KAAR,wBAA8BmB,IAC9BhF,QAAQC,IAAI+E,K,uCAEI,IAAD,OAEfjB,IAAMC,IAAN,gDAAmDpE,KAAKN,MAAMyD,SAA9D,oBAEGkB,MAAK,SAAAC,GACJlE,QAAQC,IAAIiE,GACZ,IAAMN,EAAOM,EAASN,KACtB,EAAK7D,SAAS,CACZ4C,SAAUiB,EAAKO,QACfvB,QAASgB,EAAKQ,OAAS,EACvBvB,QAASe,EAAKS,mBAIjBC,OAAM,SAAAC,GACLvE,QAAQC,IAAIsE,Q,wCAaA7E,GAChB,IAAIH,EAAQG,EAAMI,OAAOP,MACzBK,KAAKG,SAAS,CACZgD,SAAUxD,M,+BAIJ,IAAD,OACP,OACE,6BACE,wCACA,6BAKE,2BACE2F,YAAY,uBACZ7E,SAAUT,KAAKqD,kBACf1D,MAAOK,KAAKN,MAAMyD,WAEpB,4BAAQoC,QAASvF,KAAKoD,eAAgB9C,UAAU,mBAAhD,WAIF,2BAAOkF,MAAO5C,EAAYtC,UAAU,SAClC,+BACE,4BACE,qCACA,+CAGJ,+BACGN,KAAKN,MAAMqD,SAASzB,KAAI,SAACmE,EAAMtD,GAC9B,OACE,wBACE7B,UAAU,SACV8B,IAAKqD,EAAKL,IACVxB,KAAM,EAAKlE,MAAMsD,QACjBuC,QAAS,kBAAM,EAAKG,aAAaD,EAAKL,OAEtC,4BAAgC,IAA1B,EAAK1F,MAAMsD,QAAU,GAAUb,EAAQ,GAC7C,4BACGsD,EAAKE,KADR,IACeF,EAAKL,IADpB,WAQV,kBAAC,EAAD,CACEpC,QAAShD,KAAKN,MAAMsD,QACpB4C,SAAU5F,KAAKN,MAAMuD,QACrB4C,aAAa,KACb3C,QAAQ,YACRqC,QAASvF,KAAK8F,kBAAkBjG,KAAKG,a,GApLxBU,aC3BjBqF,G,MACJ,WAAYC,EAAMC,EAAS1B,GAAU,oBACnCvE,KAAKgG,KAAOA,EACZhG,KAAKiG,QAAUA,EACfjG,KAAKuE,QAAUA,IAkFJ2B,E,4MA9EbxG,MAAQ,CACNsD,QAAS,G,iEAEQ4B,GACb5E,KAAKP,MAAMuD,UAAY4B,EAAU5B,SAEnChD,KAAKG,SAAS,CACZ6C,QAAShD,KAAKP,MAAMuD,Y,0CAKxBhD,KAAKG,SAAS,CACZ6C,QAAShD,KAAKP,MAAMuD,Y,+BAGf,MAY4ChD,KAAKP,MAAlDmG,EAZC,EAYDA,SAAUC,EAZT,EAYSA,aAAc3C,EAZvB,EAYuBA,QAASqC,EAZhC,EAYgCA,QAEnCvC,EAAUhD,KAAKN,MAAMsD,QAErBmD,EAAUzD,KAAKC,OAAOiD,EAAW,GAAKC,GAAgB,EAC1DzF,QAAQC,IAAR,kBAAuB8F,SAEPlB,IAAZjC,IAAuBA,EAAU,QAChBiC,IAAjBY,IAA4BA,EAAe,IAE/CzF,QAAQC,IAAR,kBAAuB2C,IACnBA,EAAU,EAAGA,EAAU,EAClBA,EAAUmD,IAASnD,EAAUmD,GAEtC,IAAIC,EAXiB,GAWL1D,KAAKC,OAAOK,EAAU,GAXjB,IAWqD,EACtEqD,EAAUD,EAZO,GAYoB,EACrCA,EAAY,IAAGA,EAAY,GAC3BC,EAAUF,IAASE,EAAUF,GAEjC/F,QAAQC,IAAR,kBAAuB2C,EAAvB,sBAA4CoD,EAA5C,oBAAiEC,EAAjE,MACA,IAAIC,EAAW,GACfA,EAASrC,KAAK,IAAI8B,EAAK,GAAIb,SAASlC,GAAW,EAAG,MAClD,IAAK,IAAIuD,EAAIH,EAAWG,GAAKF,EAASE,IACpCD,EAASrC,KAAK,IAAI8B,EAAJ,UAAY7C,EAAZ,oBAA+BqD,GAAKA,EAAGA,IAKvD,OAHAD,EAASrC,KAAK,IAAI8B,EAAK,GAAIb,SAASlC,GAAW,EAAG,MAIhD,yBAAK1C,UAAU,UACb,yBAAKA,UAAU,iBACZgG,EAAShF,KAAI,SAACsC,EAAMzB,GACnB,OACE,4BACEC,IAAKwB,EAAKW,QACVjE,UACE,aAAe0C,GAAWY,EAAKqC,QAAU,WAAa,IAExDV,QAAS,kBAAMA,EAAQ3B,EAAKqC,WAE3BrC,EAAKW,kB,GArEG7D,aCgQV8F,E,kDAzPb,WAAY/G,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,MAAQ,CACN+G,WAAY,GACZC,QAAS,EACTC,YAAa,EACbvB,IAXgB,iDAYhBnF,KAAM,MACNW,YAAa,MACbgG,SAAS,EACT5D,QAAS,EACTyB,cAAe,IAdE,EAwCnBqB,kBAAoB,SAAClC,GACnB,IAAMwB,EAAM,EAAKyB,SACjB,EAAKC,aAAa1B,EAAK,KAAM,KAAMxB,GAFP,IAItBuB,EAAY,EAAK1F,MAAjB0F,QACAjB,EAAYN,EAAO,EACnBmD,EAAW3B,EAAIC,QAAQ,IAAK,OAClCF,EAAQlB,KAAR,wBAA8B8C,EAA9B,iBAA+C7C,EAA/C,YACA9D,QAAQC,IAAI+E,IA9CZ,EAAKrF,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKqC,cAAgB,EAAKA,cAAcrC,KAAnB,gBAHJ,E,qDAoBjB,OAHcyD,IAAGC,MAAMvD,KAAKP,MAAM+D,SAASC,OAAQ,CACjDC,mBAAmB,IAER0B,M,mCAMb,OAHc9B,IAAGC,MAAMvD,KAAKP,MAAM+D,SAASC,OAAQ,CACjDC,mBAAmB,IAERV,U,8BAEPwB,GACN,IAAIwC,EAAMxC,EAAOyC,WAEjB,OADkB,GAAdD,EAAIE,SAAaF,EAAM,IAAMA,GAC1BA,I,qCAEMG,EAAWvG,GACxB,MAAmB,OAAfA,QAAuCqE,GAAfrE,EACnBuG,EAEAA,EAAUC,MAAM,eAAgB,KAAMxG,K,mCAapCwE,EAAKnF,EAAMW,EAAagD,GAAO,IAAD,OAEzCxD,QAAQC,IAAI+E,GACZA,EAAMA,EAAIC,QAAQ,IAAK,OACvBjF,QAAQC,IAAI+E,GACZ,IAAMlB,EAAYN,EAAO,EACzBO,IAAMC,IAAN,2CAA8CgB,EAA9C,iBAA0DlB,EAA1D,YAEGG,MAAK,SAAAC,GACJlE,QAAQC,IAAIiE,GACZ,IAAMN,EAAOM,EAASN,KACtB,EAAK7D,SAAS,CACZsG,WAAYnC,EAASN,KAAKO,QAC1BvB,QAASgB,EAAKqD,SAASC,WAAa,EACpC7C,cAAeT,EAAKS,mBAErBC,OAAM,SAAAC,GACPvE,QAAQC,IAAIsE,Q,0CAmDhB,IAAIS,EAAMpF,KAAK6G,SACf7G,KAAKG,SAAS,CAAEiF,IAAKA,IACrBpF,KAAK8G,aAAa1B,EAAKpF,KAAKN,MAAMO,Q,iCAGzBA,GACTG,QAAQC,IAAIL,KAAKN,MAAM0F,IAAKnF,EAAMD,KAAKN,MAAMkB,aAC7CZ,KAAKG,SAAS,CAAEF,KAAMA,IACtBD,KAAK8G,aAAa9G,KAAKN,MAAM0F,IAAKnF,EAAMD,KAAKN,MAAMkB,e,oCAEvCA,GACZR,QAAQC,IAAI,iBAAkBO,GAC9BZ,KAAKG,SAAS,CAAES,YAAaA,IAC7BZ,KAAK8G,aAAa9G,KAAKN,MAAM0F,IAAKpF,KAAKN,MAAMO,KAAMW,K,+BAE5CnB,GAIP,OAHc6D,IAAGC,MAAM9D,EAAM+D,SAASC,OAAQ,CAC5CC,mBAAmB,M,yCAIJkB,GAEjB,IAAIC,EAAY7E,KAAK8E,SAASF,GAC1BG,EAAQ/E,KAAK8E,SAAS9E,KAAKP,OAC/BW,QAAQC,IAAR,4BACuBwE,EAAUjB,KADjC,2BACwDmB,EAAMnB,OAG1DiB,EAAUjB,OAASmB,EAAMnB,OAC3BxD,QAAQC,IAAR,oCAAyC0E,EAAMnB,OAC/C5D,KAAK8G,aAAa/B,EAAMK,IAAIC,QAAQ,IAAK,OAAQ,KAAM,KAAMH,SAASH,EAAMnB,MAAQ,M,6BAIjF3D,GACL,MACW,YAATA,GACS,UAATA,GACS,UAATA,GACS,WAATA,GACS,cAATA,GACS,YAATA,I,+BAOM,IAAD,OACP,OACE,6BAIE,wCACA,kBAAC,EAAD,CAAUF,WAAYC,KAAKD,WAAYE,KAAMD,KAAKN,MAAMO,OACxD,kBAAC,EAAD,CAAaiC,cAAelC,KAAKkC,gBACjC,qCAAWlC,KAAKN,MAAM0F,KAYtB,yBAAK9E,UAAWN,KAAKN,MAAMkH,QAAU,WAAa,eAAlD,aAIE5G,KAAKN,MAAM+G,WAAWnF,KAAI,SAAC0C,GACzB,OAAI,EAAKuD,OAAOvD,EAAK/D,MAEjB,kBAAC,EAAD,CACEmC,IAAK4B,EAAK5C,WACVA,WAAY4C,EAAK5C,WAEjBoB,KAAMwB,EAAKwD,WACX9F,OAAQsC,EAAKtC,OACbP,aAAc6C,EAAKpD,YACnBS,SAAU2C,EAAK3C,SACfE,aAAcyC,EAAKyD,aACnBnG,IAAK0C,EAAK1C,IACVG,MAAOuC,EAAKvC,MACZX,SAAUkD,EAAKlD,SACfU,aAAcwC,EAAKxC,aACnBG,KAAMqC,EAAKrC,KACX1B,KAAM+D,EAAK/D,KACX2B,aAAcoC,EAAKpC,eAKrB,kBAAC,EAAD,CACEQ,IAAK4B,EAAK5C,WACVA,WACE4C,EAAK5C,WAEPoB,KAAMwB,EAAKwD,WACX9F,OAAQsC,EAAKtC,OACbP,aAAc6C,EAAKpD,YACnBS,SAAU2C,EAAK3C,SACfE,aAAcyC,EAAKyD,aACnBnG,IAAK0C,EAAK1C,IACVG,MAAOuC,EAAKvC,MACZX,SAAUkD,EAAKlD,SACfU,aAAcwC,EAAKxC,aACnBvB,KAAM+D,EAAK/D,UAKrB,kBAAC,EAAD,CACE+C,QAAShD,KAAKN,MAAMsD,QACpB4C,SAAU5F,KAAKN,MAAM+E,cACrBoB,aAAa,IACb3C,QAAQ,cACRqC,QAASvF,KAAK8F,kBAAkBjG,KAAKG,QAEvC,yBAAKwF,MAAO,CAAE,aAAgB,e,GAlPf9E,a,eCORgH,G,6KAlBX,OACE,yBAAKpH,UAAU,UACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAMqH,GAAG,KAAT,SAEF,yBAAKrH,UAAU,QACb,kBAAC,IAAD,CAAMqH,GAAG,aAAT,cAEF,yBAAKrH,UAAU,QACb,kBAAC,IAAD,CAAMqH,GAAG,YAAT,mB,GAZSjH,cCDfkH,G,OAAe,CAAC,SAAU,UAAW,aA0F5BC,E,4MArFbnI,MAAQ,CACNoI,SAAU,U,EAEZC,eAAiB,SAACD,GAChB,EAAK3H,SAAS,CACZ2H,SAAUA,K,uDAIJ,IAAD,OACP,OACE,yBACEtC,MAAO,CACL,UAAa,SAGf,yBAAKlF,UAAU,qBACZsH,EAAatG,KAAI,SAAC0G,EAAM7F,GAAP,OAChB,yBACEoD,QAAS,WACP,EAAKwC,eAAeC,IAEtB1H,UAAS,mBAAc0H,IAAS,EAAKtI,MAAMoI,SAAW,WAAa,IAEnE1F,IAAKD,GAEJ6F,OAKkB,WAAxBhI,KAAKN,MAAMoI,SACV,8HAEE,6BAFF,sFAIE,6BAJF,4CAKkB,6BALlB,uEAOE,6BAPF,0DASE,6BACA,6BAVF,gCAcA,GAEuB,YAAxB9H,KAAKN,MAAMoI,SACV,yEAEE,6BAFF,4CAIE,6BAJF,yCAME,6BANF,gDAQE,6BACA,6BATF,gCAaA,GAEuB,aAAxB9H,KAAKN,MAAMoI,SACV,kJAEE,6BAFF,0GAIE,6BAJF,qJAME,6BANF,uFAQE,6BACA,6BATF,gCAaA,Q,GA/ESpH,aC2EJuH,G,mNA3EXvI,MAAQ,CACJO,KAAM,UACNiI,KAAM,GACNC,aAAc,I,EAElBC,SAAW,SAACC,GACRjI,QAAQC,IAAR,gBACkB,EAAKZ,MAAjB0F,QACElB,KAAR,uBAA6BoE,K,EAEjCC,eAAiB,SAACrI,GACd,IAAIkI,EAAe,EAAKzI,MAAMwI,KACjB,QAATjI,QAA2BgF,IAAThF,IAClBkI,EAAe,EAAKzI,MAAMwI,KAAKK,QAAO,SAAAC,GAClC,OAAOA,EAAEvI,OAASA,MAG1B,EAAKE,SAAS,CACVgI,aAAcA,K,EAGtBpI,WAAa,SAACE,GACVG,QAAQC,IAAR,qBAA0BJ,IAC1BG,QAAQC,IAAR,gBAEA,EAAKiI,eAAerI,GAEF,EAAKR,MAAjB0F,QACElB,KAAR,wBAA8BhE,K,kEAEb,IAAD,OACV8E,EAAQzB,IAAGC,MAAMvD,KAAKP,MAAM+D,SAASC,OAAQ,CAC/CC,mBAAmB,IAEvBtD,QAAQC,IAAR,qBAA0B0E,EAAM9E,OAGhCkE,IAAMC,IAAN,qCAEKC,MAAK,SAAAC,GACFlE,QAAQC,IAAIiE,GACZ,IAAMN,EAAOM,EAASN,KAIlB/D,EAAO,eACQgF,IAAfF,EAAM9E,OACNA,EAAO8E,EAAM9E,MAEjB,EAAKE,SAAS,CACV+H,KAAMlE,EACN/D,KAAMA,IAEV,EAAKqI,eAAerI,MAErByE,OAAM,SAAAC,GACLvE,QAAQC,IAAIsE,Q,+BAGd,IAAD,OACL,OAAO,yBAAKrE,UAAU,WAClB,6BACI,kBAAC,EAAD,CAAU8B,IAAKpC,KAAKN,MAAMO,KAAMF,WAAYC,KAAKD,WAAYE,KAAMD,KAAKN,MAAMO,QAElF,yBAAKK,UAAU,oBACXN,KAAKN,MAAMyI,aAAa7G,KAAI,SAACA,EAAKa,GAC9B,OAAO,yBAAKC,IAAKD,EAAO7B,UAAU,cAAciF,QAAS,WAAQ,EAAK6C,SAAS9G,EAAIqE,QAAUrE,EAAIqE,KAC7F,yBAAK5E,IAAG,wBAAmBO,EAAIrB,KAAvB,YAA+BqB,EAAIqE,KAAnC,oB,GApEVjF,c,gBCwFP+H,G,mNAxFX/I,MAAQ,CACJ2I,QAAS,GACTK,UAAW,I,kEAEM,IAAD,OACV3D,EAAQzB,IAAGC,MAAMvD,KAAKP,MAAM+D,SAASC,OAAQ,CAC/CC,mBAAmB,IAEvBtD,QAAQC,IAAI0E,GACZ,IAAMsD,EAAUtD,EAAMsD,QACtBjI,QAAQC,IAAIgI,GACZ,IAAIM,EAAU,GACVD,EAAY,GAChBvE,IAAMC,IAAN,+CAAkDiE,IAE7ChE,MAAK,SAAAC,GACFlE,QAAQC,IAAIiE,GACZ,IAAMN,EAAOM,EAASN,KAiBtB,IAAK,IAAI5B,KAhBThC,QAAQC,IAAI2D,GACZA,EAAKF,SAAQ,SAAA8E,QAKsB3D,IAA3B0D,EAAQC,EAAEhI,eACV+H,EAAQC,EAAEhI,aAAe,IAG7B+H,EAAQC,EAAEhI,aAAV,eACO+H,EAAQC,EAAEhI,aADjB,eAEKgI,EAAElH,OAASkH,EAAEC,SAGtBzI,QAAQC,IAAIsI,GACIA,EAAS,CAAC,IAAD,EACWA,EAAQvG,GAClC0G,EAFe,EACfC,SACwB,EACxBC,EAHe,EACNC,QAEa,EACtBC,EAJe,EACEC,MAGC,EAClBC,EAAeN,EAAaE,EAAYE,EAC9CR,EAAUzE,KAAK,CACX,YAAe7B,EACf,QAAW0G,EACX,OAAUE,EACV,KAAQE,EACR,QAAYJ,EAAcM,EAC1B,aAAgBA,IAGxBV,EAAUW,MAAK,SAACC,EAAGC,GACf,OAAOA,EAAE7C,QAAU4C,EAAE5C,WAEzBtG,QAAQC,IAAIqI,GACZ,EAAKvI,SAAS,CACVuI,UAAWA,OAEhBhE,OAAM,SAAAC,GACLvE,QAAQC,IAAIsE,Q,+BAGd,IACA0D,EAAYrI,KAAKP,MAAjB4I,QACN,OAAO,yBAAK/H,UAAU,YACL,KAAZ+H,EAAkB,iDACf,yBAAK/H,UAAU,iBACVN,KAAKN,MAAMgJ,UAAUpH,KAAI,SAACkI,EAAKrH,GAC5B,OAAQ,yBAAK7B,UAAU,OAAO8B,IAAKD,GAC/B,yBAAK7B,UAAU,WACX,yBAAKS,IAAG,mBAAcyI,EAAI5I,YAAlB,UACR,yBAAKN,UAAU,eACVkJ,EAAI5I,cAGb,yBAAKN,UAAU,aACVkJ,EAAIJ,aADT,UAGA,yBAAK9I,UAAU,WACVoC,KAAK+G,MAAoB,IAAdD,EAAI9C,SAAmB,IADvC,e,GA7EVhG,cCqBHgJ,MAff,WACE,OACE,yBAAKpJ,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOqJ,KAAK,IAAIC,UAAW/B,EAAMgC,OAAO,IACxC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWpD,EAAUqD,OAAO,IACpD,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAW9G,IACnC,kBAAC,IAAD,CAAO6G,KAAK,WAAWC,UAAW3B,IAClC,kBAAC,IAAD,CAAO0B,KAAK,OAAOC,UAAWnB,OCRlBqB,QACW,cAA7BC,OAAOvG,SAASwG,UAEe,UAA7BD,OAAOvG,SAASwG,UAEhBD,OAAOvG,SAASwG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpG,MAAK,SAAAqG,GACJA,EAAaC,gBAEdjG,OAAM,SAAAC,GACLvE,QAAQuE,MAAMA,EAAMiG,a,kGEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.31c18ce7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ModeList extends Component {\n  constructor(props) {\n    super(props);\n    this.change = this.change.bind(this);\n  }\n  state = {\n    value: \"gemGrab\",\n  };\n  change(event) {\n    const { changeMode } = this.props;\n    let mode = event.target.value;\n    this.setState({ value: mode });\n    changeMode(mode);\n  }\n  componentDidMount() {\n    const { mode } = this.props;\n    console.log(`modeList : ${mode}`);\n    this.setState({\n      value: mode,\n    });\n  }\n  render() {\n    return (\n      <div className=\"selectBox\">\n        <label htmlFor=\"modeList\">mode </label>\n        <select id=\"modeList\" onChange={this.change} value={this.state.value}>\n          <option value=\"ALL\">ALL</option>\n          <option value=\"gemGrab\">gemGrab</option>\n          <option value=\"heist\">heist</option>\n          <option value=\"brawlBall\">brawlBall</option>\n          <option value=\"bounty\">bounty</option>\n          <option value=\"siege\">siege</option>\n          <option value=\"hotZone\">hotZone</option>\n          <option value=\"soloShowdown\">soloShowdown</option>\n          <option value=\"duoShowdown\">duoShowdown</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default ModeList;\n","import firebase, { firestore } from 'firebase'\nimport 'firebase/firestore'\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAvw6GqjvdJ30u8lhJPDpx_Asz6fw9QwaA\",\n    authDomain: \"brawlstars-260814.firebaseapp.com\",\n    databaseURL: \"https://brawlstars-260814.firebaseio.com\",\n    projectId: \"brawlstars-260814\",\n    storageBucket: \"brawlstars-260814.appspot.com\",\n    messagingSenderId: \"184744257860\",\n    appId: \"1:184744257860:web:7760bdf65e67cbeb9f8f11\",\n    measurementId: \"G-36T0YR0TBC\"\n};\n\nconst firestoreApp = firebase.initializeApp(firebaseConfig);\n\nexport default firestoreApp.firestore();","import React, { Component } from \"react\";\nimport playerTileStyles from \"./PlayerTile.scss\";\n\nclass PlayerTile extends Component {\n    constructor() {\n        super();\n    }\n    render() {\n        const {\n            brawlerName,\n            playerName,\n            trophies,\n        } = this.props;\n        return <div className={`playerTile`}>\n            <div>\n                <div>{trophies}</div>\n                <img src={`images/${brawlerName}.png`} width=\"50px\" />\n                <div className={`playerName`}>\n                    {playerName}\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default PlayerTile;","import React, { Component } from \"react\";\nimport styles from \"./TrioMode.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport PlayerTile from \"./PlayerTile\";\nclass TrioMode extends Component {\n  state = {\n    imgSrc: \"\",\n  };\n  componentDidMount() {\n    console.log(this.props);\n    const { brawler_name } = this.props;\n    this.setState({\n      imgSrc: `images/${brawler_name}.png`,\n    });\n  }\n  render() {\n    const {\n      battleTime,\n      brawler_name,\n      duration,\n      isStarPalyer,\n      map,\n      power,\n      trophies,\n      trophyChange,\n      result,\n      type,\n      mode,\n      groupRecords,\n    } = this.props;\n    console.log(groupRecords);\n    return (\n      <div className=\"center\">\n        <div className={`trioContainer ${result}`}>\n          <div className={`typeInfo info ${result}`}>\n            <div className={`duration`}>\n              {duration} seconds\n            </div>\n            {type}\n            <div className={`battleTime`}>{battleTime.substr(0, 8)}</div>\n          </div>\n          <div className={`gameInfo top ${result}`}>\n            <div className={`modeMap`}>\n              <div className={`mode`}>{mode}\n              </div>\n              <div className={`map`}>\n                {map}\n              </div>\n            </div>\n            <div className={`gameResult`}>\n              {result}\n            </div>\n            <div className={`trophyChange`}>\n              {trophyChange}\n            </div>\n          </div>\n          <div className={`playerInfo info ${result}`}>\n            <div className={`trioPlayerContainer`}>\n              {groupRecords.map(record => {\n                if (record.teamId === 0)\n                  return <PlayerTile\n                    brawlerName={record.brawlerName}\n                    playerName={record.playerName}\n                    trophies={record.trophies}\n                  ></PlayerTile>;\n              })}\n            </div>\n            <div className={`durationContainer`}>\n              <div>vs</div>\n            </div>\n            <div className={`trioPlayerContainer`}>\n              {groupRecords.map(record => {\n                if (record.teamId === 1)\n                  return <PlayerTile\n                    brawlerName={record.brawlerName}\n                    playerName={record.playerName}\n                    trophies={record.trophies}\n                  ></PlayerTile>\n              })}\n            </div>\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default TrioMode;\n","import React, { Component } from \"react\";\n\nlet brawlerNameList = [\n  \"ALL\",\n  \"SHELLY\",\n  \"NITA\",\n  \"COLT\",\n  \"BULL\",\n  \"JESSIE\",\n  \"BROCK\",\n  \"DYNAMIKE\",\n  \"EL PRIMO\",\n  \"BARLEY\",\n  \"POCO\",\n  \"RICO\",\n  \"DARRYL\",\n  \"PIPER\",\n  \"PENNY\",\n  \"BO\",\n  \"MORTIS\",\n  \"TARA\",\n  \"PAM\",\n  \"FRANK\",\n  \"CROW\",\n  \"SPIKE\",\n  \"LEON\",\n  \"GENE\",\n  \"TICK\",\n  \"ROSA\",\n  \"8-BIT\",\n  \"CARL\",\n  \"BIBI\",\n  \"EMZ\",\n  \"BEA\",\n  \"SPROUT\",\n  \"SANDY\",\n  \"JACKY\",\n  \"MAX\",\n  \"MR. P\",\n  \"GALE\",\n];\nclass BrawlerList extends Component {\n  constructor(props) {\n    super(props);\n    this.change = this.change.bind(this);\n    //this.setState({ changeBrawler: this.props.changeBrawler });\n    console.log(this.props.changeBrawler);\n  }\n  state = {\n    value: \"ALL\",\n    changeBrawler: \"\",\n  };\n  change(event) {\n    let value = event.target.value;\n    this.props.changeBrawler(value);\n    this.setState({ value: value });\n  }\n  render() {\n    return (\n      <div className=\"selectBox\">\n        <label htmlFor=\"brawlerName\">brawler</label>\n        <select\n          id=\"brawlerName\"\n          onChange={this.change}\n          value={this.state.value}\n        >\n          {brawlerNameList.map((brawlerName, index) => {\n            return (\n              <option key={brawlerName} label={brawlerName} value={brawlerName}>\n                {brawlerName}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default BrawlerList;\n","import React, { Component } from \"react\";\nimport styles from \"./SoloDuoMode.scss\";\n\nclass SoloDuoMode extends Component {\n  state = {\n    trophyChange: \"\",\n    rankCss: \"\",\n  };\n  componentDidMount() {\n    const { trophyChange, mode, rank } = this.props;\n    let signTrophyChange = null;\n    if (trophyChange > 0) {\n      signTrophyChange = \"+\" + trophyChange;\n    } else {\n      signTrophyChange = trophyChange;\n    }\n    if (mode == \"soloShowdown\") {\n      this.setState({\n        rankCss: Math.floor((rank + 1) / 2),\n      });\n    } else {\n      this.setState({\n        rankCss: rank,\n      });\n    }\n\n    this.setState({ trophyChange: signTrophyChange });\n  }\n  render() {\n    const {\n      battleTime,\n      rank,\n      result,\n      brawler_name,\n      map,\n      power,\n      trophies,\n      trophyChange,\n    } = this.props;\n    return (\n      <div className=\"center\">\n        <div className={`SoloDuoModeContainer rank${this.state.rankCss}`}>\n          <div className={`topContainer rank${this.state.rankCss}`}>\n            <div className={`rank rank${this.state.rankCss}Content`}>\n              {rank}\n            </div>\n            <div>{battleTime}</div>\n            <div>{this.state.trophyChange}</div>\n          </div>\n          <div className={`gameInfoContainer rank${this.state.rankCss}`}>\n            <div>\n              <img src={`/images/${brawler_name}.png`} width=\"50px\" />\n              <div>{brawler_name}</div>\n            </div>\n            <div className=\"tableContainer\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>map</th>\n                    <th>power</th>\n                    <th>trophies</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>{map}</td>\n                    <td>{power}</td>\n                    <td>{trophies}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SoloDuoMode;\n","import React, { Component } from \"react\";\nimport firestore from \"./Firestore\";\nimport Pagination from \"./Pagination\";\nimport qs from \"qs\";\nimport styles from \"./UserList.scss\";\nimport baseStyles from \"./Base.scss\";\nimport { Router } from \"react-router-dom\";\nimport axios from \"axios\";\n\nclass User {\n  constructor(tag, name) {\n    this.tag = tag;\n    this.name = name;\n  }\n}\n\n// const getUserList = () => {\n//     return firestore.collection(\"ID_LIST\")\n//         .get().then((snapshot) => {\n//             var rows = [];\n//             snapshot.forEach((doc) => {\n//                 var data = doc.data();\n//                 console.log(data);\n\n//             })\n//         });\n// }\n\nconst tableStyle = {\n  margin: \"auto\",\n};\nclass UserList extends Component {\n  constructor(props) {\n    super(props);\n    this.searchNickname = this.searchNickname.bind(this);\n    this.searchInputChange = this.searchInputChange.bind(this);\n  }\n  state = {\n    userList: [],\n    curPage: 0,\n    numUser: 0,\n    pageUrl: \"userList\",\n    nickname: \"\",\n  };\n  getQuery(props) {\n    const query = qs.parse(props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query;\n  }\n  setUserList(snapshot, page) {\n    var rows = [];\n    snapshot.forEach((doc) => {\n      var data = doc.data();\n      data[\"tag\"] = doc.id;\n      console.log(data);\n      rows.push(data);\n    });\n    console.log(rows);\n    this.setState({ userList: rows, curPage: page });\n  }\n  getUserList(page) {\n    console.log(\"getUserList\");\n    const queryPage = page - 1;\n    axios.get(`http://brawlstat.xyz:8080/member?page=${queryPage}&size=15`)\n      //axios.get(`http://localhost/record/${tag}`)\n      .then(response => {      // .then : 응답(상태코드200~300미만)성공시\n        console.log(response);\n        const data = response.data;\n        this.setState({\n          userList: data.content,\n          curPage: data.number + 1,\n          numUser: data.totalElements\n        });\n\n        //this.setState({ playRecord: response.data.content });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n\n  }\n  componentDidUpdate(prevProps) {\n    //console.log(\"update\");\n    let prevQuery = this.getQuery(prevProps);\n    let query = this.getQuery(this.props);\n    // console.log(\n    //   `prevQuery.curpage ${prevQuery.curPage}, query.curPage ${query.curPage}`\n    // );\n    if (prevQuery.curPage !== query.curPage) {\n      console.log(`componentWill Update !!!! ${query.curPage}`);\n      this.getUserList(query.curPage);\n      //this.setState({curPage: query.curPage\n    }\n  }\n  componentDidMount() {\n    console.log(\"mount\");\n    let query = this.getQuery(this.props);\n    let curPage = query.curPage;\n    if (curPage === undefined) curPage = 1;\n    curPage = parseInt(curPage);\n    console.log(`curPage ${curPage}`);\n    if (curPage === undefined) curPage = 1;\n    this.getUserList(curPage);\n\n    // firestore\n    //   .collection(\"PageInfo\")\n    //   .doc(\"ID_LIST\")\n    //   .get()\n    //   .then((doc) => {\n    //     const { numUser } = doc.data();\n\n    //     this.setState({ numUser: numUser });\n    //   });\n  }\n  changePageHandler(page) {\n    let { history } = this.props;\n    console.log(\"changePageHandler\");\n    // this.setState({curPage : page});\n    history.push(`/userList?curPage=${page}`);\n    //this.getUserList(page);\n  }\n  showPlayList(tag) {\n    let { history } = this.props;\n    tag = tag.replace(\"#\", \"%23\");\n    history.push(`/playList?tag=${tag}`);\n    console.log(tag);\n  }\n  searchNickname() {\n    //console.log(this.state.nickname);\n    axios.get(`http://brawlstat.xyz:8080/member?name=${this.state.nickname}&page=0&size=15`)\n      //axios.get(`http://localhost/record/${tag}`)\n      .then(response => {      // .then : 응답(상태코드200~300미만)성공시\n        console.log(response);\n        const data = response.data;\n        this.setState({\n          userList: data.content,\n          curPage: data.number + 1,\n          numUser: data.totalElements\n        });\n        //this.setState({ playRecord: response.data.content });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n    // firestore\n    //   .collection(\"ID_LIST\")\n    //   .where(\"name\", \"==\", this.state.nickname)\n    //   .get()\n    //   .then((snapshot) => {\n    //     snapshot.forEach((doc) => {\n    //       console.log(\"doc\", doc.data());\n    //     });\n    //     this.setUserList(snapshot, 1);\n    //   });\n  }\n  searchInputChange(event) {\n    let value = event.target.value;\n    this.setState({\n      nickname: value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>UserList</h1>\n        <div>\n          {/* <select className=\"select\">\n                        <option label = \"nickname\" value=\"nickname\"></option>\n                        <option label = \"tag\" value = \"tag\"></option>\n                    </select> */}\n          <input\n            placeholder=\"search user nickname\"\n            onChange={this.searchInputChange}\n            value={this.state.nickname}\n          ></input>\n          <button onClick={this.searchNickname} className=\"btn btn-primary\">\n            search\n          </button>\n        </div>\n        <table style={tableStyle} className=\"table\">\n          <thead>\n            <tr>\n              <th>Index</th>\n              <th>Nickname(tag)</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.userList.map((user, index) => {\n              return (\n                <tr\n                  className=\"cursor\"\n                  key={user.tag}\n                  page={this.state.curPage}\n                  onClick={() => this.showPlayList(user.tag)}\n                >\n                  <td>{(this.state.curPage - 1) * 15 + index + 1}</td>\n                  <td>\n                    {user.name}({user.tag})\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <Pagination\n          curPage={this.state.curPage}\n          numTotal={this.state.numUser}\n          numShowItems=\"15\"\n          pageUrl=\"/userList\"\n          onClick={this.changePageHandler.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserList;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport UserList from \"./UserList\";\nimport styles from \"./Pagination.scss\";\nclass Page {\n  constructor(link, pageNum, content) {\n    this.link = link;\n    this.pageNum = pageNum;\n    this.content = content;\n  }\n}\nclass Pagination extends Component {\n  state = {\n    curPage: 1,\n  };\n  componentDidUpdate(prevProps) {\n    if (this.props.curPage !== prevProps.curPage) {\n      //console.log(\"update!!!!\");\n      this.setState({\n        curPage: this.props.curPage,\n      });\n    }\n  }\n  componentDidMount() {\n    this.setState({\n      curPage: this.props.curPage,\n    });\n  }\n  render() {\n    //   let { curPage } = this.props;\n    //   return (\n    //     <div>\n    //       {this.state.curPage}\n    //       {curPage}\n    //       <button onClick={() => this.props.onClick(this.state.curPage + 1)}>\n    //         next\n    //       </button>\n    //     </div>\n    //   );\n    // }\n    let { numTotal, numShowItems, pageUrl, onClick } = this.props;\n    //console.log(`pagination props ${this.state.curPage}`);\n    let curPage = this.state.curPage;\n    const numShowPages = 10;\n    let maxPage = Math.floor((numTotal - 1) / numShowItems) + 1;\n    console.log(`maxPage ${maxPage}`);\n\n    if (curPage === undefined) curPage = 1;\n    if (numShowItems === undefined) numShowItems = 15;\n\n    console.log(`curPage ${curPage}`);\n    if (curPage < 1) curPage = 1;\n    else if (curPage > maxPage) curPage = maxPage;\n\n    let startPage = Math.floor((curPage - 1) / numShowPages) * numShowPages + 1;\n    let endPage = startPage + numShowPages - 1;\n    if (startPage < 1) startPage = 1;\n    if (endPage > maxPage) endPage = maxPage;\n\n    console.log(`curPage ${curPage} startPage ${startPage} endPage ${endPage} `)\n    let pageList = [];\n    pageList.push(new Page(\"\", parseInt(curPage) - 1, \"<\"));\n    for (let i = startPage; i <= endPage; i++) {\n      pageList.push(new Page(`${pageUrl}?curPage=${i}`, i, i));\n    }\n    pageList.push(new Page(\"\", parseInt(curPage) + 1, \">\"));\n\n    //console.log(\"chagnePageHandler\", this.props.onClick);\n    return (\n      <div className=\"center\">\n        <div className=\"btn-container\">\n          {pageList.map((page, index) => {\n            return (\n              <button\n                key={page.content}\n                className={\n                  \"btn-page \" + (curPage == page.pageNum ? \"activate\" : \"\")\n                }\n                onClick={() => onClick(page.pageNum)}\n              >\n                {page.content}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Pagination;\n","import React, { Component } from \"react\";\nimport qs from \"qs\";\nimport firestore from \"./Firestore\";\nimport ModeList from \"./ModeList\";\nimport TrioMode from \"./TrioMode\";\nimport BrawlerList from \"./BrawlerList\";\nimport playStyles from \"./PlayList.scss\";\nimport styles from \"./Base.scss\";\nimport SoloDuoMode from \"./SoloDuoMode\";\nimport axios from \"axios\";\nimport Pagination from \"./Pagination\";\n// const PlayList = ({location}) =>{\n//     const query = qs.parse(location.search,{\n//         ignoreQueryPrefix : true\n//     });\n//     const tag = query.tag || \"tag를 입력해주세요\";\nconst tag = null || \"tag를 입력해주세요\";\nclass PlayList extends Component {\n  constructor(props) {\n    super(props);\n    this.changeMode = this.changeMode.bind(this);\n    this.changeBrawler = this.changeBrawler.bind(this);\n  }\n  state = {\n    playRecord: [],\n    winRate: 0,\n    averageRank: 0,\n    tag,\n    mode: \"ALL\",\n    brawlerName: \"ALL\",\n    isEmpty: false,\n    curPage: 1,\n    totalElements: 10,\n  };\n  getTag() {\n    const query = qs.parse(this.props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query.tag;\n  }\n  getCurPage() {\n    const query = qs.parse(this.props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query.curPage;\n  }\n  addZero(number) {\n    let str = number.toString();\n    if (str.length == 1) str = \"0\" + str;\n    return str;\n  }\n  addBrawlerName(statement, brawlerName) {\n    if (brawlerName == \"ALL\" || brawlerName == undefined) {\n      return statement;\n    } else {\n      return statement.where(\"brawler_name\", \"==\", brawlerName);\n    }\n  }\n  changePageHandler = (page) => {\n    const tag = this.getTag();\n    this.getBattleLog(tag, null, null, page);\n\n    let { history } = this.props;\n    const queryPage = page - 1;\n    const queryTag = tag.replace(\"#\", \"%23\");\n    history.push(`/playList?tag=${queryTag}&page=${queryPage}&size=5`);\n    console.log(tag);\n  }\n  getBattleLog(tag, mode, brawlerName, page) {\n    let rows = [];\n    console.log(tag);\n    tag = tag.replace(\"#\", \"%23\");\n    console.log(tag);\n    const queryPage = page - 1;\n    axios.get(`http://brawlstat.xyz:8080/record/${tag}?page=${queryPage}&size=5`)\n      //axios.get(`http://localhost/record/${tag}`)\n      .then(response => {      // .then : 응답(상태코드200~300미만)성공시\n        console.log(response);\n        const data = response.data;\n        this.setState({\n          playRecord: response.data.content,\n          curPage: data.pageable.pageNumber + 1,\n          totalElements: data.totalElements\n        })\n      }).catch(error => {\n        console.log(error);\n      });\n    // let statement = firestore.collection(\"battleLog\").where(\"tag\", \"==\", tag);\n    // this.addBrawlerName(statement, brawlerName)\n    //   .where(\"mode\", \"==\", mode)\n    //   .orderBy(\"battleTime\", \"desc\")\n    //   .limit(25)\n    //   .get()\n    //   .then((snapshot) => {\n    //     let numVictory = 0;\n    //     let numGame = 0;\n    //     let sumRank = 0;\n    //     if (snapshot.empty) {\n    //       console.log(\"no document\");\n    //       this.setState({\n    //         playRecord: [],\n    //         winRate: 0,\n    //         averageRank: 0,\n    //         isEmpty: true,\n    //       });\n    //       return;\n    //     }\n    //     snapshot.forEach((doc) => {\n    //       let data = doc.data();\n    //       let date = new Date(data[\"battleTime\"]);\n    //       date.setHours(date.getHours() + 9);\n    //       //console.log(date.getFullYear(), date.getMonth());\n    //       data[\"battleTime\"] = date.toString();\n    //       data[\"year\"] = date.getFullYear();\n\n    //       data[\"month\"] = this.addZero(date.getMonth() + 1);\n    //       data[\"date\"] = this.addZero(date.getDate());\n    //       data[\"hour\"] = this.addZero(date.getHours());\n    //       data[\"minute\"] = this.addZero(date.getMinutes());\n    //       //console.log(doc.id);\n    //       //console.log(data);\n    //       rows.push(data);\n    //       numGame++;\n    //       sumRank += data.rank;\n    //       if (data.result === \"victory\") numVictory++;\n    //       //playRecord\n    //     });\n    //     this.setState({ playRecord: rows });\n    //     this.setState({ winRate: Math.floor((numVictory / numGame) * 100) });\n    //     this.setState({\n    //       averageRank: Math.floor((sumRank / numGame) * 100) / 100,\n    //     });\n    //     this.setState({ isEmpty: false });\n    //   });\n  }\n  componentDidMount() {\n    let tag = this.getTag();\n    this.setState({ tag: tag });\n    this.getBattleLog(tag, this.state.mode);\n  }\n\n  changeMode(mode) {\n    console.log(this.state.tag, mode, this.state.brawlerName);\n    this.setState({ mode: mode });\n    this.getBattleLog(this.state.tag, mode, this.state.brawlerName);\n  }\n  changeBrawler(brawlerName) {\n    console.log(\"change bralwer\", brawlerName);\n    this.setState({ brawlerName: brawlerName });\n    this.getBattleLog(this.state.tag, this.state.mode, brawlerName);\n  }\n  getQuery(props) {\n    const query = qs.parse(props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query;\n  }\n  componentDidUpdate(prevProps) {\n    //console.log(\"update\");\n    let prevQuery = this.getQuery(prevProps);\n    let query = this.getQuery(this.props);\n    console.log(\n      `prevQuery.curpage ${prevQuery.page}, query.curPage ${query.page}`\n    );\n\n    if (prevQuery.page !== query.page) {\n      console.log(`componentWill Update !!!! ${query.page}`);\n      this.getBattleLog(query.tag.replace(\"#\", \"%23\"), null, null, parseInt(query.page) + 1);\n      //this.setState({curPage: query.curPage\n    }\n  }\n  isTrio(mode) {\n    if (\n      mode === \"gemGrab\" ||\n      mode === \"heist\" ||\n      mode === \"siege\" ||\n      mode === \"bounty\" ||\n      mode === \"brawlBall\" ||\n      mode === \"hotZone\"\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  render() {\n    return (\n      <div>\n        {/*\n                My Tag %239QU209UYC\n                */}\n        <h1>PlayList</h1>\n        <ModeList changeMode={this.changeMode} mode={this.state.mode} />\n        <BrawlerList changeBrawler={this.changeBrawler} />\n        <h2>Tag : {this.state.tag}</h2>\n        {/* <select onChange={this.changeModeType} value={this.state.modeType}>\n          <option value=\"soloShowdown\">solo</option>\n          <option value=\"duoShowdown\">duo</option>\n          <option value=\"trio\">trio</option>\n        </select> */}\n        {/* {this.isTrio(this.state.mode) && (\n          <h3>Win Rate : {this.state.winRate}%</h3>\n        )} */}\n        {/* {!this.isTrio(this.state.mode) && (\n          <h3>Average Rank : {this.state.averageRank}</h3>\n        )} */}\n        <div className={this.state.isEmpty ? \"noRecord\" : \"displayNone\"}>\n          No record\n        </div>\n        {\n          this.state.playRecord.map((data) => {\n            if (this.isTrio(data.mode)) {\n              return (\n                <TrioMode\n                  key={data.battleTime}\n                  battleTime={data.battleTime\n                  }\n                  rank={data.resultRank}\n                  result={data.result}\n                  brawler_name={data.brawlerName}\n                  duration={data.duration}\n                  isStarPalyer={data.isStarPlayer}\n                  map={data.map}\n                  power={data.power}\n                  trophies={data.trophies}\n                  trophyChange={data.trophyChange}\n                  type={data.type}\n                  mode={data.mode}\n                  groupRecords={data.groupRecords}\n                />\n              );\n            } else {\n              return (\n                <SoloDuoMode\n                  key={data.battleTime}\n                  battleTime={\n                    data.battleTime\n                  }\n                  rank={data.resultRank}\n                  result={data.result}\n                  brawler_name={data.brawlerName}\n                  duration={data.duration}\n                  isStarPalyer={data.isStarPlayer}\n                  map={data.map}\n                  power={data.power}\n                  trophies={data.trophies}\n                  trophyChange={data.trophyChange}\n                  mode={data.mode}\n                />\n              );\n            }\n          })}\n        <Pagination\n          curPage={this.state.curPage}\n          numTotal={this.state.totalElements}\n          numShowItems=\"5\"\n          pageUrl=\"/playerList\"\n          onClick={this.changePageHandler.bind(this)}\n        ></Pagination>\n        <div style={{ 'marginBottom': \"10px\" }}>\n        </div>\n      </div >\n      // </div>\n    );\n  }\n}\n\nexport default PlayList;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./TopBar.scss\";\n\nclass TopBar extends Component {\n  render() {\n    return (\n      <div className=\"topBar\">\n        <div className=\"menuContainer\">\n          <div className=\"item\">\n            <Link to=\"/\">Home</Link>\n          </div>\n          <div className=\"item\">\n            <Link to=\"/userList\">User List</Link>\n          </div>\n          <div className=\"item\">\n            <Link to=\"/mapList\">Map List</Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TopBar;\n","import React, { Component } from \"react\";\nimport styles from \"./Home.scss\";\n\nconst languageList = [\"korean\", \"english\", \"japanese\"];\nconst displayNone = {\n  display: \"none\",\n};\nclass Home extends Component {\n  state = {\n    language: \"korean\",\n  };\n  changeLanguage = (language) => {\n    this.setState({\n      language: language,\n    });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          \"marginTop\": \"30px\",\n        }}\n      >\n        <div className=\"languageContainer\">\n          {languageList.map((lang, index) => (\n            <div\n              onClick={() => {\n                this.changeLanguage(lang);\n              }}\n              className={`language ${lang === this.state.language ? \"selected\" : \"\"\n                }`}\n              key={index}\n            >\n              {lang}\n            </div>\n          ))}\n        </div>\n\n        {this.state.language === \"korean\" ? (\n          <div>\n            브롤스타즈 전적 기록 사이트입니다.\n            <br />\n            1시간 마다 전적이 동기화됩니다.\n            <br />\n            User List를 클릭하여 <br />\n            자신의 닉네임을 검색하고\n            <br />\n            전적을 확인해보세요\n            <br />\n            <br />\n            email : cubeprince@gmail.com\n          </div>\n        ) : (\n          \"\"\n        )}\n        {this.state.language === \"english\" ? (\n          <div>\n            This is the Brawl Stars game record site.\n            <br />\n            Game records are synchronized every hour.\n            <br />\n            Click on the User List on the top menu\n            <br />\n            to search your nickname and check the history\n            <br />\n            <br />\n            email : cubeprince@gmail.com\n          </div>\n        ) : (\n          \"\"\n        )}\n        {this.state.language === \"japanese\" ? (\n          <div>\n            ブロールスターズの戦闘記録サイトです。\n            <br />\n            戦闘記録は1時間ごとに同期されます。\n            <br />\n            UserListをクリックして、自分のニックネームを検索して、\n            <br />\n            戦闘記録を確認してください。\n            <br />\n            <br />\n            email : cubeprince@gmail.com\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport mapListStyles from \"./MapList.scss\";\nimport ModeList from './ModeList';\nimport qs from 'qs';\n\nclass MapList extends Component {\n    state = {\n        mode: 'gemGrab',\n        maps: [],\n        filteredMaps: [],\n    }\n    clickMap = (mapName) => {\n        console.log(this);\n        let { history } = this.props;\n        history.push(`/map?mapName=${mapName}`);\n    }\n    setFilteredMap = (mode) => {\n        let filteredMaps = this.state.maps;\n        if (mode !== 'ALL' && mode !== undefined) {\n            filteredMaps = this.state.maps.filter(x => {\n                return x.mode === mode;\n            });\n        }\n        this.setState({\n            filteredMaps: filteredMaps,\n        });\n    }\n    changeMode = (mode) => {\n        console.log(`changeMode ${mode}`);\n        console.log(this);\n\n        this.setFilteredMap(mode);\n\n        let { history } = this.props;\n        history.push(`/mapList?mode=${mode}`);\n    }\n    componentDidMount() {\n        const query = qs.parse(this.props.location.search, {\n            ignoreQueryPrefix: true,\n        });\n        console.log(`query mode ${query.mode}`);\n\n        //this.setFilteredMap(query.mode);\n        axios.get(`http://brawlstat.xyz:8080/gameMap`)\n            //axios.get(`http://localhost/record/${tag}`)\n            .then(response => {\n                console.log(response);\n                const data = response.data;\n                // const gemGrabMaps = data.filter(x => {\n                //     return x.mode === \"gemGrab\"\n                // });\n                let mode = 'gemGrab';\n                if (query.mode !== undefined) {\n                    mode = query.mode;\n                }\n                this.setState({\n                    maps: data,\n                    mode: mode\n                })\n                this.setFilteredMap(mode);\n                //this.changeMode(query.mode);\n            }).catch(error => {\n                console.log(error);\n            });\n    }\n    render() {\n        return <div className=\"mapList\">\n            <div>\n                <ModeList key={this.state.mode} changeMode={this.changeMode} mode={this.state.mode}></ModeList>\n            </div>\n            <div className=\"gemGrabContainer\">{\n                this.state.filteredMaps.map((map, index) => {\n                    return <div key={index} className=\"gemGrabItem\" onClick={() => { this.clickMap(map.name) }}>{map.name}\n                        <img src={`./images/maps/${map.mode}/${map.name}.png`}></img>\n                    </div>\n                })}\n            </div>\n        </div>\n    }\n}\n\nexport default MapList;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport qs from 'qs';\nimport styles from \"./Map.scss\";\n\nclass Map extends Component {\n    state = {\n        mapName: \"\",\n        recordArr: [],\n    }\n    componentDidMount() {\n        const query = qs.parse(this.props.location.search, {\n            ignoreQueryPrefix: true,\n        });\n        console.log(query);\n        const mapName = query.mapName;\n        console.log(mapName);\n        let records = {};\n        let recordArr = [];\n        axios.get(`http://brawlstat.xyz:8080/record/map/${mapName}`)\n            //axios.get(`http://localhost/record/${tag}`)\n            .then(response => {\n                console.log(response);\n                const data = response.data;\n                console.log(data);\n                data.forEach(e => {\n                    // brawlerName: \"COLETTE\"\n                    // cnt: 14\n                    // result: \"defeat\"\n                    // __proto__: Object\n                    if (records[e.brawlerName] === undefined) {\n                        records[e.brawlerName] = {\n                        };\n                    }\n                    records[e.brawlerName] = {\n                        ...records[e.brawlerName],\n                        [e.result]: e.cnt\n                    }\n                });\n                console.log(records);\n                for (let key in records) {\n                    let { victory, defeat, draw } = records[key];\n                    const victoryNum = victory || 0;\n                    const defeatNum = defeat || 0;\n                    const drawNum = draw || 0;\n                    const totalGameNum = victoryNum + defeatNum + drawNum;\n                    recordArr.push({\n                        \"brawlerName\": key,\n                        \"victory\": victoryNum,\n                        \"defeat\": defeatNum,\n                        \"draw\": drawNum,\n                        \"winRate\": (victoryNum) / totalGameNum,\n                        \"totalGameNum\": totalGameNum\n                    });\n                }\n                recordArr.sort((a, b) => {\n                    return b.winRate - a.winRate;\n                })\n                console.log(recordArr);\n                this.setState({\n                    recordArr: recordArr\n                })\n            }).catch(error => {\n                console.log(error);\n            });\n    }\n    render() {\n        let { mapName } = this.props;\n        return <div className=\"mapClass\">\n            {mapName === \"\" ? (<div>invalid map name</div>) :\n                <div className=\"infoContainer\">\n                    {this.state.recordArr.map((ele, index) => {\n                        return (<div className=\"info\" key={index}>\n                            <div className=\"brawler\">\n                                <img src={`./images/${ele.brawlerName}.png`}></img>\n                                <div className=\"brawlerName\">\n                                    {ele.brawlerName}\n                                </div>\n                            </div>\n                            <div className=\"totalGame\">\n                                {ele.totalGameNum} games\n                            </div>\n                            <div className=\"winRate\">\n                                {Math.round(ele.winRate * 10000) / 100}%\n                            </div>\n                        </div>\n                        )\n                    })}\n                </div>\n            }\n        </div>\n    }\n}\n\nexport default Map;","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayList from \"./components/PlayList\";\nimport UserList from \"./components/UserList\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport TopBar from \"./components/TopBar\";\nimport Home from \"./components/Home\";\nimport MapList from \"./components/MapList\";\nimport Map from \"./components/Map\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <TopBar />\n        <Route path=\"/\" component={Home} exact={true} />\n        <Route path=\"/playList\" component={PlayList} exact={true} />\n        <Route path=\"/userList\" component={UserList} />\n        <Route path=\"/mapList\" component={MapList} />\n        <Route path=\"/map\" component={Map} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}