{"version":3,"sources":["components/ModeList.js","components/PlayerTile.js","components/BaseFunctions.js","components/TrioMode.js","components/BrawlerList.js","components/SoloDuoMode.js","components/Pagination.js","components/ApiHandler.js","components/Loading.js","components/PlayList.js","components/UserList.js","components/i18n.js","components/TopBar.js","components/Home.js","components/MapList.js","components/SortIcon.js","components/RecordResult.js","components/Map.js","components/Statistics.js","components/RegisterUser.js","components/DisplayTime.js","components/EventRotation.js","App.js","serviceWorker.js","index.js"],"names":["ModeList","state","value","change","event","changeMode","props","mode","target","setState","this","t","className","htmlFor","id","onChange","Component","withTranslation","PlayerTile","brawlerName","playerName","trophies","power","src","alt","width","isTrio","result","isSolo","isDuo","getLocalTime","time","year","substr","month","date","hours","minutes","seconds","Date","calDisplayTime","battleTime","localeBattleTime","diffTime","displayTime","diffHours","Math","floor","diffMinutes","addZero","num","parseInt","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","TrioMode","imgSrc","console","log","brawler_name","duration","map","trophyChange","type","groupRecords","record","index","teamId","key","brawlerNameList","BrawlerList","changeBrawler","bind","bnList","name","sort","a","b","label","unshift","SoloDuoMode","rankCss","rank","signTrophyChange","tag","forEach","e","resultRank","displayGroup","i","push","length","g","player","Page","link","pageNum","content","Pagination","curPage","prevProps","numTotal","numShowItems","pageUrl","onClick","maxPage","undefined","startPage","endPage","prevPage","nextPage","pageList","page","getData","paramUrl","url","axios","get","Loading","opacityList","startIdx","intervalId","setInterval","nextIdx","bars","bar","style","transform","left","sin","PI","top","cos","opacity","PlayList","playRecord","winRate","averageRank","isEmpty","totalElements","loading","changePageHandler","params","match","searchParams","URLSearchParams","location","search","queryPage","set","history","toString","goStatistics","replace","qs","parse","ignoreQueryPrefix","number","str","paramMode","paramBrawlerName","then","response","data","pageable","pageNumber","catch","error","unescape","getBattleLog","member","prevQuery","getQuery","query","isStarPalyer","isStarPlayer","Google","display","client","slot","format","responsive","tableStyle","margin","UserList","userList","numUser","nickname","searchInputChange","goRegisterPage","searchNickname","snapshot","rows","doc","getUserList","placeholder","user","showPlayList","i18n","use","initReactI18next","init","resources","en","translation","ko","ja","lng","TopBar","language","changelanguageToKo","changeLanguage","changelanguageToEn","changelanguageToJa","to","Home","MapList","maps","filteredMaps","clickMap","mapName","mapMode","paramMapName","setFilteredMap","filter","x","indexOf","SortIcon","order","icon","faSort","faSortDown","faSortUp","DEFAULT","ASC","DESC","RecordResult","recordArr","sumTotalGameNum","winRateOrder","avgRankOrder","pickRateOrder","toggleWinRate","nextWinRateOrder","togglePickRate","nextPickRateOrder","totalGameNum","toggleAvgRank","nextAvgRankOrder","isPersonal","ele","round","isAll","colSpan","victory","reduce","Map","trophyRange","isMapShown","changeTrophyRange","getRecordResult","records","cnt","victoryNum","defeatNum","defeat","drawNum","draw","showMapImg","faChevronUp","faChevronDown","includes","Statistics","RegisterUser","searchResult","changeInput","v","searchTag","found","playerInfo","placeHolder","highestTrophies","expLevel","DisplayTime","useTranslation","endTime","diffDays","EventRotation","useState","todayEvents","setTodayEvents","nextEvents","setNextEvents","update","setUpdate","useHistory","useEffect","eventInfo","events","now","todayEventsTemp","nextEventsTemp","startTime","isPlus","statistics","calWinRate","slice","onClickEvent","App","path","component","exact","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8b29aca6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withTranslation } from 'react-i18next';\nclass ModeList extends Component {\n\n  state = {\n    value: \"gemGrab\",\n  };\n  change = (event) => {\n    const { changeMode } = this.props;\n    let mode = event.target.value;\n    this.setState({ value: mode });\n    changeMode(mode);\n  }\n  componentDidMount() {\n    const { mode } = this.props;\n    this.setState({\n      value: mode,\n    });\n  }\n  render() {\n    const { t } = this.props;\n    return (\n      <div className=\"selectBox\">\n        <label htmlFor=\"modeList\">{t(\"mode\")} </label>\n        <select id=\"modeList\" onChange={this.change} value={this.state.value}>\n          <option value=\"ALL\">{t(\"All\")}</option>\n          <option value=\"gemGrab\">{t(\"gemGrab\")}</option>\n          <option value=\"heist\">{t(\"heist\")}</option>\n          <option value=\"brawlBall\">{t(\"brawlBall\")}</option>\n          <option value=\"bounty\">{t(\"bounty\")}</option>\n          <option value=\"siege\">{t(\"siege\")}</option>\n          <option value=\"hotZone\">{t(\"hotZone\")}</option>\n          <option value=\"knockout\">{t(\"knockout\")}</option>\n          <option value=\"volleyBrawl\">{t(\"volleyBrawl\")}</option>\n          <option value=\"basketBrawl\">{t(\"basketBrawl\")}</option>\n          <option value=\"holdTheTrophy\">{t(\"holdTheTrophy\")}</option>\n          <option value=\"soloShowdown\">{t(\"soloShowdown\")}</option>\n          <option value=\"duoShowdown\">{t(\"duoShowdown\")}</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default withTranslation()(ModeList);\n","import React, { Component } from \"react\";\nimport \"./PlayerTile.scss\";\n\nclass PlayerTile extends Component {\n    render() {\n        const {\n            brawlerName,\n            playerName,\n            trophies,\n            power,\n        } = this.props;\n        return <div className={`playerTile`}>\n            <div>\n                <div className=\"imgContainer\">\n                    <div className=\"trophies\">{trophies}</div>\n                    <img src={`/images/${brawlerName}.png`} alt={brawlerName} width=\"50px\" />\n                    <div className=\"powerContainer\">\n                        <div className=\"levelText\">Lv\n                        </div>\n                        <div className=\"power\">{power}\n                        </div>\n                    </div>\n                </div>\n                <div className={`playerName`}>\n                    {playerName}\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default PlayerTile;","function isTrio(mode) {\n    let result = false;\n    if (\n        mode === \"gemGrab\" ||\n        mode === \"heist\" ||\n        mode === \"siege\" ||\n        mode === \"bounty\" ||\n        mode === \"brawlBall\" ||\n        mode === \"hotZone\" ||\n        mode === \"knockout\" ||\n        mode === \"volleyBrawl\" ||\n        mode === \"basketBrawl\" ||\n        mode === \"holdTheTrophy\" ||\n        mode === \"trophyThieves\"\n    ) {\n        result = true;\n    }\n    return result;\n}\n\nfunction isSolo(mode) {\n    if (mode === \"soloShowdown\") {\n        return true;\n    }\n    return false;\n}\nfunction isDuo(mode) {\n    if (mode === \"duoShowdown\") {\n        return true;\n    }\n    return false;\n}\nfunction isAll(mode) {\n    if (mode === \"ALL\") {\n        return true;\n    }\n    return false;\n}\nfunction getLocalTime(time) {\n    let year = time.substr(0, 4);\n    let month = time.substr(4, 2);\n    let date = time.substr(6, 2);\n    let hours = time.substr(8, 3);\n    let minutes = time.substr(11, 2);\n    let seconds = time.substr(13);\n\n    return new Date(`${year}-${month}-${date}${hours}:${minutes}:${seconds}`);\n}\nfunction calDisplayTime(battleTime) {\n\n    let localeBattleTime = getLocalTime(battleTime);\n    let now = new Date();\n    let diffTime = (now - localeBattleTime) / 1000;\n    let displayTime = '';\n    // in one day\n    if (diffTime < 86400) {\n        let diffHours = Math.floor(diffTime / 3600);\n        let diffMinutes = Math.floor((diffTime / 60 - diffHours * 60));\n\n        if (diffHours >= 1) {\n            displayTime += `${diffHours} h `;\n        }\n        if (diffMinutes >= 1) {\n            displayTime += `${diffMinutes} m `;\n        }\n        displayTime += `ago`;\n    } else {\n        function addZero(num) {\n            if (parseInt(num) < 10) {\n                return `0` + num;\n            }\n            return num;\n        }\n        displayTime = `${localeBattleTime.getFullYear()}-${addZero(localeBattleTime.getMonth() + 1)}-${addZero(localeBattleTime.getDate())} ${addZero(localeBattleTime.getHours())}:${addZero(localeBattleTime.getMinutes())}:${addZero(localeBattleTime.getSeconds())}`;\n    }\n    return displayTime;\n}\n\nfunction calWinRate(data, mode) {\n    let records = {};\n    let recordArr = [];\n    let sumTotalGameNum = 0;\n    //console.log(`data : ${data}`);\n\n    data.forEach(e => {\n\n        if (isTrio(mode)) {\n            if (records[e.brawlerName] === undefined) {\n                records[e.brawlerName] = {\n                };\n            }\n            records[e.brawlerName] = {\n                ...records[e.brawlerName],\n                [e.result]: e.cnt,\n            }\n        } else {\n            records[e.brawlerName] = {\n                brawlerName: e.brawlerName,\n                averageRank: e.averageRank,\n                cnt: e.cnt,\n            }\n        }\n    });\n    if (isTrio(mode)) {\n        for (let key in records) {\n            let { victory, defeat, draw } = records[key];\n            const victoryNum = victory || 0;\n            const defeatNum = defeat || 0;\n            const drawNum = draw || 0;\n            const totalGameNum = victoryNum + defeatNum + drawNum;\n            recordArr.push({\n                \"brawlerName\": key,\n                \"victory\": victoryNum,\n                \"defeat\": defeatNum,\n                \"draw\": drawNum,\n                \"winRate\": (victoryNum) / totalGameNum,\n                \"totalGameNum\": totalGameNum\n            });\n            sumTotalGameNum += totalGameNum;\n        }\n\n        recordArr.sort((a, b) => {\n            return b.winRate - a.winRate;\n        })\n    } else {\n        for (let key in records) {\n            let { averageRank, cnt } = records[key];\n            recordArr.push({\n                \"brawlerName\": key,\n                \"averageRank\": averageRank,\n                \"totalGameNum\": cnt\n            });\n            sumTotalGameNum += cnt;\n        }\n        recordArr.sort((a, b) => {\n            return a.averageRank - b.averageRank;\n        })\n    }\n    return recordArr;\n}\n\nexport { isTrio, isSolo, isDuo, isAll, getLocalTime, calDisplayTime, calWinRate };","import React, { Component } from \"react\";\nimport \"./TrioMode.scss\";\nimport PlayerTile from \"./PlayerTile\";\nimport { calDisplayTime } from './BaseFunctions';\nimport { withTranslation } from 'react-i18next';\nclass TrioMode extends Component {\n  state = {\n    imgSrc: \"\",\n  };\n  componentDidMount() {\n    console.log(this.props);\n    const { brawler_name } = this.props;\n    this.setState({\n      imgSrc: `/images/${brawler_name}.png`,\n    });\n  }\n  render() {\n    const {\n      battleTime,\n      duration,\n      map,\n      trophyChange,\n      result,\n      type,\n      mode,\n      groupRecords,\n      t,\n    } = this.props;\n\n    return (\n      <div className=\"center\">\n        <div className={`trioContainer ${result}`}>\n          <div className={`typeInfo info ${result}`}>\n            <div className={`duration`}>\n              {duration} seconds\n            </div>\n            <div className={\"gameType\"}>\n              {t(type) || \"game\"}\n            </div>\n            <div className={`battleTime`}>{calDisplayTime(battleTime)}</div>\n          </div>\n          <div className={`gameInfo top ${result}`}>\n            <div className='modeInfo'>\n              <div className=\"modeImg\">\n                <img src={`/images/mode/${mode}.png`} alt={mode}></img>\n              </div>\n              <div className={`modeMap`}>\n                <div className={`mode`}>{t(mode)}\n                </div>\n                <div className={`map`}>\n                  {t(map)}\n                </div>\n              </div>\n            </div>\n            <div className={`gameResult`}>\n              {t(result)}\n            </div>\n            <div className={`trophyChange`}>\n              {trophyChange}\n            </div>\n          </div>\n          <div className={`playerInfo info ${result}`}>\n            <div className={`trioPlayerContainer`}>\n              {groupRecords.map((record, index) => {\n                if (record.teamId === 0)\n                  return <PlayerTile key={index}\n                    brawlerName={record.brawlerName}\n                    playerName={record.playerName}\n                    trophies={record.trophies}\n                    power={record.power}\n                  ></PlayerTile>\n                else {\n                  return <div></div>;\n                };\n              })}\n            </div>\n            <div className={`durationContainer`}>\n              <div>vs</div>\n            </div>\n            <div className={`trioPlayerContainer`}>\n              {groupRecords.map((record, index) => {\n                if (record.teamId === 1)\n                  return <PlayerTile key={index}\n                    brawlerName={record.brawlerName}\n                    playerName={record.playerName}\n                    trophies={record.trophies}\n                    power={record.power}\n                  ></PlayerTile>\n                else {\n                  return <div></div>\n                }\n              })}\n            </div>\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default withTranslation()(TrioMode);\n","import React, { Component } from \"react\";\nimport { withTranslation } from 'react-i18next';\n\n\nlet brawlerNameList = [\n  \"SHELLY\",\n  \"NITA\",\n  \"COLT\",\n  \"BULL\",\n  \"JESSIE\",\n  \"BROCK\",\n  \"DYNAMIKE\",\n  \"EL PRIMO\",\n  \"BARLEY\",\n  \"POCO\",\n  \"RICO\",\n  \"DARRYL\",\n  \"PIPER\",\n  \"PENNY\",\n  \"BO\",\n  \"MORTIS\",\n  \"TARA\",\n  \"PAM\",\n  \"FRANK\",\n  \"CROW\",\n  \"SPIKE\",\n  \"LEON\",\n  \"GENE\",\n  \"TICK\",\n  \"ROSA\",\n  \"8-BIT\",\n  \"CARL\",\n  \"BIBI\",\n  \"EMZ\",\n  \"BEA\",\n  \"SPROUT\",\n  \"SANDY\",\n  \"JACKY\",\n  \"MAX\",\n  \"MR. P\",\n  \"GALE\",\n  \"COLETTE\",\n  \"AMBER\",\n  \"BYRON\",\n  \"STU\",\n  \"COLONEL RUFFS\",\n  \"LOU\",\n  \"EDGAR\",\n  \"SURGE\",\n  \"SQUEAK\",\n];\n//brawlerNameList = brawlerNameList.sort();\n//brawlerNameList.unshift(\"ALL\");\n\nclass BrawlerList extends Component {\n  constructor(props) {\n    super(props);\n    this.change = this.change.bind(this);\n    //this.setState({ changeBrawler: this.props.changeBrawler });\n    //console.log(this.props.changeBrawler);\n  }\n  state = {\n    brawlerName: \"ALL\",\n    changeBrawler: \"\",\n  };\n  change(event) {\n    let value = event.target.value;\n    this.props.changeBrawler(value);\n    this.setState({ value: value });\n  }\n  componentDidMount() {\n    const { brawlerName } = this.props;\n    this.setState({\n      brawlerName: brawlerName\n    });\n  }\n  render() {\n    const { t } = this.props;\n\n    let bnList = brawlerNameList.map(name => {\n      return {\n        \"value\": name,\n        \"label\": t(name)\n      };\n    });\n\n    bnList.sort((a, b) => {\n      if (a.label < b.label) return -1\n      else return 1;\n    });\n\n    bnList.unshift({\n      \"value\": \"All\",\n      \"label\": \"All\"\n    });\n\n    return (\n      <div className=\"selectBox\">\n        <label htmlFor=\"brawlerName\">{t(\"brawler\")}</label>\n        <select\n          id=\"brawlerName\"\n          onChange={this.change}\n          value={this.state.brawlerName}\n        >\n          {bnList.map((brawlerName, index) => {\n            return (\n              <option key={brawlerName.value} label={brawlerName.label} value={brawlerName.value}>\n                {brawlerName.label}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default withTranslation()(BrawlerList);\n","import React, { Component } from \"react\";\nimport \"./SoloDuoMode.scss\";\nimport { calDisplayTime } from './BaseFunctions';\nimport PlayerTile from './PlayerTile';\nimport { withTranslation } from 'react-i18next';\n\nclass SoloDuoMode extends Component {\n  state = {\n    trophyChange: \"\",\n    rankCss: \"\",\n  };\n  componentDidMount() {\n    const { trophyChange, mode, rank } = this.props;\n    let signTrophyChange = null;\n    if (trophyChange > 0) {\n      signTrophyChange = \"+\" + trophyChange;\n    } else {\n      signTrophyChange = trophyChange;\n    }\n    if (mode === \"soloShowdown\") {\n      this.setState({\n        rankCss: Math.floor((rank + 1) / 2),\n      });\n    } else {\n      this.setState({\n        rankCss: rank,\n      });\n    }\n\n    this.setState({ trophyChange: signTrophyChange });\n  }\n  render() {\n    // const {\n    //   battleTime,\n    //   rank,\n    //   result,\n    //   brawler_name,\n    //   map,\n    //   power,\n    //   trophies,\n    //   trophyChange,\n    //   groupRecords,\n    // } = this.props;\n    const { groupRecords, tag, map, mode, type, t } = this.props;\n    let battleTime = \"\";\n    let rank = \"\";\n    groupRecords.forEach(e => {\n      if (e.tag === tag) {\n        battleTime = e.battleTime;\n        rank = e.resultRank;\n      }\n    })\n    let displayGroup = [];\n    for (let i = 0; i < 5; i++) {\n      displayGroup.push([]);\n    }\n    //rank 로 정렬\n    groupRecords.sort((a, b) => {\n      return a.resultRank - b.resultRank;\n    })\n    for (let i = 0; i < groupRecords.length; i++) {\n      const groupIdx = Math.floor(i / 2);\n      displayGroup[groupIdx].push(groupRecords[i]);\n    }\n\n    return (\n      <div className=\"center\">\n        <div className={`SoloDuoModeContainer rank${this.state.rankCss}`}>\n          <div className={`gameInfoContainer rank${this.state.rankCss}`}>\n            <div className=\"left\"></div>\n            <div className={`type`}>\n              {t(type)}\n            </div>\n            <div className=\"battleTime\">{calDisplayTime(battleTime)}</div>\n          </div>\n          <div className={`topContainer rank${this.state.rankCss}`}>\n            <div className=\"modeInfo\">\n              <div className=\"showdonwImgContainer\">\n                <img src={`/images/mode/${mode}.png`} alt={mode}></img>\n              </div>\n              <div className=\"modeMapContainer\">\n                <div className=\"mode\">{t(mode)}\n                </div>\n                <div className=\"map\">{t(map)}</div>\n              </div>\n            </div>\n            <div className={`rank rank${this.state.rankCss}Content`}>\n              Rank {rank}\n            </div>\n\n            <div className=\"trophyChange\">{this.state.trophyChange}</div>\n          </div>\n          <div className={`gameInfoContainer rank${this.state.rankCss}`}>\n            <div className={`playerContainer`}>\n              {displayGroup.map(g => {\n                return <div>\n                  {g.map(player => {\n                    return <PlayerTile brawlerName={player.brawlerName}\n                      playerName={player.playerName}\n                      trophies={player.trophies}\n                      power={player.power} />\n                  })}\n                </div>\n                //return <img width=\"50px\" height=\"50px\" src={`/images/${e.brawlerName}.png`} />\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withTranslation()(SoloDuoMode);\n","import React, { Component } from \"react\";\nimport \"./Pagination.scss\";\n\nclass Page {\n  constructor(link, pageNum, content, className) {\n    this.link = link;\n    this.pageNum = pageNum;\n    this.content = content;\n    this.className = className;\n  }\n}\nclass Pagination extends Component {\n  state = {\n    curPage: 1,\n  };\n  componentDidUpdate(prevProps) {\n    // if (this.props.curPage !== prevProps.curPage) {\n    //   //console.log(\"update!!!!\");\n    //   this.setState({\n    //     curPage: this.props.curPage,\n    //   });\n    // }\n  }\n  componentDidMount() {\n    this.setState({\n      curPage: this.props.curPage,\n    });\n  }\n  render() {\n    //   let { curPage } = this.props;\n    //   return (\n    //     <div>\n    //       {this.state.curPage}\n    //       {curPage}\n    //       <button onClick={() => this.props.onClick(this.state.curPage + 1)}>\n    //         next\n    //       </button>\n    //     </div>\n    //   );\n    // }\n    let { numTotal, numShowItems, pageUrl, onClick } = this.props;\n    //console.log(`pagination props ${this.state.curPage}`);\n    let curPage = this.state.curPage;\n    const numShowPages = 5;\n    let maxPage = Math.floor((numTotal - 1) / numShowItems) + 1;\n    //console.log(`maxPage ${maxPage}`);\n\n    if (curPage === undefined) curPage = 1;\n    if (numShowItems === undefined) numShowItems = 15;\n\n    //console.log(`curPage ${curPage}`);\n    if (curPage < 1) curPage = 1;\n    else if (curPage > maxPage) curPage = maxPage;\n\n    let startPage = Math.floor((curPage - 1) / numShowPages) * numShowPages + 1;\n    let endPage = startPage + numShowPages - 1;\n    if (startPage < 1) startPage = 1;\n    if (endPage > maxPage) endPage = maxPage;\n\n    let prevPage = startPage - 1;\n    if (prevPage < 1) prevPage = 1;\n    let nextPage = endPage + 1;\n    if (nextPage > maxPage) nextPage = curPage;\n    //console.log(`curPage ${curPage} startPage ${startPage} endPage ${endPage} `)\n    let pageList = [];\n    pageList.push(new Page(\"\", 0, \"<<\"));\n    pageList.push(new Page(\"\", prevPage, \"<\"));\n    for (let i = startPage; i <= endPage; i++) {\n      pageList.push(new Page(`${pageUrl}?curPage=${i}`, i, i, \"number\"));\n    }\n    pageList.push(new Page(\"\", nextPage, \">\"));\n    pageList.push(new Page(\"\", maxPage, \">>\", \"\"));\n\n    //console.log(\"chagnePageHandler\", this.props.onClick);\n    return (\n      <div className=\"center\">\n        <div className=\"btn-container\">\n          {pageList.map((page, index) => {\n            return (\n              <button\n                key={page.content}\n                className={\n                  \"btn-page \" + (curPage === page.pageNum && page.className === \"number\" ? \"activate \" : \"\")\n                }\n                onClick={() => onClick(page.pageNum)}\n              >\n                {page.content}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Pagination;\n","import axios from \"axios\";\n\nconst baseUrl = \"http://brawlstat.xyz\";\n//const baseUrl = \"http://localhost:8080\";\n\nlet getData = (paramUrl) => {\n    let url = baseUrl + paramUrl;\n\n    return axios.get(url);\n}\n\nexport { getData };","import React, { Component } from 'react'\nimport './Loading.scss';\n\nclass Loading extends Component {\n    state = {\n        opacityList: [],\n        startIdx: 0,\n        intervalId: 0,\n    }\n    componentDidMount() {\n        let opacityList = [];\n        for (let i = 0; i < 12; i++) {\n            opacityList.push((i + 1) / 12);\n        }\n        this.setState({\n            opacityList: opacityList,\n        });\n        const intervalId = setInterval(() => {\n            let nextIdx = this.state.startIdx - 1;\n            if (nextIdx < 0) nextIdx += 12;\n            this.setState({\n                startIdx: nextIdx,\n            });\n        }, 200);\n        this.setState({\n            intervalId: intervalId\n        });\n    }\n    render() {\n        let bars = [];\n        let angle = 360 / 12;\n\n        for (let i = 0; i < 12; i++) {\n            bars.push(angle * i);\n\n        }\n\n\n        return <div className=\"Loading\">\n            <div className=\"barsContainer\">\n                <div className=\"bars\">\n                    {bars.map((bar, index) => {\n                        return <div key={`Loading-${index}`} className=\"bar\" style={{\n                            transform: `rotate(${bar}deg)`,\n                            left: `${30 * Math.sin(bar / 360 * 2 * Math.PI)}px`,\n                            top: `${30 - 30 * Math.cos(bar / 360 * 2 * Math.PI)}px`,\n                            opacity: `${this.state.opacityList[(this.state.startIdx + index) % 12]}`,\n                        }}>\n                        </div>\n                    })\n                    }\n                </div>\n            </div>\n            <div>\n                Loading Data\n            </div>\n        </div>\n    }\n}\n\nexport default Loading;","import React, { Component } from \"react\";\nimport qs from \"qs\";\nimport ModeList from \"./ModeList\";\nimport TrioMode from \"./TrioMode\";\nimport BrawlerList from \"./BrawlerList\";\nimport \"./PlayList.scss\";\nimport \"./Base.scss\";\nimport SoloDuoMode from \"./SoloDuoMode\";\nimport Pagination from \"./Pagination\";\nimport { getData } from \"./ApiHandler\";\nimport { withTranslation } from 'react-i18next';\nimport { isTrio } from './BaseFunctions';\nimport AdSense from 'react-adsense';\nimport Loading from \"./Loading\";\n\n// const PlayList = ({location}) =>{\n//     const query = qs.parse(location.search,{\n//         ignoreQueryPrefix : true\n//     });\n//     const tag = query.tag || \"tag를 입력해주세요\";\nclass PlayList extends Component {\n  constructor(props) {\n    super(props);\n    this.changeMode = this.changeMode.bind(this);\n    this.changeBrawler = this.changeBrawler.bind(this);\n  }\n  state = {\n    playRecord: [],\n    winRate: 0,\n    averageRank: 0,\n    tag: '',\n    mode: \"ALL\",\n    brawlerName: \"ALL\",\n    isEmpty: false,\n    curPage: 1,\n    totalElements: 10,\n    loading: false,\n  };\n  getTag() {\n    const query = qs.parse(this.props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query.tag;\n  }\n  addZero(number) {\n    let str = number.toString();\n    if (str.length === 1) str = \"0\" + str;\n    return str;\n  }\n\n  changePageHandler = (page) => {\n    const params = this.props.match.params;\n    let searchParams = new URLSearchParams(this.props.location.search);\n    const tag = params.tag;\n    const queryPage = page - 1;\n    searchParams.set(\"page\", queryPage);\n    searchParams.set(\"size\", 5);\n    let { history } = this.props;\n    history.push(`/battleLog/${tag}?${searchParams.toString()}`);\n\n  }\n  getBattleLog(tag, mode, brawlerName, page) {\n    console.log(`getBattleLog tag ${tag} mode ${mode} bralerName ${brawlerName}`);\n    tag = tag.replace(\"#\", \"%23\");\n    const queryPage = page - 1;\n    let paramMode = mode;\n    if (mode === 'ALL' || mode === 'All' || mode === null || mode === undefined) {\n      paramMode = '';\n    }\n    let paramBrawlerName = brawlerName;\n    if (brawlerName === 'ALL' || brawlerName === 'All' || brawlerName === null || brawlerName === undefined) {\n      paramBrawlerName = '';\n    }\n    let searchParams = new URLSearchParams();\n    searchParams.set(\"mode\", paramMode);\n    searchParams.set(\"brawlerName\", paramBrawlerName);\n    searchParams.set(\"page\", queryPage);\n    searchParams.set(\"size\", 5);\n    console.log(`searchParams ${searchParams.toString()}`);\n    this.setState({\n      loading: true\n    })\n    getData(`/record/${tag}?${searchParams.toString()}`).then((response) => {      // .then : 응답(상태코드200~300미만)성공시\n      console.log(response);\n      const data = response.data;\n      this.setState({\n        playRecord: response.data.content,\n        curPage: data.pageable.pageNumber + 1,\n        totalElements: data.totalElements,\n        loading: false,\n      })\n    }).catch((error) => {\n      console.log(error);\n      this.setState({\n        loading: false\n      })\n    });\n  }\n  getBattleLogByUrl() {\n\n  }\n  componentDidMount() {\n    console.log(\"playList didmount\");\n    let searchParams = new URLSearchParams(this.props.location.search);\n    const params = this.props.match.params;\n\n    const tag = params.tag;\n    if (tag !== null) {\n      this.setState({\n        tag: unescape(tag)\n      });\n    }\n    const mode = searchParams.get(\"mode\");\n    if (mode !== null) {\n      this.setState({\n        mode: mode\n      })\n    }\n    const brawlerName = searchParams.get(\"brawlerName\");\n    if (brawlerName !== null) {\n      this.setState({\n        brawlerName: brawlerName\n      })\n    }\n    const page = parseInt(searchParams.get(\"page\"));\n    if (page !== null) {\n      this.setState({\n        page: page\n      })\n    }\n    //console.log(`compomentDidMount !!!!! ${brawlerName}`);\n    this.getBattleLog(tag, mode, brawlerName, page + 1);\n    getData(`/member/${tag.replace(\"#\", \"%23\")}`)\n      .then(response => {\n        const member = response.data;\n        this.setState({\n          name: member.name\n        });\n      })\n  }\n\n  componentDidUpdate(prevProps) {\n    //console.log(\"update\");\n    let prevQuery = this.getQuery(prevProps);\n    let query = this.getQuery(this.props);\n    const params = this.props.match.params;\n    console.log(\n      `prevQuery.curpage ${prevQuery.page}, query.curPage ${query.page}`\n    );\n\n    if (prevQuery.page !== query.page) {\n      console.log(`componentWill Update !!!! ${query.page}`);\n      this.getBattleLog(params.tag.replace(\"#\", \"%23\"), query.mode, query.brawlerName, parseInt(query.page) + 1);\n      //this.setState({curPage: query.curPage\n    }\n  }\n\n  changeMode(mode) {\n    //console.log('change Mode !!!');\n    //console.log(this.state.tag, mode, this.state.brawlerName);\n    this.setState({ mode: mode });\n    this.getBattleLog(this.state.tag, mode, this.state.brawlerName, 1);\n    const { history } = this.props;\n    let searchParams = new URLSearchParams(this.props.location.search);\n    searchParams.set(\"mode\", mode);\n    searchParams.set(\"page\", 0);\n    const params = this.props.match.params;\n    history.push(`/battleLog/${params.tag}?${searchParams}`);\n  }\n  changeBrawler(brawlerName) {\n    //console.log(\"change bralwer\", brawlerName);\n    this.setState({ brawlerName: brawlerName });\n    this.getBattleLog(this.state.tag, this.state.mode, brawlerName, 1);\n    const { history } = this.props;\n    let searchParams = new URLSearchParams(this.props.location.search);\n    searchParams.set(\"brawlerName\", brawlerName);\n    searchParams.set(\"page\", 0);\n    const params = this.props.match.params;\n    history.push(`/battleLog/${params.tag}?${searchParams.toString()}`);\n  }\n  getQuery(props) {\n    const query = qs.parse(props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query;\n  }\n\n  goStatistics = () => {\n    const { history } = this.props;\n    history.push(`/statistics?tag=${this.state.tag.replace(\"#\", \"%23\")}`)\n  }\n  render() {\n    const { t } = this.props;\n    return (\n      <div>\n        {this.state.loading ?\n          <Loading></Loading>\n          : \"\"}\n        <h2>{t('battleLogTitle')}</h2>\n        <button onClick={this.goStatistics} className=\"btn\">{t(\"Statistics\")}</button>\n        <ModeList key={`mode-${this.state.mode}`} changeMode={this.changeMode} mode={this.state.mode} />\n        <BrawlerList key={this.state.brawlerName} brawlerName={this.state.brawlerName} changeBrawler={this.changeBrawler} />\n        <h2>{this.state.name}({this.state.tag})</h2>\n\n        <div className={this.state.isEmpty ? \"noRecord\" : \"displayNone\"}>\n          No record\n        </div>\n        {\n          this.state.playRecord.map((data) => {\n            if (isTrio(data.mode)) {\n              return (\n                <TrioMode\n                  key={data.battleTime}\n                  battleTime={data.battleTime\n                  }\n                  rank={data.resultRank}\n                  result={data.result}\n                  brawler_name={data.brawlerName}\n                  duration={data.duration}\n                  isStarPalyer={data.isStarPlayer}\n                  map={data.map}\n                  power={data.power}\n                  trophies={data.trophies}\n                  trophyChange={data.trophyChange}\n                  type={data.type}\n                  mode={data.mode}\n                  groupRecords={data.groupRecords}\n                />\n              );\n            } else {\n              return (\n                <SoloDuoMode\n                  key={data.battleTime}\n                  battleTime={\n                    data.battleTime\n                  }\n                  rank={data.resultRank}\n                  result={data.result}\n                  brawler_name={data.brawlerName}\n                  duration={data.duration}\n                  isStarPalyer={data.isStarPlayer}\n                  map={data.map}\n                  power={data.power}\n                  trophies={data.trophies}\n                  trophyChange={data.trophyChange}\n                  mode={data.mode}\n                  groupRecords={data.groupRecords}\n                  tag={this.state.tag}\n                  type={data.type}\n                />\n              );\n            }\n          })}\n        <Pagination\n          key={this.state.curPage}\n          curPage={this.state.curPage}\n          numTotal={this.state.totalElements}\n          numShowItems=\"5\"\n          pageUrl=\"/playerList\"\n          onClick={this.changePageHandler.bind(this)}\n        ></Pagination>\n        <div style={{ 'marginBottom': \"10px\" }}>\n        </div>\n        <AdSense.Google\n          style={{ display: 'block' }}\n          client='ca-pub-4114406385852589'\n          slot='4607116156'\n          format='auto'\n          responsive='true'\n        />\n      </div >\n      // </div>\n    );\n  }\n}\n\nexport default withTranslation()(PlayList);\n","import React, { Component } from \"react\";\nimport Pagination from \"./Pagination\";\nimport qs from \"qs\";\nimport \"./UserList.scss\";\nimport \"./Base.scss\";\nimport { getData } from './ApiHandler';\nimport { withTranslation } from 'react-i18next';\nimport AdSense from 'react-adsense';\nimport Loading from \"./Loading\";\n\n\nconst tableStyle = {\n  margin: \"auto\",\n};\nclass UserList extends Component {\n  constructor(props) {\n    super(props);\n    this.searchNickname = this.searchNickname.bind(this);\n  }\n  state = {\n    userList: [],\n    curPage: 0,\n    numUser: 0,\n    pageUrl: \"userList\",\n    nickname: \"\",\n    loading: false,\n  };\n  getQuery(props) {\n    const query = qs.parse(props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query;\n  }\n  setUserList(snapshot, page) {\n    var rows = [];\n    snapshot.forEach((doc) => {\n      var data = doc.data();\n      data[\"tag\"] = doc.id;\n      console.log(data);\n      rows.push(data);\n    });\n\n    this.setState({ userList: rows, curPage: page });\n  }\n  getUserList(page) {\n    console.log(\"getUserList\");\n    const queryPage = page - 1;\n    this.setState({\n      loading: true,\n    })\n    getData(`/member?name=${this.state.nickname}&page=${queryPage}&size=15`)\n      .then((response) => {\n        this.setState({\n          loading: false,\n        });\n        console.log(response);\n        const data = response.data;\n        this.setState({\n          userList: data.content,\n          curPage: data.number + 1,\n          numUser: data.totalElements\n        })\n      }).catch(\n        (error) => {\n          console.log(error);\n        });\n  }\n\n  componentDidMount() {\n\n    let query = this.getQuery(this.props);\n    let curPage = query.curPage;\n    if (curPage === undefined) curPage = 1;\n    curPage = parseInt(curPage);\n\n    if (curPage === undefined) curPage = 1;\n    this.getUserList(curPage);\n  }\n  componentDidUpdate(prevProps) {\n    let prevQuery = this.getQuery(prevProps);\n    let query = this.getQuery(this.props);\n    if (prevQuery.curPage !== query.curPage) {\n      this.getUserList(query.curPage);\n    }\n  }\n  changePageHandler = (page) => {\n    let { history } = this.props;\n\n    this.setState({ curPage: page });\n    history.push(`/userList?curPage=${page}`);\n\n  }\n  showPlayList(tag) {\n    let { history } = this.props;\n    tag = tag.replace(\"#\", \"%23\");\n    history.push(`/battleLog/${tag}`);\n\n  }\n  searchNickname() {\n    //console.log(this.state.nickname);\n    getData(`/member?name=${this.state.nickname}&page=0&size=15`)\n      .then((response) => {\n\n        const data = response.data;\n        this.setState({\n          userList: data.content,\n          curPage: data.number + 1,\n          numUser: data.totalElements\n        })\n      }\n      );\n  }\n  searchInputChange = (event) => {\n    let value = event.target.value;\n    this.setState({\n      nickname: value,\n    });\n  }\n  goRegisterPage = () => {\n    let { history } = this.props;\n    history.push(`/user`);\n  }\n\n  render() {\n    const { t } = this.props;\n\n    return (\n      <div className=\"userList\">\n        {this.state.loading ?\n          <Loading></Loading>\n          : \"\"}\n        <h3>{t('userListGuide')}</h3>\n        {/* TODO : implement registration */}\n        <h3>{t('registerGuide')} <button onClick={this.goRegisterPage} className=\"btn btn-register\">{t('registration')}</button></h3>\n        <div className=\"inputContainer\">\n          <input\n            placeholder=\"search user nickname\"\n            onChange={this.searchInputChange}\n            value={this.state.nickname}\n          ></input>\n          <button onClick={this.searchNickname} className=\"btn btn-primary\">\n            search\n          </button>\n        </div>\n        <table style={tableStyle} className=\"table\">\n          <thead>\n            <tr>\n              <th>Index</th>\n              <th>Nickname(tag)</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.userList.map((user, index) => {\n              return (\n                <tr\n                  className=\"cursor\"\n                  key={user.tag}\n                  page={this.state.curPage}\n                  onClick={() => this.showPlayList(user.tag)}\n                >\n                  <td>{(this.state.curPage - 1) * 15 + index + 1}</td>\n                  <td>\n                    {user.name}({user.tag})\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <Pagination\n          key={`pagination-${this.state.curPage}`}\n          curPage={this.state.curPage}\n          numTotal={this.state.numUser}\n          numShowItems=\"15\"\n          pageUrl=\"/userList\"\n          onClick={this.changePageHandler}\n        />\n        <AdSense.Google\n          style={{ display: 'block' }}\n          client='ca-pub-4114406385852589'\n          slot='4607116156'\n          format='auto'\n          responsive='true'\n        />\n      </div>\n    );\n  }\n}\n\nexport default withTranslation()(UserList);\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nconst resources = {\n    en: {\n        translation: {\n            \"userListGuide\": \"Click user name to check battle log and statistics.\",\n            \"homeGuide\": `You can check your battle log and brawlers' statistic at maps on this web site.\n            \nClick on the Players on the top menu to search your nickname and check the history\n            \nCheck brawlers' win rate in Maps menu.\n\nGame records are synchronized every hour.\n\ncontact : cubeprince@gmail.com`,\n            \"mapsGuide\": \"Click a map image to check win rate and pick rate of brawlers.\",\n            \"battleLogTitle\": \"Battle Log\",\n            \"gemGrab\": \"Gem Grab\",\n            \"heist\": \"Heist\",\n            \"brawlBall\": \"Brawl Ball\",\n            \"bounty\": \"Bounty\",\n            \"siege\": \"Siege\",\n            \"hotZone\": \"Hot Zone\",\n            \"knockout\": \"Knockout\",\n            \"volleyBrawl\": \"Volley Brawl\",\n            \"basketBrawl\": \"Basket Brawl\",\n            \"holdTheTrophy\": \"Hold The Trophy\",\n            \"trophyThieves\": \"Trophy Thieves\",\n            \"soloShowdown\": \"Solo Showdown\",\n            \"duoShowdown\": \"Duo Showdown\",\n            \"superCityRampage\": \"Super City Rampage\",\n            \"brawler\": \"brawler\",\n            /* 승패 */\n            \"victory\": \"victory\",\n            \"defeat\": \"defeat\",\n            \"draw\": \"draw\",\n\n            \"soloRanked\": \"Power League\",\n            \"teamRanked\": \"Power League\",\n            \"registerGuide\": \"Register your tag for tracking\",\n            \"newEventMsg\": \"New Events in\",\n            \"endEventMsg\": \"Event Ends in\",\n\n            //시간표시\n            \"days\": \"d\",\n            \"hours\": \"h\",\n            \"minutes\": \"m\",\n\n        }\n    },\n    ko: {\n        translation: {\n            \"userListGuide\": \"유저 이름을 클릭하여 전투기록과 승률 통계를 확인해보세요\",\n            \"homeGuide\": `브롤스타즈 전적 검색 및 승률 확인이 가능한 사이트입니다.\n            \n상단의 Players를 클릭하여 자신의 닉네임을 검색하고 전적을 확인해보세요.\n            \nMapS에서는 맵별 브롤러 승률을 알 수 있습니다.\n            \n1시간 마다 전적이 동기화됩니다.\n            \ncontact : cubeprince@gmail.com`,\n            \"mapsGuide\": \"맵 이미지를 클릭하여 브롤러의 승률과 픽률을 확인해보세요.\",\n            \"battleLogTitle\": \"전투 기록\",\n            \"mode\": \"모드\",\n            \"gemGrab\": \"젬 그랩\",\n            \"heist\": \"하이스트\",\n            \"brawlBall\": \"브롤 볼\",\n            \"bounty\": \"바운티\",\n            \"siege\": \"시즈 팩토리\",\n            \"hotZone\": \"핫 존\",\n            \"soloShowdown\": \"솔로 쇼다운\",\n            \"duoShowdown\": \"듀오 쇼다운\",\n            \"knockout\": \"녹아웃\",\n            \"volleyBrawl\": \"발리 브롤\",\n            \"basketBrawl\": \"바스켓 브롤\",\n            \"holdTheTrophy\": \"트로피를 잡아라\",\n            \"trophyThieves\": \"트로피 도둑\",\n\n            /* 브롤러 이름 */\n            \"brawler\": \"브롤러\",\n            \"SHELLY\": \"쉘리\",\n            \"NITA\": \"니타\",\n            \"COLT\": \"콜트\",\n            \"BULL\": \"불\",\n            \"JESSIE\": \"제시\",\n            \"BROCK\": \"브록\",\n            \"DYNAMIKE\": \"다이너마이크\",\n            \"EL PRIMO\": \"엘 프리모\",\n            \"BARLEY\": \"발리\",\n            \"POCO\": \"포코\",\n            \"RICO\": \"리코\",\n            \"DARRYL\": \"대릴\",\n            \"PIPER\": \"파이퍼\",\n            \"PENNY\": \"페니\",\n            \"BO\": \"보\",\n            \"MORTIS\": \"모티스\",\n            \"TARA\": \"타라\",\n            \"PAM\": \"팸\",\n            \"FRANK\": \"프랭크\",\n            \"CROW\": \"크로우\",\n            \"SPIKE\": \"스파이크\",\n            \"LEON\": \"레온\",\n            \"GENE\": \"진\",\n            \"TICK\": \"틱\",\n            \"ROSA\": \"로사\",\n            \"8-BIT\": \"8비트\",\n            \"CARL\": \"칼\",\n            \"BIBI\": \"비비\",\n            \"EMZ\": \"엠즈\",\n            \"BEA\": \"비\",\n            \"SPROUT\": \"스프라우트\",\n            \"SANDY\": \"샌디\",\n            \"JACKY\": \"재키\",\n            \"MAX\": \"맥스\",\n            \"MR. P\": \"미스터 P\",\n            \"GALE\": \"게일\",\n            \"COLETTE\": \"콜레트\",\n            \"AMBER\": \"앰버\",\n            \"BYRON\": \"바이런\",\n            \"STU\": \"스튜\",\n            \"COLONEL RUFFS\": \"러프스 대령\",\n            \"LOU\": \"로우\",\n            \"EDGAR\": \"에드거\",\n            \"SURGE\": \"서지\",\n            \"NANI\": \"나니\",\n            \"BELLE\": \"벨\",\n            \"SQUEAK\": \"스퀴크\",\n            /* 승패 */\n            \"victory\": \"승리\",\n            \"defeat\": \"패배\",\n            \"draw\": \"무승부\",\n            /* 맵 이름 */\n            // gemGrab \n            \"Hard Rock Mine\": \"암석 광산\",\n            \"Crystal Arcade\": \"수정 오락실\",\n            \"Deathcap Trap\": \"독버섯 함정\",\n            \"Ice Fort\": \"얼음 요새\",\n            \"Undermine\": \"흔들 광산\",\n            \"Deep Diner\": \"지하굴 식당\",\n            \"Double Swoosh\": \"이중 곡선\",\n            \"Minecart Madness\": \"광기의 광산 열차\",\n            \"Snake Shop\": \"뱀의 가게\",\n            \"Corner Case\": \"코너 케이스\",\n            \"Flooded Dam\": \"침수된 댐\",\n            \"Rustic Arcade\": \"Rustic Arcade\",\n            \"Arène en folie\": \"Arène en folie\",\n            \"Red Herring\": \"Red Herring\",\n            // heist\n            \"Kaboom Canyon\": \"우당탕 협곡\",\n            \"Safe Zone\": \"안전지대\",\n            \"G.G. Mortuary\": \"GG 샵\",\n            \"Hot Potato\": \"뜨거운 감자\",\n            \"Turnaround\": \"역전\",\n            \"Gentral Traffic\": \"Gentral Traffic\",\n            \"Snaked Assault\": \"Snaked Assault\",\n            // bounty \n            \"Snake Prairie\": \"뱀의 초원\",\n            \"Shooting Star\": \"별내림 계곡\",\n            \"Canal Grande\": \"대운하\",\n            \"Dry Season\": \"햇빛은 쨍쨍\",\n            \"Land Ahoy\": \"육지 발견\",\n            \"Purple Paradise\": \"퍼플 파라다이스\",\n            \"Quick Skip\": \"퀵 스킵\",\n            \"Open Plaza\": \"Open Plaza\",\n            // brawlBall\n            \"Backyard Bowl\": \"뒷마당 월드컵\",\n            \"Triple Dribble\": \"트리플 드리블\",\n            \"Sneaky Fields\": \"스키니 필드\",\n            \"Super Stadium\": \"슈퍼 스타디움\",\n            \"Center Stage\": \"센터 스테이지\",\n            \"Sunny Soccer\": \"화창한 날\",\n            \"Field Goal\": \"필드 골\",\n            \"Bank Shot\": \"뱅크슛\",\n            \"superCityRampage\": \"슈퍼 시티 램피지\",\n            // \"Encirclement\" :\n            // \"Winter Party\" :\n            // \"Jumping Beans\" :\n            // \"Fast Fork\" :\n            // \"Clean Shot\" :\n            // \"Boxing Day\" :\n            //siege\n            \"Bot Drop\": \"로봇시대\",\n            \"Some Assembly Required\": \"조립의 조건\",\n            \"Nuts & Bolts\": \"볼트의 정석\",\n            \"Robo Highway\": \"로보 하이웨이\",\n            \"Factory Rush\": \"로봇 공장\",\n            \"Olive Branch\": \"올리브 나뭇가지\",\n            //\"Bot Riot\": \n            // hotZone\n            \"Massive Attack\": \"대공격\",\n            \"Parallel Plays\": \"평행선\",\n            \"Split\": \"틈\",\n            \"Ring of Fire\": \"불의 고리\",\n            \"Dueling Beetles\": \"곤충 싸움\",\n            // \"Triumvirate\": \n            //     \"Magnetic Field\" :\n            \"SUPER CITY\": \"슈퍼 시티\",\n\n            \"Statistics\": \"통계\",\n            \"Win Rate\": \"승률\",\n            \"Pick Rate\": \"픽률\",\n            \"Avg Rank\": \"평균 랭크\",\n\n            \"friendly\": \"친선전\",\n            \"ranked\": \"경쟁전\",\n\n            \"soloRanked\": \"파워 리그\",\n            \"teamRanked\": \"파워 리그\",\n\n            \"registration\": \"등록하기\",\n            \"registerGuide\": \"전투기록을 트래킹하기 위해 태그를 등록하세요\",\n            \"newEventMsg\": \"신규 이벤트까지\",\n            \"endEventMsg\": \"이벤트 종료까지\",\n            //시간 표시\n            \"days\": \"일\",\n            \"hours\": \"시간\",\n            \"minutes\": \"분\",\n        }\n    },\n    ja: {\n        translation: {\n            \"userListGuide\": \"ユーザー名をクリックしてバトル履歴と勝率通計を確認してください。\",\n            \"homeGuide\": `ブロールスターズのバトル履歴と勝率通計が確認できるウェブサイトです。\n            \nPlayersをクリックして、自分のニックネームを検索して、バトル履歴を確認してください。\n            \nMapsではマップごとのキャラクターの勝率を確認できます。\n\nバトル履歴は1時間ごとに同期されます。\n\ncontact : cubeprince@gmail.com`,\n            \"mapsGuide\": \"マップのイメージをクリックしてキャラクターの勝率と選択率を確認してください。\",\n            \"battleLogTitle\": \"バトル履歴\",\n            \"mode\": \"モード\",\n            \"gemGrab\": \"エメラルドハント\",\n            \"heist\": \"強奪\",\n            \"brawlBall\": \"ブロストライカー\",\n            \"bounty\": \"賞金稼ぎ\",\n            \"siege\": \"制圧\",\n            \"hotZone\": \"ホットゾーン\",\n            \"soloShowdown\": \"ソロ バトルロイヤル\",\n            \"duoShowdown\": \"デュオ バトルロイヤル\",\n            \"knockout\": \"ノックアウト\",\n            \"volleyBrawl\": \"ブロスタバレー\",\n            \"basketBrawl\": \"プロスタバスケ\",\n            \"holdTheTrophy\": \"トロフィー争奪戦\",\n            \"trophyThieves\": \"トロフィー泥棒\",\n            /* 브롤러 이름 */\n            \"brawler\": \"キャラクター\",\n            \"SHELLY\": \"ジェリー\",\n            \"NITA\": \"ニタ\",\n            \"COLT\": \"コルト\",\n            \"BULL\": \"ブル\",\n            \"JESSIE\": \"ジェシー\",\n            \"BROCK\": \"プロック\",\n            \"DYNAMIKE\": \"ダイナマイク\",\n            \"EL PRIMO\": \"エル　プリモ\",\n            \"BARLEY\": \"バーリー\",\n            \"POCO\": \"ポコ\",\n            \"RICO\": \"リコ\",\n            \"DARRYL\": \"ダリル\",\n            \"PIPER\": \"エリザベス\",\n            \"PENNY\": \"ペニー\",\n            \"BO\": \"ボウ\",\n            \"MORTIS\": \"モーティス\",\n            \"TARA\": \"タラ\",\n            \"PAM\": \"パム\",\n            \"FRANK\": \"フランケン\",\n            \"CROW\": \"クロウ\",\n            \"SPIKE\": \"スパイク\",\n            \"LEON\": \"レオン\",\n            \"GENE\": \"ジーン\",\n            \"TICK\": \"ティック\",\n            \"ROSA\": \"ローサ\",\n            \"8-BIT\": \"8ビット\",\n            \"CARL\": \"カール\",\n            \"BIBI\": \"ビビ\",\n            \"EMZ\": \"Emz\",\n            \"BEA\": \"ビー\",\n            \"SPROUT\": \"スプラウト\",\n            \"SANDY\": \"サンディ\",\n            \"JACKY\": \"ジャッキー\",\n            \"MAX\": \"Max\",\n            \"MR. P\": \"ミスターP\",\n            \"GALE\": \"ゲイル\",\n            \"COLETTE\": \"コレット\",\n            \"AMBER\": \"アンバー\",\n            \"BYRON\": \"バイロン\",\n            \"STU\": \"ストゥー\",\n            \"COLONEL RUFFS\": \"ラフス大佐\",\n            \"LOU\": \"ルー\",\n            \"EDGAR\": \"エドガー\",\n            \"SURGE\": \"サージ\",\n            \"NANI\": \"ナーニ\",\n            \"BELLE\": \"ベル\",\n            \"SQUEAK\": \"スクウィーク\",\n            /* 승패 */\n            \"victory\": \"勝利\",\n            \"defeat\": \"敗北\",\n            \"draw\": \"引き分け\",\n            /* 맵 이름 */\n            // gemGrab \n            \"Hard Rock Mine\": \"ごつごつ坑道\",\n            \"Crystal Arcade\": \"クリスタルアーケード\",\n            \"Deathcap Trap\": \"サボテンの罠\",\n            \"Ice Fort\": \"氷の要塞\",\n            \"Undermine\": \"アンダーマイン\",\n            \"Deep Diner\": \"ディープダイナ―\",\n            \"Double Swoosh\": \"ダブルレール\",\n            \"Minecart Madness\": \"トロッコの狂気\",\n            \"Snake Shop\": \"スネークショップ\",\n            \"Corner Case\": \"コーナーケース\",\n            \"Flooded Dam\": \"決壊したダム\",\n            \"Rustic Arcade\": \"Rustic Arcade\",\n            \"Arène en folie\": \"Arène en folie\",\n            \"Red Herring\": \"Red Herring\",\n            // heist\n            \"Kaboom Canyon\": \"どんぱち谷\",\n            \"Safe Zone\": \"安全地帯\",\n            \"G.G. Mortuary\": \"G.G.遺体安置所\",\n            \"Hot Potato\": \"ホットポテト\",\n            \"Turnaround\": \"ターンアラウンド\",\n            \"Gentral Traffic\": \"Gentral Traffic\",\n            \"Snaked Assault\": \"Snaked Assault\",\n            // bounty \n            \"Snake Prairie\": \"ジグザグ草原\",\n            \"Shooting Star\": \"流れ星\",\n            \"Canal Grande\": \"グランドカナル\",\n            \"Dry Season\": \"乾燥地帯\",\n            \"Land Ahoy\": \"上陸準備\",\n            \"Purple Paradise\": \"紫の楽園\",\n            \"Quick Skip\": \"クイックスキップ\",\n            \"Open Plaza\": \"Open Plaza\",\n            // brawlBall\n            \"Backyard Bowl\": \"鉄壁の護り\",\n            \"Triple Dribble\": \"トリプル　ドリブル\",\n            \"Sneaky Fields\": \"静かな広場\",\n            \"Super Stadium\": \"スーパースタジアム\",\n            \"Center Stage\": \"中央コート\",\n            \"Sunny Soccer\": \"サニーサッカー\",\n            \"Field Goal\": \"フィールドゴール\",\n            \"Bank Shot\": \"バンク　ショット\",\n            \"superCityRampage\": \"スーパーシティ乱闘\",\n            // \"Encirclement\" :\n            // \"Winter Party\" :\n            // \"Jumping Beans\" :\n            // \"Fast Fork\" :\n            // \"Clean Shot\" :\n            // \"Boxing Day\" :\n            //siege\n            \"Bot Drop\": \"ボットドロップ\",\n            \"Some Assembly Required\": \"受注生産品\",\n            \"Nuts & Bolts\": \"重要ポイント\",\n            \"Robo Highway\": \"ロボットハイウェイ\",\n            \"Factory Rush\": \"工場大乱闘\",\n            \"Olive Branch\": \"オリーブの枝\",\n            //\"Bot Riot\": \n            // hotZone\n            \"Massive Attack\": \"大打撃\",\n            \"Parallel Plays\": \"パラレルワールド\",\n            \"Split\": \"スプリット\",\n            \"Ring of Fire\": \"炎のリング\",\n            \"Dueling Beetles\": \"ビートルバトル\",\n            // \"Triumvirate\": \n            //     \"Magnetic Field\" :\n            //super city rampage\n            \"SUPER CITY\": \"スーパーシティ\",\n\n            \"Statistics\": \"通計\",\n            \"Win Rate\": \"勝率\",\n            \"Pick Rate\": \"選択率\",\n            \"Avg Rank\": \"平均ランク\",\n\n            //type\n            \"friendly\": \"フレンドバトル\",\n            \"ranked\": \"ガチバトル\",\n\n            \"soloRanked\": \"パワーリーグ\",\n            \"teamRanked\": \"パワーリーグ\",\n\n            \"registration\": \"登録する\",\n            \"registerGuide\": \"バトル履歴をトラッキングするため、タグを登録してください\",\n            \"newEventMsg\": \"新イベントまで\",\n            \"endEventMsg\": \"イベント終了まで\",\n\n            //시간표시\n            \"days\": \"日\",\n            \"hours\": \"時間\",\n            \"minutes\": \"分\",\n        }\n    }\n};\ni18n\n    .use(initReactI18next)\n    .init({\n        resources,\n        lng: \"en\",\n    });\nexport default i18n;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./TopBar.scss\";\nimport i18n from \"./i18n\";\n\n\nclass TopBar extends Component {\n  state = {\n    language: 'en',\n  }\n  changelanguageToKo = () => {\n    i18n.changeLanguage('ko');\n    this.setState({\n      language: 'ko',\n    })\n  }\n  changelanguageToEn = () => {\n    i18n.changeLanguage('en');\n    this.setState({\n      language: 'en',\n    })\n  }\n  changelanguageToJa = () => {\n    i18n.changeLanguage('ja');\n    this.setState({\n      language: 'ja',\n    })\n  }\n  render() {\n    return (\n      <div className=\"topBar\">\n        <div className=\"menuContainer\">\n          <div className=\"item\">\n            <Link to=\"/\">Home</Link>\n          </div>\n          <div className=\"item\">\n            <Link to=\"/info\">Info</Link>\n          </div>\n          <div className=\"item\">\n            <Link to=\"/userList\">Players</Link>\n          </div>\n          <div className=\"item\">\n            <Link to=\"/mapList\">Maps</Link>\n          </div>\n          <div className=\"languageContainer\">\n            <div className={`language ${this.state.language === 'en' ? 'selected' : ''}`} onClick={this.changelanguageToEn}>en</div>\n            <div className={`language ${this.state.language === 'ko' ? 'selected' : ''}`} onClick={this.changelanguageToKo}>ko</div>\n            <div className={`language ${this.state.language === 'ja' ? 'selected' : ''}`} onClick={this.changelanguageToJa}>ja</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TopBar;\n","import React, { Component } from \"react\";\nimport \"./Home.scss\";\nimport { withTranslation } from 'react-i18next';\nimport AdSense from 'react-adsense';\n\nclass Home extends Component {\n  render() {\n    const { t } = this.props;\n    return (\n      <div\n        style={{\n          \"marginTop\": \"30px\",\n        }}\n        className=\"home\"\n      >\n        <div className=\"contentContainer\">\n          <div className=\"content\">\n            {t('homeGuide')}\n          </div>\n        </div>\n        <AdSense.Google\n          style={{ display: 'block' }}\n          client='ca-pub-4114406385852589'\n          slot='4607116156'\n          format='auto'\n          responsive='true'\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default withTranslation()(Home);\n","import React, { Component } from 'react';\nimport \"./MapList.scss\";\nimport ModeList from './ModeList';\nimport qs from 'qs';\nimport { getData } from './ApiHandler';\nimport { withTranslation } from 'react-i18next';\nimport AdSense from 'react-adsense';\nimport Loading from './Loading';\n\nclass MapList extends Component {\n    state = {\n        mode: 'gemGrab',\n        maps: [],\n        filteredMaps: [],\n        loading: false,\n    }\n    clickMap = (mapName, mapMode) => {\n        console.log(this);\n        let paramMapName = mapName.replace(\"&\", \"%26\");\n        let { history } = this.props;\n        history.push(`/map/${paramMapName}/mode/${mapMode}`);\n    }\n    setFilteredMap = (mode) => {\n        let filteredMaps = this.state.maps;\n        if (mode !== 'ALL' && mode !== undefined) {\n            filteredMaps = this.state.maps.filter(x => {\n                return x.mode === mode;\n            });\n        }\n        this.setState({\n            filteredMaps: filteredMaps,\n        });\n    }\n    changeMode = (mode) => {\n        console.log(`changeMode ${mode}`);\n        console.log(this);\n\n        this.setFilteredMap(mode);\n\n        let { history } = this.props;\n        history.push(`/mapList?mode=${mode}`);\n    }\n    componentDidMount() {\n        const query = qs.parse(this.props.location.search, {\n            ignoreQueryPrefix: true,\n        });\n        console.log(`query mode ${query.mode}`);\n\n        //this.setFilteredMap(query.mode);\n        this.setState({\n            loading: true,\n        })\n        getData(`/gameMap`).then(response => {\n            console.log(response);\n            const data = response.data;\n            let mode = 'gemGrab';\n            if (query.mode !== undefined) {\n                mode = query.mode;\n            }\n            this.setState({\n                maps: data,\n                mode: mode,\n                loading: false,\n            })\n            this.setFilteredMap(mode);\n            //this.changeMode(query.mode);\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n    render() {\n        const { t } = this.props;\n        return <><div className=\"mapList\">\n            {this.state.loading ?\n                <Loading></Loading>\n                : \"\"}\n            <h3>\n                {t('mapsGuide')}\n            </h3>\n            <div>\n                <ModeList key={this.state.mode} changeMode={this.changeMode} mode={this.state.mode}></ModeList>\n            </div>\n            <div className=\"gemGrabContainer\">{\n                this.state.filteredMaps.map((map, index) => {\n                    return <div key={index} className=\"gemGrabItem\" >{t(map.name)}\n                        <img onClick={() => { this.clickMap(map.name, map.mode) }} src={`./images/maps/${map.mode.indexOf(\"Showdown\") !== -1 ? \"showdown\" : map.mode}/${map.name}.png`} alt={map.name}></img>\n                    </div>\n                })}\n            </div>\n        </div>\n            <AdSense.Google\n                style={{ display: 'block' }}\n                client='ca-pub-4114406385852589'\n                slot='4607116156'\n                format='auto'\n                responsive='true'\n            />\n        </>\n    }\n}\n\nexport default withTranslation()(MapList);","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSortUp, faSortDown, faSort } from '@fortawesome/free-solid-svg-icons'\n\nconst DEFAULT = \"DEFAULT\";\nconst DESC = \"DESC\";\n\nclass SortIcon extends Component {\n    render() {\n        const { order } = this.props;\n        return <div>\n            {order === DEFAULT ?\n                <FontAwesomeIcon icon={faSort} />\n                : order === DESC ?\n                    <FontAwesomeIcon icon={faSortDown} />\n                    : <FontAwesomeIcon icon={faSortUp} />\n            }\n        </div>\n    }\n\n}\n\nexport default SortIcon;","import React, { Component } from 'react'\nimport { isTrio, isDuo, isSolo, isAll } from './BaseFunctions';\nimport SortIcon from './SortIcon';\nimport \"./RecordResult.scss\";\nimport { withTranslation } from 'react-i18next';\n\nconst DEFAULT = \"DEFAULT\";\nconst ASC = \"ASC\";\nconst DESC = \"DESC\";\n\nclass RecordResult extends Component {\n    state = {\n        recordArr: [],\n        sumTotalGameNum: 0,\n        winRateOrder: 'DESC',\n        avgRankOrder: ASC,\n        pickRateOrder: 'DEFAULT',\n    }\n    componentDidMount() {\n        const { recordArr, sumTotalGameNum } = this.props;\n        this.setState({\n            recordArr: recordArr,\n            sumTotalGameNum: sumTotalGameNum,\n        })\n    }\n    toggleWinRate = () => {\n\n        let recordArr = [];\n        let nextWinRateOrder = 'DEFAULT';\n        if (this.state.winRateOrder === DESC) {\n            nextWinRateOrder = ASC;\n            recordArr = this.state.recordArr.sort((a, b) => {\n                return a.winRate - b.winRate;\n            });\n\n        } else {\n            nextWinRateOrder = DESC;\n            recordArr = this.state.recordArr.sort((a, b) => {\n                return b.winRate - a.winRate;\n            });\n        }\n        this.setState({\n            recordArr: recordArr,\n            winRateOrder: nextWinRateOrder,\n            pickRateOrder: DEFAULT,\n            avgRankOrder: DEFAULT,\n        })\n    }\n    togglePickRate = () => {\n\n        let recordArr = [];\n        let nextPickRateOrder = DEFAULT;\n        if (this.state.pickRateOrder === DESC) {\n            nextPickRateOrder = ASC;\n            recordArr = this.state.recordArr.sort((a, b) => {\n                return a.totalGameNum - b.totalGameNum;\n            });\n        } else {\n            nextPickRateOrder = DESC;\n            recordArr = this.state.recordArr.sort((a, b) => {\n                return b.totalGameNum - a.totalGameNum;\n            });\n        }\n        this.setState({\n            recordArr: recordArr,\n            winRateOrder: DEFAULT,\n            pickRateOrder: nextPickRateOrder,\n            avgRankOrder: DEFAULT,\n        })\n    }\n    toggleAvgRank = () => {\n        let recordArr = [];\n        let nextAvgRankOrder = DEFAULT;\n        if (this.state.avgRankOrder === DESC || this.state.avgRankOrder === DEFAULT) {\n            nextAvgRankOrder = ASC;\n            recordArr = this.state.recordArr.sort((a, b) => {\n                return a.averageRank - b.averageRank;\n            });\n\n        } else {\n            nextAvgRankOrder = DESC;\n            recordArr = this.state.recordArr.sort((a, b) => {\n                return b.averageRank - a.averageRank;\n            });\n        }\n        this.setState({\n            recordArr: recordArr,\n            winRateOrder: DEFAULT,\n            pickRateOrder: DEFAULT,\n            avgRankOrder: nextAvgRankOrder,\n        })\n    }\n    render() {\n        const { t, mode, isPersonal } = this.props;\n\n        return <div className=\"recordResult\">\n            <div className=\"infoContainer\">\n                <table className=\"table info\">\n                    <thead>\n                        <tr>\n                            <th>No</th>\n                            <th>Name</th>\n                            {isTrio(mode) ?\n                                <th onClick={this.toggleWinRate} className=\"rateHeader\"><span className=\"rateHeaderContent\">{t(\"Win Rate\")}</span>\n                                    <SortIcon order={this.state.winRateOrder} key={`winRate-${this.state.winRateOrder}`} />\n                                </th>\n                                :\n                                isDuo(mode) || isSolo(mode) ?\n                                    <th onClick={this.toggleAvgRank} className=\"rateHeader\"><span className=\"rateHeaderContent\">{t(\"Avg Rank\")}</span><SortIcon order={this.state.avgRankOrder} key={`avgRank-${this.state.avgRankOrder}`} /> </th>\n                                    : <th># of Games</th>\n                            }\n                            <th onClick={this.togglePickRate} className=\"rateHeader\"><span className=\"rateHeaderContent\">{t(\"Pick Rate\")}</span><SortIcon order={this.state.pickRateOrder} key={`pickRate-${this.state.pickRateOrder}`} /></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.recordArr.map((ele, index) => {\n                            return (\n                                <tr key={ele.brawlerName}>\n                                    <td>{index + 1}</td>\n                                    <td>\n                                        {/* <div className=\"info\" key={index}> */}\n                                        <div className=\"brawler\">\n                                            <img src={`/images/${ele.brawlerName}.png`} alt={ele.brawlerName}></img>\n                                            <div className=\"brawlerName\">\n                                                {t(ele.brawlerName)}\n                                            </div>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        {(isDuo(mode) || isSolo(mode)) ?\n                                            <div className=\"averageRank\">\n                                                {Math.round(ele.averageRank * 100) / 100}\n                                            </div>\n                                            : isTrio(mode) ?\n\n                                                <div className=\"winRate\">\n                                                    {Math.round(ele.winRate * 1000) / 10}%\n\n                                                </div>\n                                                : <div className=\"numberOfGames\">\n                                                    {ele.totalGameNum}\n                                                </div>\n                                        }\n                                    </td>\n\n                                    <td>\n                                        <div className=\"totalGame\">\n                                            {Math.round(ele.totalGameNum / this.state.sumTotalGameNum * 10000) / 100}%\n                                        </div>\n                                    </td>\n                                    {/* </div> */}\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n\n                    {isPersonal ?\n                        <tfoot>\n                            {isAll(mode) ?\n                                <tr>\n                                    <td colSpan=\"2\">Total # of Games</td>\n                                    <td colSpan=\"2\">{this.state.sumTotalGameNum} games</td>\n                                </tr>\n                                : isTrio(mode) ?\n                                    <tr>\n                                        <td colSpan=\"2\">Avg Win Rate</td>\n                                        <td>{Math.round(this.state.recordArr.map(e => e.victory).reduce((a, b) => a + b, 0) / this.state.sumTotalGameNum * 1000) / 10}%</td>\n                                        <td>{this.state.sumTotalGameNum} games</td>\n                                    </tr>\n                                    : (isSolo(mode) || isDuo(mode)) ?\n                                        <tr>\n                                            <td colSpan=\"2\">Avg Rank</td>\n                                            <td>{Math.round(this.state.recordArr.map(e => e.averageRank * e.totalGameNum).reduce((a, b) => a + b, 0) / this.state.sumTotalGameNum * 10) / 10}</td>\n                                            <td>{this.state.sumTotalGameNum} games</td>\n                                        </tr>\n                                        : \"\"\n\n                            }\n                        </tfoot>\n                        : <tfoot>\n                            <tr>\n                                <td colSpan=\"2\">Total # of Games</td>\n                                <td colSpan=\"2\">{this.state.sumTotalGameNum} games</td>\n                            </tr>\n                        </tfoot>\n                    }\n                </table>\n            </div>\n        </div>\n    }\n}\nexport default withTranslation()(RecordResult);","import React, { Component } from 'react';\nimport qs from 'qs';\nimport \"./Map.scss\";\nimport { getData } from './ApiHandler';\nimport RecordResult from './RecordResult';\nimport { isTrio } from './BaseFunctions';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons'\nimport { withTranslation } from 'react-i18next';\nimport AdSense from 'react-adsense';\nimport Loading from './Loading';\n\nclass Map extends Component {\n    state = {\n        mapName: \"\",\n        mode: \"\",\n        recordArr: [],\n        sumTotalGameNum: 0,\n        trophyRange: '',\n        isMapShown: false,\n        loading: false,\n    }\n    isSolo(mode) {\n        if (mode === \"soloShowdown\") {\n            return true;\n        }\n        return false;\n    }\n    isDuo(mode) {\n        if (mode === \"duoShowdown\") {\n            return true;\n        }\n        return false;\n    }\n    changeTrophyRange = (e) => {\n        //console.log(e.target.value);\n        this.setState({\n            trophyRange: e.target.value,\n        });\n        const { history } = this.props;\n        let searchParams = new URLSearchParams(this.props.location.search);\n        searchParams.set(\"trophyRange\", e.target.value);\n        this.getRecordResult(unescape(searchParams.get(\"mapName\")), searchParams.get(\"mode\"), searchParams.get(\"trophyRange\"));\n        history.push(`/map?${searchParams.toString()}`);\n\n    }\n\n    getRecordResult = (mapName, mode, trophyRange) => {\n        let records = {};\n        let recordArr = [];\n        let searchParams = new URLSearchParams();\n        searchParams.set(\"mode\", mode);\n        searchParams.set(\"trophyRange\", trophyRange);\n        searchParams.set(\"map\", mapName);\n\n        this.setState({\n            loading: true,\n        })\n        getData(`/record/result?${searchParams}`)\n            .then(response => {\n                console.log(response);\n                const data = response.data;\n                //console.log(data);\n                this.setState({\n                    loading: false,\n                })\n                data.forEach(e => {\n                    // brawlerName: \"COLETTE\"\n                    // cnt: 14\n                    // result: \"defeat\"\n                    // __proto__: Object\n                    if (isTrio(mode)) {\n                        if (records[e.brawlerName] === undefined) {\n                            records[e.brawlerName] = {\n                            };\n                        }\n                        records[e.brawlerName] = {\n                            ...records[e.brawlerName],\n                            [e.result]: e.cnt,\n                        }\n                    } else {\n                        records[e.brawlerName] = {\n                            brawlerName: e.brawlerName,\n                            averageRank: e.averageRank,\n                            cnt: e.cnt,\n                        }\n                    }\n                });\n                console.log(records);\n                let sumTotalGameNum = 0;\n                if (isTrio(mode)) {\n                    for (let key in records) {\n                        let { victory, defeat, draw } = records[key];\n                        const victoryNum = victory || 0;\n                        const defeatNum = defeat || 0;\n                        const drawNum = draw || 0;\n                        const totalGameNum = victoryNum + defeatNum + drawNum;\n                        recordArr.push({\n                            \"brawlerName\": key,\n                            \"victory\": victoryNum,\n                            \"defeat\": defeatNum,\n                            \"draw\": drawNum,\n                            \"winRate\": (victoryNum) / totalGameNum,\n                            \"totalGameNum\": totalGameNum\n                        });\n                        sumTotalGameNum += totalGameNum;\n                    }\n\n                    recordArr.sort((a, b) => {\n                        return b.winRate - a.winRate;\n                    })\n                } else {\n                    for (let key in records) {\n                        let { averageRank, cnt } = records[key];\n                        recordArr.push({\n                            \"brawlerName\": key,\n                            \"averageRank\": averageRank,\n                            \"totalGameNum\": cnt\n                        });\n                        sumTotalGameNum += cnt;\n                    }\n                    recordArr.sort((a, b) => {\n                        return a.averageRank - b.averageRank;\n                    })\n                }\n\n                console.log(recordArr);\n                this.setState({\n                    recordArr: recordArr,\n                    sumTotalGameNum: sumTotalGameNum\n                })\n            }).catch(error => {\n                console.log(error);\n            });\n    }\n    showMapImg = () => {\n        this.setState({\n            isMapShown: !this.state.isMapShown,\n        });\n    }\n    componentDidMount() {\n        const query = qs.parse(this.props.location.search, {\n            ignoreQueryPrefix: true,\n        });\n        const params = this.props.match.params\n        const mapName = unescape(params.map);\n        const mode = params.mode;\n        const trophyRange = query.trophyRange || this.state.trophyRange;\n        console.log(mapName);\n        this.setState({\n            trophyRange: trophyRange,\n            mapName: mapName,\n            mode: mode,\n        });\n        this.getRecordResult(mapName, mode, trophyRange);\n    }\n    render() {\n        const { t } = this.props;\n\n        return <><div className=\"mapClass\">\n            {this.state.loading ?\n                <Loading></Loading> :\n                \"\"\n            }\n            <h3>{t(\"Statistics\")}</h3>\n            <div className={`mapNameContainer`} onClick={this.showMapImg}>\n                <span className=\"mapName\">{t(this.state.mapName)}</span>\n                {this.state.isMapShown ?\n                    <FontAwesomeIcon icon={faChevronUp} />\n                    : <FontAwesomeIcon icon={faChevronDown} />\n                }\n            </div>\n            <div className={`mapImgContainer \n            ${this.state.mode.includes(\"Showdown\") ? 'showdown' : ''}\n            ${this.state.isMapShown ? '' : 'none'}`}>\n                <img className=\"mapImg\" src={`/images/maps/${this.state.mode.includes(\"Showdown\") ? 'showdown' : this.state.mode}/${this.state.mapName}.png`} alt={this.state.mapName} />\n            </div>\n            {/* <div className=\"trophySelect\">\n                <label htmlFor=\"trophyRange\">Trophies</label>\n                <select id=\"trophyRange\" value={this.state.trophyRange} onChange={this.changeTrophyRange}>\n                    <option value=\"ALL\" label=\"ALL\"></option>\n                    <option value=\"highRank\" label=\"500~\"></option>\n                    <option value=\"lowRank\" label=\"0~500\"></option>\n                </select>\n            </div> */}\n            {this.state.mapName === \"\" ? (<div>invalid map name</div>) :\n                <RecordResult key={this.state.recordArr} recordArr={this.state.recordArr} sumTotalGameNum={this.state.sumTotalGameNum} mode={this.state.mode} />\n            }\n        </div>\n            <AdSense.Google\n                style={{ display: 'block' }}\n                client='ca-pub-4114406385852589'\n                slot='4607116156'\n                format='auto'\n                responsive='true'\n            />\n        </>\n    }\n}\n\nexport default withTranslation()(Map);","import React, { Component } from \"react\";\nimport { getData } from \"./ApiHandler\";\nimport ModeList from './ModeList';\nimport { isTrio } from './BaseFunctions';\nimport RecordResult from \"./RecordResult\";\nimport \"./Statistics.scss\";\nimport AdSense from 'react-adsense';\nimport Loading from \"./Loading\";\n\nclass Statistics extends Component {\n    state = {\n        tag: '',\n        mode: 'gemGrab',\n        recordArr: [],\n        sumTotalGameNum: 0,\n        loading: false,\n    }\n    getRecordResult(searchParams) {\n        let records = {};\n        let recordArr = [];\n        const mode = searchParams.get(\"mode\");\n        this.setState({\n            loading: true,\n        })\n        getData(`/record/result?${searchParams}`)\n            .then(response => {\n                this.setState({\n                    loading: false,\n                });\n                console.log(response);\n                const data = response.data;\n                console.log(data);\n                data.forEach(e => {\n                    // brawlerName: \"COLETTE\"\n                    // cnt: 14\n                    // result: \"defeat\"\n                    // __proto__: Object\n                    if (isTrio(mode)) {\n                        if (records[e.brawlerName] === undefined) {\n                            records[e.brawlerName] = {\n                            };\n                        }\n                        records[e.brawlerName] = {\n                            ...records[e.brawlerName],\n                            [e.result]: e.cnt,\n                        }\n                    } else {\n                        records[e.brawlerName] = {\n                            brawlerName: e.brawlerName,\n                            averageRank: e.averageRank,\n                            cnt: e.cnt,\n                        }\n                    }\n                });\n                console.log(records);\n                let sumTotalGameNum = 0;\n                if (mode === 'ALL') {\n                    for (let key in records) {\n                        const { brawlerName, cnt } = records[key];\n                        recordArr.push({\n                            \"brawlerName\": brawlerName,\n                            \"totalGameNum\": cnt,\n                        });\n                        sumTotalGameNum += cnt;\n                    }\n                    recordArr.sort((a, b) => {\n                        return b.totalGameNum - a.totalGameNum;\n                    });\n\n                }\n                else if (isTrio(mode)) {\n                    for (let key in records) {\n                        let { victory, defeat, draw } = records[key];\n                        const victoryNum = victory || 0;\n                        const defeatNum = defeat || 0;\n                        const drawNum = draw || 0;\n                        const totalGameNum = victoryNum + defeatNum + drawNum;\n                        recordArr.push({\n                            \"brawlerName\": key,\n                            \"victory\": victoryNum,\n                            \"defeat\": defeatNum,\n                            \"draw\": drawNum,\n                            \"winRate\": (victoryNum) / totalGameNum,\n                            \"totalGameNum\": totalGameNum\n                        });\n                        sumTotalGameNum += totalGameNum;\n                    }\n\n                    recordArr.sort((a, b) => {\n                        return b.winRate - a.winRate;\n                    })\n                } else {\n                    for (let key in records) {\n                        let { averageRank, cnt } = records[key];\n                        recordArr.push({\n                            \"brawlerName\": key,\n                            \"averageRank\": averageRank,\n                            \"totalGameNum\": cnt\n                        });\n                        sumTotalGameNum += cnt;\n                    }\n                    recordArr.sort((a, b) => {\n                        return a.averageRank - b.averageRank;\n                    })\n                }\n                console.log(recordArr);\n                this.setState({\n                    recordArr: recordArr,\n                    sumTotalGameNum: sumTotalGameNum\n                })\n            }).catch(error => {\n                console.log(error);\n            });\n    }\n    componentDidMount() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n        let tag = searchParams.get(\"tag\");\n        const mode = searchParams.get(\"mode\") || this.state.mode;\n        searchParams.set(\"mode\", mode);\n        //console.log(`tag : ${tag}`);\n\n        this.setState({\n            tag: tag,\n        });\n\n        this.getRecordResult(searchParams);\n    }\n    changeMode = (mode) => {\n        console.log(`changeMode`);\n        this.setState({\n            mode: mode,\n        });\n        let searchParams = new URLSearchParams(this.props.location.search);\n        searchParams.set(\"mode\", mode);\n        this.getRecordResult(searchParams);\n    }\n\n    render() {\n\n        return <div>\n            {this.state.loading ?\n                <Loading></Loading>\n                : \"\"}\n            <div className=\"statistics\">\n                <div className=\"modeListContainer\">\n                    <ModeList key={this.state.mode} mode={this.state.mode} changeMode={this.changeMode} />\n                </div>\n                <RecordResult key={this.state.recordArr} recordArr={this.state.recordArr} sumTotalGameNum={this.state.sumTotalGameNum} mode={this.state.mode}\n                    isPersonal={true} />\n            </div>\n            <AdSense.Google\n                style={{ display: 'block' }}\n                client='ca-pub-4114406385852589'\n                slot='4607116156'\n                format='auto'\n                responsive='true'\n            />\n        </div>\n    }\n}\n\nexport default Statistics;","import React, { Component } from 'react';\nimport { getData } from './ApiHandler';\nimport Loading from './Loading';\nimport { withTranslation } from 'react-i18next';\nimport './RegisterUser.scss';\n\nclass RegisterUser extends Component {\n    state = {\n        tag: \"\",\n        searchResult: null,\n        loading: false,\n    }\n    changeInput = (e) => {\n        console.log(e.target.value);\n        let value = e.target.value;\n        let tag = \"\";\n        for (const v of value) {\n            if ((v >= 'a' && v <= 'z')\n                || (v >= 'A' && v <= 'Z')\n                || (v >= '0' && v <= '9')) {\n                tag += v;\n            }\n\n        }\n        this.setState({\n            tag: tag,\n        });\n    }\n    searchTag = () => {\n        console.log(this.state.tag);\n        console.log(`/member/api/%23${this.state.tag}`);\n        this.setState({ loading: true });\n        getData(`/member/api/%23${this.state.tag}`)\n            .then((response) => {\n                console.log(response);\n                const searchResult = response.data;\n                this.setState({\n                    searchResult: searchResult,\n\n                });\n                if (searchResult.found) {\n\n                }\n                this.setState({ loading: false });\n            });\n    }\n    render() {\n        const { t } = this.props;\n        const playerInfo = this.state.searchResult?.playerInfo;\n        return <div className=\"registerUser\">\n            {this.state.loading ?\n                <Loading></Loading>\n                : \"\"}\n            <h3>\n                Search your tag\n            </h3>\n            <span>#</span>\n            <input placeHolder=\"enter your tag\" value={this.state.tag}\n                onChange={this.changeInput}\n            ></input>\n            <button className=\"btn\" onClick={this.searchTag}>search</button>\n            <div>\n\n\n            </div>\n            {this.state.searchResult?.found === false ? <div> not found </div>\n                : <div>\n                </div>\n            }\n            {this.state.searchResult?.found ?\n                <div className=\"rowContainer\">\n                    <div className=\"row\">\n                        <div className=\"component\">\n                            <div>{t('highestTrophies')}</div>\n                            <div className='content'>{playerInfo.highestTrophies}</div>\n                        </div>\n                        <div className=\"component\">\n                            <div>{t('trophies')}</div>\n                            <div className='content'>{playerInfo.trophies}</div>\n                        </div>\n                        <div className=\"component\">\n                            <div>{t('expLevel')}</div>\n                            <div className='content'>{playerInfo.expLevel}</div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"component\">\n                            <div>{t('3vs3Victories')}</div>\n                            <div className='icon'>\n                                <img className=\"iconImg\" src=\"/images/mode/3vs3.png\" alt=\"3vs3\"></img>\n                            </div>\n                            <div className='content'>{playerInfo['3vs3Victories']}</div>\n\n                        </div>\n                        <div className=\"component\">\n                            <div>{t('soloVictories')}</div>\n\n                            <div className='icon'>\n                                <img className=\"iconImg\" src=\"/images/mode/soloShowdown.png\" alt=\"soloShowdown\"></img>\n                            </div>\n\n                            <div className='content'>{playerInfo['soloVictories']}</div>\n                        </div>\n                        <div className=\"component\">\n                            <div>{t('duoVictories')}</div>\n                            <div className='icon'>\n                                <img className=\"iconImg\" src=\"/images/mode/duoShowdown.png\" alt=\"duoShowdown\"></img>\n                            </div>\n                            <div className='content'>{playerInfo['duoVictories']}</div>\n                        </div>\n                    </div>\n                    <div>registration user tag will be updated</div>\n                    {/* <button>register</button> */}\n                </div>\n\n                : <div></div>}\n        </div>\n    }\n}\n\n\nexport default withTranslation()(RegisterUser);","import React from 'react';\nimport { getLocalTime } from \"./BaseFunctions\";\nimport { useTranslation } from \"react-i18next\";\n\nconst DisplayTime = (props) => {\n    const { t } = useTranslation();\n    let endTime = getLocalTime(props.endTime);\n    let now = new Date();\n    let diffTime = (endTime - now) / 1000;\n    let displayTime = '';\n    // in one day\n    let diffDays = Math.floor(diffTime / 86400);\n    let diffHours = Math.floor(diffTime / 3600) % 24;\n    let diffMinutes = Math.floor((diffTime / 60)) % 60;\n    if (diffDays >= 1) {\n        displayTime += `${diffDays}${t('days')} `;\n    }\n    if (diffHours >= 1) {\n        displayTime += `${diffHours}${t('hours')} `;\n    }\n    if (diffMinutes >= 1) {\n        displayTime += `${diffMinutes}${t('minutes')} `;\n    }\n\n    return <div>\n        {displayTime}\n    </div>\n}\nexport default DisplayTime;","import React, { useEffect, useState } from 'react';\nimport { getData } from \"./ApiHandler\";\nimport { calWinRate, getLocalTime, isTrio } from './BaseFunctions';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory } from \"react-router\";\nimport \"./EventRotation.scss\";\nimport DisplayTime from './DisplayTime';\n\nconst EventRotation = () => {\n    //const [events, setEvents] = useState([]);\n\n    const [todayEvents, setTodayEvents] = useState([]);\n    const [nextEvents, setNextEvents] = useState([]);\n    const [update, setUpdate] = useState(0);\n    const { t } = useTranslation();\n    const history = useHistory();\n\n    //update components every minutes\n    setInterval(() => {\n        setUpdate(update + 1);\n    }, 60000);\n\n    useEffect(() => {\n        const eventInfo = getData(\"/api/events/rotation\").then(response => {\n            //console.log(response.data);\n            const events = response.data;\n            let now = new Date();\n            let todayEventsTemp = [];\n            let nextEventsTemp = [];\n\n            //console.log(showdownEvents);\n\n            events\n                .filter(e => e.event.mode !== 'duoShowdown')\n                .forEach(e => {\n                    const startTime = getLocalTime(e.startTime);\n                    const endTime = getLocalTime(e.endTime);\n                    if ((startTime < now) && (now <= endTime)) {\n                        todayEventsTemp.push(e);\n                    } else {\n                        nextEventsTemp.push(e);\n                    }\n                    //console.log(`${startTime} - ${now} -${endTime}`);\n                    if (e.event.mode === 'soloShowdown' && e.startTime.substr(9, 2) ===\n                        \"08\") {\n                        e.event.isPlus = true;\n                    }\n                    if (e.statistics !== null) {\n                        e.winRate = calWinRate(e.statistics, e.event.mode).slice(0, 5);\n                    }\n                });\n            setTodayEvents(todayEventsTemp);\n            setNextEvents(nextEventsTemp);\n            return response.data;\n        })\n        console.log(eventInfo);\n    }, []);\n\n    const onClickEvent = (map, mode) => {\n        history.push(`/map/${map}/mode/${mode}`);\n    }\n\n    return (\n        <div className=\"eventRotation\">\n            <div className=\"title\">\n                Today's Events\n            </div>\n            <div className=\"eventContainer\">\n                {todayEvents.map((ele, index) => {\n                    return <div key={`TodayMaps-${index}`} className=\"event\">\n                        <div className=\"topBar\">\n                            <div>{t('newEventMsg')}</div>\n                            <div>:&nbsp;</div>\n                            <DisplayTime endTime={ele.endTime}></DisplayTime>\n                        </div>\n                        <div className={`${ele.event.mode} info ${ele.event.isPlus ? 'plus' : ''}`}\n                            onClick={() => onClickEvent(ele.event.map, ele.event.mode)}>\n                            <div className=\"eventInfoContainer\">\n                                <div className=\"modeImg\">\n                                    <img src={`images/mode/${ele.event.mode}.png`} alt={ele.event.mode}></img>\n                                </div>\n                                <div className=\"eventInfo\">\n                                    <div>{t(ele.event.mode)}</div>\n                                    <div>{t(ele.event.map)}</div>\n                                </div>\n                            </div>\n                            <div className=\"winRateInfo\">\n                                {ele.winRate?.map(e => {\n                                    return <div>\n                                        <img className=\"brawlerImg\" src={`/images/${e.brawlerName}.png`} alt={e.brawlerName} />\n                                        {isTrio(ele.event.mode) ?\n                                            <div>{Math.floor(e.winRate * 100)}%</div>\n                                            : <div>{Math.floor(e.averageRank * 100) / 100}</div>\n                                        }\n\n                                    </div>\n\n                                })}\n                            </div>\n                        </div>\n                    </div>\n                })}\n            </div>\n            <div className=\"title\">Next Events</div>\n            <div className=\"eventContainer\">\n                {nextEvents.map((ele, index) => {\n                    return <div key={`nextEvents-${index}`} className=\"event\">\n                        <div className=\"topBar\">\n                            <div>{t('newEventMsg')}</div>\n                            <div>:&nbsp;</div>\n                            <DisplayTime endTime={ele.endTime}></DisplayTime>\n                        </div>\n                        <div className={`${ele.event.mode} info ${ele.event.isPlus ? 'plus' : ''}`}\n                            onClick={() => onClickEvent(ele.event.map, ele.event.mode)}>\n                            <div className=\"eventInfoContainer\">\n                                <div className=\"modeImg\">\n                                    <img src={`images/mode/${ele.event.mode}.png`} alt={ele.event.mode}></img>\n                                </div>\n                                <div className=\"eventInfo\">\n                                    <div>{t(ele.event.mode)}</div>\n                                    <div>{t(ele.event.map)}</div>\n                                </div>\n                            </div>\n                            <div className=\"winRateInfo\">\n                                {ele.winRate?.map(e => {\n                                    return <div>\n                                        <img className=\"brawlerImg\" src={`/images/${e.brawlerName}.png`} alt={e.brawlerName} />\n                                        {isTrio(ele.event.mode) ?\n                                            <div>{Math.floor(e.winRate * 100)}%</div>\n                                            : <div>{Math.floor(e.averageRank * 100) / 100}</div>\n                                        }\n\n                                    </div>\n\n                                })}\n                            </div>\n                        </div>\n                    </div>\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default EventRotation;","import React from \"react\";\nimport \"./App.css\";\nimport PlayList from \"./components/PlayList\";\nimport UserList from \"./components/UserList\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport TopBar from \"./components/TopBar\";\nimport Home from \"./components/Home\";\nimport MapList from \"./components/MapList\";\nimport Map from \"./components/Map\";\nimport Statistics from \"./components/Statistics\";\nimport RegisterUser from \"./components/RegisterUser\";\nimport EventRotation from \"./components/EventRotation\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <TopBar />\n        <Route path=\"/\" component={EventRotation} exact={true} />\n        <Route path=\"/info\" component={Home} exact={true} />\n        <Route path=\"/battleLog/:tag\" component={PlayList} exact={true} />\n        <Route path=\"/userList\" component={UserList} />\n        <Route path=\"/mapList\" component={MapList} />\n        <Route path=\"/map/:map/mode/:mode\" component={Map} />\n        <Route path=\"/statistics\" component={Statistics} />\n        <Route path=\"/user\" component={RegisterUser} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './components/i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}