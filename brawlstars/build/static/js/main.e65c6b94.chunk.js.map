{"version":3,"sources":["components/ModeList.js","components/Firestore.js","components/PlayerTile.js","components/BaseFunctions.js","components/TrioMode.js","components/BrawlerList.js","components/SoloDuoMode.js","components/Pagination.js","components/ApiHandler.js","components/PlayList.js","components/UserList.js","components/TopBar.js","components/Home.js","components/MapList.js","components/RecordResult.js","components/Map.js","components/Statistics.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ModeList","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","props","state","value","change","bind","event","changeMode","this","mode","target","setState","console","log","className","htmlFor","id","onChange","Component","PlayerTile","brawlerName","playerName","trophies","power","class","src","width","isTrio","result","isSolo","isDuo","calDisplayTime","battleTime","year","substr","month","date","hours","minutes","seconds","localeBattleTime","Date","diffTime","displayTime","diffHours","Math","floor","diffMinutes","addZero","num","parseInt","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","TrioMode","imgSrc","brawler_name","duration","map","isStarPalyer","trophyChange","type","groupRecords","record","index","teamId","key","brawlerNameList","sort","unshift","BrawlerList","changeBrawler","label","SoloDuoMode","rankCss","rank","signTrophyChange","tag","forEach","e","resultRank","Page","link","pageNum","content","Pagination","curPage","prevProps","numTotal","numShowItems","pageUrl","onClick","maxPage","undefined","startPage","endPage","prevPage","nextPage","pageList","push","i","page","getData","paramUrl","url","axios","get","PlayList","playRecord","winRate","averageRank","isEmpty","totalElements","changePageHandler","searchParams","URLSearchParams","location","search","getBattleLog","queryPage","set","history","toString","goStatistics","replace","qs","parse","ignoreQueryPrefix","number","str","length","paramMode","paramBrawlerName","then","response","data","pageable","pageNumber","catch","error","member","name","prevQuery","getQuery","query","isStarPlayer","style","tableStyle","margin","UserList","userList","numUser","nickname","searchNickname","searchInputChange","snapshot","rows","doc","getUserList","placeholder","user","showPlayList","TopBar","to","languageList","Home","language","changeLanguage","lang","MapList","maps","filteredMaps","clickMap","mapName","mapMode","paramMapName","setFilteredMap","filter","x","indexOf","RecordResult","recordArr","sumTotalGameNum","isPersonal","icon","faSortDown","faSort","ele","round","totalGameNum","isAll","colSpan","victory","reduce","a","b","Map","trophyRange","changeTrophyRange","getRecordResult","records","cnt","victoryNum","defeatNum","defeat","drawNum","draw","Statistics","App","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.e65c6b94.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ModeList extends Component {\n  constructor(props) {\n    super(props);\n    this.change = this.change.bind(this);\n  }\n  state = {\n    value: \"gemGrab\",\n  };\n  change(event) {\n    const { changeMode } = this.props;\n    let mode = event.target.value;\n    this.setState({ value: mode });\n    changeMode(mode);\n  }\n  componentDidMount() {\n    const { mode } = this.props;\n    console.log(`modeList : ${mode}`);\n    this.setState({\n      value: mode,\n    });\n  }\n  render() {\n    return (\n      <div className=\"selectBox\">\n        <label htmlFor=\"modeList\">mode </label>\n        <select id=\"modeList\" onChange={this.change} value={this.state.value}>\n          <option value=\"ALL\">ALL</option>\n          <option value=\"gemGrab\">Gem Grab</option>\n          <option value=\"heist\">Heist</option>\n          <option value=\"brawlBall\">Brawl Ball</option>\n          <option value=\"bounty\">Bounty</option>\n          <option value=\"siege\">Siege</option>\n          <option value=\"hotZone\">Hot Zone</option>\n          <option value=\"soloShowdown\">Solo Showdown</option>\n          <option value=\"duoShowdown\">Duo Showdown</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default ModeList;\n","import firebase, { firestore } from 'firebase'\nimport 'firebase/firestore'\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAvw6GqjvdJ30u8lhJPDpx_Asz6fw9QwaA\",\n    authDomain: \"brawlstars-260814.firebaseapp.com\",\n    databaseURL: \"https://brawlstars-260814.firebaseio.com\",\n    projectId: \"brawlstars-260814\",\n    storageBucket: \"brawlstars-260814.appspot.com\",\n    messagingSenderId: \"184744257860\",\n    appId: \"1:184744257860:web:7760bdf65e67cbeb9f8f11\",\n    measurementId: \"G-36T0YR0TBC\"\n};\n\nconst firestoreApp = firebase.initializeApp(firebaseConfig);\n\nexport default firestoreApp.firestore();","import React, { Component } from \"react\";\nimport playerTileStyles from \"./PlayerTile.scss\";\n\nclass PlayerTile extends Component {\n    constructor() {\n        super();\n    }\n    render() {\n        const {\n            brawlerName,\n            playerName,\n            trophies,\n            power,\n        } = this.props;\n        return <div className={`playerTile`}>\n            <div>\n                <div>{trophies}</div>\n                <div class=\"imgContainer\">\n                    <img src={`images/${brawlerName}.png`} width=\"50px\" />\n                    <div className=\"powerContainer\">\n                        <div className=\"levelText\">Lv\n                        </div>\n                        <div className=\"power\">{power}\n                        </div>\n                    </div>\n                </div>\n                <div className={`playerName`}>\n                    {playerName}\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default PlayerTile;","function isTrio(mode) {\n    let result = false;\n    if (\n        mode === \"gemGrab\" ||\n        mode === \"heist\" ||\n        mode === \"siege\" ||\n        mode === \"bounty\" ||\n        mode === \"brawlBall\" ||\n        mode === \"hotZone\"\n    ) {\n        result = true;\n    }\n    return result;\n}\n\nfunction isSolo(mode) {\n    if (mode === \"soloShowdown\") {\n        return true;\n    }\n    return false;\n}\nfunction isDuo(mode) {\n    if (mode === \"duoShowdown\") {\n        return true;\n    }\n    return false;\n}\nfunction isAll(mode) {\n    if (mode === \"ALL\") {\n        return true;\n    }\n    return false;\n}\n\nfunction calDisplayTime(battleTime) {\n    let year = battleTime.substr(0, 4);\n    let month = battleTime.substr(4, 2);\n    let date = battleTime.substr(6, 2);\n    let hours = battleTime.substr(8, 3);\n    let minutes = battleTime.substr(11, 2);\n    let seconds = battleTime.substr(13);\n\n    let localeBattleTime = new Date(`${year}-${month}-${date}${hours}:${minutes}:${seconds}`);\n    let now = new Date();\n    let diffTime = (now - localeBattleTime) / 1000;\n    let displayTime = '';\n    // in one day\n    if (diffTime < 86400) {\n        let diffHours = Math.floor(diffTime / 3600);\n        let diffMinutes = Math.floor((diffTime / 60 - diffHours * 60));\n\n        if (diffHours >= 1) {\n            displayTime += `${diffHours} h `;\n        }\n        if (diffMinutes >= 1) {\n            displayTime += `${diffMinutes} m `;\n        }\n        displayTime += `ago`;\n    } else {\n        function addZero(num) {\n            if (parseInt(num) < 10) {\n                return `0` + num;\n            }\n            return num;\n        }\n        displayTime = `${localeBattleTime.getFullYear()}-${addZero(localeBattleTime.getMonth() + 1)}-${addZero(localeBattleTime.getDate())} ${addZero(localeBattleTime.getHours())}:${addZero(localeBattleTime.getMinutes())}:${addZero(localeBattleTime.getSeconds())}`;\n    }\n    return displayTime;\n}\n\nexport { isTrio, isSolo, isDuo, isAll, calDisplayTime };","import React, { Component } from \"react\";\nimport styles from \"./TrioMode.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport PlayerTile from \"./PlayerTile\";\nimport { calDisplayTime } from './BaseFunctions';\nclass TrioMode extends Component {\n  state = {\n    imgSrc: \"\",\n  };\n  componentDidMount() {\n    console.log(this.props);\n    const { brawler_name } = this.props;\n    this.setState({\n      imgSrc: `images/${brawler_name}.png`,\n    });\n  }\n  render() {\n    const {\n      battleTime,\n      brawler_name,\n      duration,\n      isStarPalyer,\n      map,\n      power,\n      trophies,\n      trophyChange,\n      result,\n      type,\n      mode,\n      groupRecords,\n    } = this.props;\n\n    return (\n      <div className=\"center\">\n        <div className={`trioContainer ${result}`}>\n          <div className={`typeInfo info ${result}`}>\n            <div className={`duration`}>\n              {duration} seconds\n            </div>\n            <div className={\"gameType\"}>\n              {type || \"game\"}\n            </div>\n            <div className={`battleTime`}>{calDisplayTime(battleTime)}</div>\n          </div>\n          <div className={`gameInfo top ${result}`}>\n            <div className='modeInfo'>\n              <div className=\"modeImg\">\n                <img src={`/images/mode/${mode}.png`}></img>\n              </div>\n              <div className={`modeMap`}>\n                <div className={`mode`}>{mode}\n                </div>\n                <div className={`map`}>\n                  {map}\n                </div>\n              </div>\n            </div>\n            <div className={`gameResult`}>\n              {result}\n            </div>\n            <div className={`trophyChange`}>\n              {trophyChange}\n            </div>\n          </div>\n          <div className={`playerInfo info ${result}`}>\n            <div className={`trioPlayerContainer`}>\n              {groupRecords.map((record, index) => {\n                if (record.teamId === 0)\n                  return <PlayerTile key={index}\n                    brawlerName={record.brawlerName}\n                    playerName={record.playerName}\n                    trophies={record.trophies}\n                    power={record.power}\n                  ></PlayerTile>;\n              })}\n            </div>\n            <div className={`durationContainer`}>\n              <div>vs</div>\n            </div>\n            <div className={`trioPlayerContainer`}>\n              {groupRecords.map((record, index) => {\n                if (record.teamId === 1)\n                  return <PlayerTile key={index}\n                    brawlerName={record.brawlerName}\n                    playerName={record.playerName}\n                    trophies={record.trophies}\n                    power={record.power}\n                  ></PlayerTile>\n              })}\n            </div>\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default TrioMode;\n","import React, { Component } from \"react\";\n\nlet brawlerNameList = [\n  \"SHELLY\",\n  \"NITA\",\n  \"COLT\",\n  \"BULL\",\n  \"JESSIE\",\n  \"BROCK\",\n  \"DYNAMIKE\",\n  \"EL PRIMO\",\n  \"BARLEY\",\n  \"POCO\",\n  \"RICO\",\n  \"DARRYL\",\n  \"PIPER\",\n  \"PENNY\",\n  \"BO\",\n  \"MORTIS\",\n  \"TARA\",\n  \"PAM\",\n  \"FRANK\",\n  \"CROW\",\n  \"SPIKE\",\n  \"LEON\",\n  \"GENE\",\n  \"TICK\",\n  \"ROSA\",\n  \"8-BIT\",\n  \"CARL\",\n  \"BIBI\",\n  \"EMZ\",\n  \"BEA\",\n  \"SPROUT\",\n  \"SANDY\",\n  \"JACKY\",\n  \"MAX\",\n  \"MR. P\",\n  \"GALE\",\n  \"COLETTE\",\n  \"AMBER\",\n  \"BYRON\",\n  \"STU\",\n  \"COLONEL RUFFS\",\n  \"LOU\",\n  \"EDGAR\",\n  \"SURGE\",\n];\nbrawlerNameList = brawlerNameList.sort();\nbrawlerNameList.unshift(\"ALL\");\nclass BrawlerList extends Component {\n  constructor(props) {\n    super(props);\n    this.change = this.change.bind(this);\n    //this.setState({ changeBrawler: this.props.changeBrawler });\n    //console.log(this.props.changeBrawler);\n  }\n  state = {\n    brawlerName: \"ALL\",\n    changeBrawler: \"\",\n  };\n  change(event) {\n    let value = event.target.value;\n    this.props.changeBrawler(value);\n    this.setState({ value: value });\n  }\n  componentDidMount() {\n    const { brawlerName } = this.props;\n    this.setState({\n      brawlerName: brawlerName\n    });\n  }\n  render() {\n    return (\n      <div className=\"selectBox\">\n        <label htmlFor=\"brawlerName\">brawler</label>\n        <select\n          id=\"brawlerName\"\n          onChange={this.change}\n          value={this.state.brawlerName}\n        >\n          {brawlerNameList.map((brawlerName, index) => {\n            return (\n              <option key={brawlerName} label={brawlerName} value={brawlerName}>\n                {brawlerName}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default BrawlerList;\n","import React, { Component } from \"react\";\nimport styles from \"./SoloDuoMode.scss\";\nimport { calDisplayTime } from './BaseFunctions';\n\nclass SoloDuoMode extends Component {\n  state = {\n    trophyChange: \"\",\n    rankCss: \"\",\n  };\n  componentDidMount() {\n    const { trophyChange, mode, rank } = this.props;\n    let signTrophyChange = null;\n    if (trophyChange > 0) {\n      signTrophyChange = \"+\" + trophyChange;\n    } else {\n      signTrophyChange = trophyChange;\n    }\n    if (mode == \"soloShowdown\") {\n      this.setState({\n        rankCss: Math.floor((rank + 1) / 2),\n      });\n    } else {\n      this.setState({\n        rankCss: rank,\n      });\n    }\n\n    this.setState({ trophyChange: signTrophyChange });\n  }\n  render() {\n    // const {\n    //   battleTime,\n    //   rank,\n    //   result,\n    //   brawler_name,\n    //   map,\n    //   power,\n    //   trophies,\n    //   trophyChange,\n    //   groupRecords,\n    // } = this.props;\n    const { groupRecords, tag, map, mode, type } = this.props;\n    let battleTime = \"\";\n    let rank = \"\";\n    let brawlerName = \"\";\n    let power = \"\";\n    let trophies = \"\";\n    let trophyChange = \"\";\n    groupRecords.forEach(e => {\n      if (e.tag === tag) {\n        battleTime = e.battleTime;\n        rank = e.resultRank;\n        brawlerName = e.brawlerName;\n        power = e.power;\n        trophies = e.trophies;\n        trophyChange = e.trophyChange;\n      }\n    })\n\n    return (\n      <div className=\"center\">\n        <div className={`SoloDuoModeContainer rank${this.state.rankCss}`}>\n          <div>\n            {type}\n          </div>\n          <div className={`topContainer rank${this.state.rankCss}`}>\n            <div className={`rank rank${this.state.rankCss}Content`}>\n              {rank}\n            </div>\n            <div>{calDisplayTime(battleTime)}</div>\n            <div>{this.state.trophyChange}</div>\n          </div>\n          <div className={`gameInfoContainer rank${this.state.rankCss}`}>\n            <div>\n              <img src={`/images/${brawlerName}.png`} width=\"50px\" />\n              <div>{brawlerName}</div>\n            </div>\n            <div className=\"tableContainer\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>map</th>\n                    <th>power</th>\n                    <th>trophies</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>{map}</td>\n                    <td>{power}</td>\n                    <td>{trophies}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SoloDuoMode;\n","import React, { Component } from \"react\";\nimport styles from \"./Pagination.scss\";\n\nclass Page {\n  constructor(link, pageNum, content, className) {\n    this.link = link;\n    this.pageNum = pageNum;\n    this.content = content;\n    this.className = className;\n  }\n}\nclass Pagination extends Component {\n  state = {\n    curPage: 1,\n  };\n  componentDidUpdate(prevProps) {\n    // if (this.props.curPage !== prevProps.curPage) {\n    //   //console.log(\"update!!!!\");\n    //   this.setState({\n    //     curPage: this.props.curPage,\n    //   });\n    // }\n  }\n  componentDidMount() {\n    this.setState({\n      curPage: this.props.curPage,\n    });\n  }\n  render() {\n    //   let { curPage } = this.props;\n    //   return (\n    //     <div>\n    //       {this.state.curPage}\n    //       {curPage}\n    //       <button onClick={() => this.props.onClick(this.state.curPage + 1)}>\n    //         next\n    //       </button>\n    //     </div>\n    //   );\n    // }\n    let { numTotal, numShowItems, pageUrl, onClick } = this.props;\n    //console.log(`pagination props ${this.state.curPage}`);\n    let curPage = this.state.curPage;\n    const numShowPages = 5;\n    let maxPage = Math.floor((numTotal - 1) / numShowItems) + 1;\n    //console.log(`maxPage ${maxPage}`);\n\n    if (curPage === undefined) curPage = 1;\n    if (numShowItems === undefined) numShowItems = 15;\n\n    //console.log(`curPage ${curPage}`);\n    if (curPage < 1) curPage = 1;\n    else if (curPage > maxPage) curPage = maxPage;\n\n    let startPage = Math.floor((curPage - 1) / numShowPages) * numShowPages + 1;\n    let endPage = startPage + numShowPages - 1;\n    if (startPage < 1) startPage = 1;\n    if (endPage > maxPage) endPage = maxPage;\n\n    let prevPage = startPage - 1;\n    if (prevPage < 1) prevPage = 1;\n    let nextPage = endPage + 1;\n    if (nextPage > maxPage) nextPage = curPage;\n    //console.log(`curPage ${curPage} startPage ${startPage} endPage ${endPage} `)\n    let pageList = [];\n    pageList.push(new Page(\"\", 0, \"<<\"));\n    pageList.push(new Page(\"\", prevPage, \"<\"));\n    for (let i = startPage; i <= endPage; i++) {\n      pageList.push(new Page(`${pageUrl}?curPage=${i}`, i, i, \"number\"));\n    }\n    pageList.push(new Page(\"\", nextPage, \">\"));\n    pageList.push(new Page(\"\", maxPage, \">>\", \"\"));\n\n    //console.log(\"chagnePageHandler\", this.props.onClick);\n    return (\n      <div className=\"center\">\n        <div className=\"btn-container\">\n          {pageList.map((page, index) => {\n            return (\n              <button\n                key={page.content}\n                className={\n                  \"btn-page \" + (curPage === page.pageNum && page.className === \"number\" ? \"activate \" : \"\")\n                }\n                onClick={() => onClick(page.pageNum)}\n              >\n                {page.content}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Pagination;\n","import axios from \"axios\";\n\nconst baseUrl = \"http://brawlstat.xyz\";\n//const baseUrl = \"http://localhost:8080\";\n\nlet getData = (paramUrl) => {\n    let url = baseUrl + paramUrl;\n\n    return axios.get(url);\n}\n\nexport { getData };","import React, { Component } from \"react\";\nimport qs from \"qs\";\nimport firestore from \"./Firestore\";\nimport ModeList from \"./ModeList\";\nimport TrioMode from \"./TrioMode\";\nimport BrawlerList from \"./BrawlerList\";\nimport playStyles from \"./PlayList.scss\";\nimport styles from \"./Base.scss\";\nimport SoloDuoMode from \"./SoloDuoMode\";\nimport Pagination from \"./Pagination\";\nimport { getData } from \"./ApiHandler\";\n\n// const PlayList = ({location}) =>{\n//     const query = qs.parse(location.search,{\n//         ignoreQueryPrefix : true\n//     });\n//     const tag = query.tag || \"tag를 입력해주세요\";\nlet myTag = null || \"tag를 입력해주세요\";\nclass PlayList extends Component {\n  constructor(props) {\n    super(props);\n    this.changeMode = this.changeMode.bind(this);\n    this.changeBrawler = this.changeBrawler.bind(this);\n  }\n  state = {\n    playRecord: [],\n    winRate: 0,\n    averageRank: 0,\n    tag: '',\n    mode: \"ALL\",\n    brawlerName: \"ALL\",\n    isEmpty: false,\n    curPage: 1,\n    totalElements: 10,\n  };\n  getTag() {\n    const query = qs.parse(this.props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query.tag;\n  }\n  addZero(number) {\n    let str = number.toString();\n    if (str.length == 1) str = \"0\" + str;\n    return str;\n  }\n\n  changePageHandler = (page) => {\n\n    let searchParams = new URLSearchParams(this.props.location.search);\n    const mode = searchParams.get(\"mode\");\n    console.log(`changePageHandler mode !! ${mode}`);\n    const tag = searchParams.get(\"tag\");\n    const brawlerName = searchParams.get(\"brawlerName\");\n    this.getBattleLog(tag, mode, brawlerName, page);\n    const queryPage = page - 1;\n    searchParams.set(\"page\", queryPage);\n    searchParams.set(\"size\", 5);\n    let { history } = this.props;\n    history.push(`/playList?${searchParams.toString()}`);\n    console.log(tag);\n    console.log(searchParams.toString());\n    console.log(searchParams.get(\"tag\"));\n  }\n  getBattleLog(tag, mode, brawlerName, page) {\n    console.log(`getBattleLog tag ${tag} mode ${mode} bralerName ${brawlerName}`);\n    tag = tag.replace(\"#\", \"%23\");\n    const queryPage = page - 1;\n    let paramMode = mode;\n    if (mode === 'ALL' || mode === null || mode === undefined) {\n      paramMode = '';\n    }\n    let paramBrawlerName = brawlerName;\n    if (brawlerName === 'ALL' || brawlerName === null || brawlerName === undefined) {\n      paramBrawlerName = '';\n    }\n    let searchParams = new URLSearchParams();\n    searchParams.set(\"mode\", paramMode);\n    searchParams.set(\"brawlerName\", paramBrawlerName);\n    searchParams.set(\"page\", queryPage);\n    searchParams.set(\"size\", 5);\n    console.log(`searchParams ${searchParams.toString()}`);\n    getData(`/record/${tag}?${searchParams.toString()}`).then((response) => {      // .then : 응답(상태코드200~300미만)성공시\n      console.log(response);\n      const data = response.data;\n      this.setState({\n        playRecord: response.data.content,\n        curPage: data.pageable.pageNumber + 1,\n        totalElements: data.totalElements\n      })\n    }).catch((error) => {\n      console.log(error);\n    });\n  }\n  getBattleLogByUrl() {\n\n  }\n  componentDidMount() {\n    let searchParams = new URLSearchParams(this.props.location.search);\n    const tag = searchParams.get(\"tag\")\n    if (tag !== null) {\n      this.setState({\n        tag: tag\n      });\n    }\n    const mode = searchParams.get(\"mode\");\n    if (mode !== null) {\n      this.setState({\n        mode: mode\n      })\n    }\n    const brawlerName = searchParams.get(\"brawlerName\");\n    if (brawlerName !== null) {\n      this.setState({\n        brawlerName: brawlerName\n      })\n    }\n    const page = parseInt(searchParams.get(\"page\"));\n    if (page !== null) {\n      this.setState({\n        page: page\n      })\n    }\n    //console.log(`compomentDidMount !!!!! ${brawlerName}`);\n    this.getBattleLog(tag, mode, brawlerName, page + 1);\n    getData(`/member/${tag.replace(\"#\", \"%23\")}`)\n      .then(response => {\n        const member = response.data;\n        this.setState({\n          name: member.name\n        });\n      })\n  }\n\n  componentDidUpdate(prevProps) {\n    //console.log(\"update\");\n    let prevQuery = this.getQuery(prevProps);\n    let query = this.getQuery(this.props);\n    console.log(\n      `prevQuery.curpage ${prevQuery.page}, query.curPage ${query.page}`\n    );\n\n    if (prevQuery.page !== query.page) {\n      console.log(`componentWill Update !!!! ${query.page}`);\n      this.getBattleLog(query.tag.replace(\"#\", \"%23\"), query.mode, query.brawlerName, parseInt(query.page) + 1);\n      //this.setState({curPage: query.curPage\n    }\n  }\n\n  changeMode(mode) {\n    //console.log('change Mode !!!');\n    //console.log(this.state.tag, mode, this.state.brawlerName);\n    this.setState({ mode: mode });\n    this.getBattleLog(this.state.tag, mode, this.state.brawlerName, 1);\n    const { history } = this.props;\n    let searchParams = new URLSearchParams(this.props.location.search);\n    searchParams.set(\"mode\", mode);\n    searchParams.set(\"page\", 0);\n    history.push(`/playList?${searchParams}`);\n  }\n  changeBrawler(brawlerName) {\n    //console.log(\"change bralwer\", brawlerName);\n    this.setState({ brawlerName: brawlerName });\n    this.getBattleLog(this.state.tag, this.state.mode, brawlerName, 1);\n    const { history } = this.props;\n    let searchParams = new URLSearchParams(this.props.location.search);\n    searchParams.set(\"brawlerName\", brawlerName);\n    searchParams.set(\"page\", 0);\n    history.push(`/playList?${searchParams.toString()}`);\n  }\n  getQuery(props) {\n    const query = qs.parse(props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query;\n  }\n\n  isTrio(mode) {\n    let result = false;\n    if (\n      mode === \"gemGrab\" ||\n      mode === \"heist\" ||\n      mode === \"siege\" ||\n      mode === \"bounty\" ||\n      mode === \"brawlBall\" ||\n      mode === \"hotZone\"\n    ) {\n      result = true;\n    }\n    return result;\n  }\n  goStatistics = () => {\n    const { history } = this.props;\n    history.push(`/statistics?tag=${this.state.tag.replace(\"#\", \"%23\")}`)\n  }\n  render() {\n    return (\n      <div>\n        {/*\n                My Tag %239QU209UYC\n                */}\n        <h1>PlayList</h1>\n        <button onClick={this.goStatistics} className=\"btn\">Statistics</button>\n        <ModeList key={`mode-${this.state.mode}`} changeMode={this.changeMode} mode={this.state.mode} />\n        <BrawlerList key={this.state.brawlerName} brawlerName={this.state.brawlerName} changeBrawler={this.changeBrawler} />\n        <h2>{this.state.name}({this.state.tag})</h2>\n\n        <div className={this.state.isEmpty ? \"noRecord\" : \"displayNone\"}>\n          No record\n        </div>\n        {\n          this.state.playRecord.map((data) => {\n            if (this.isTrio(data.mode)) {\n              return (\n                <TrioMode\n                  key={data.battleTime}\n                  battleTime={data.battleTime\n                  }\n                  rank={data.resultRank}\n                  result={data.result}\n                  brawler_name={data.brawlerName}\n                  duration={data.duration}\n                  isStarPalyer={data.isStarPlayer}\n                  map={data.map}\n                  power={data.power}\n                  trophies={data.trophies}\n                  trophyChange={data.trophyChange}\n                  type={data.type}\n                  mode={data.mode}\n                  groupRecords={data.groupRecords}\n                />\n              );\n            } else {\n              return (\n                <SoloDuoMode\n                  key={data.battleTime}\n                  battleTime={\n                    data.battleTime\n                  }\n                  rank={data.resultRank}\n                  result={data.result}\n                  brawler_name={data.brawlerName}\n                  duration={data.duration}\n                  isStarPalyer={data.isStarPlayer}\n                  map={data.map}\n                  power={data.power}\n                  trophies={data.trophies}\n                  trophyChange={data.trophyChange}\n                  mode={data.mode}\n                  groupRecords={data.groupRecords}\n                  tag={this.state.tag}\n                />\n              );\n            }\n          })}\n        <Pagination\n          key={this.state.curPage}\n          curPage={this.state.curPage}\n          numTotal={this.state.totalElements}\n          numShowItems=\"5\"\n          pageUrl=\"/playerList\"\n          onClick={this.changePageHandler.bind(this)}\n        ></Pagination>\n        <div style={{ 'marginBottom': \"10px\" }}>\n        </div>\n      </div >\n      // </div>\n    );\n  }\n}\n\nexport default PlayList;\n","import React, { Component } from \"react\";\nimport firestore from \"./Firestore\";\nimport Pagination from \"./Pagination\";\nimport qs from \"qs\";\nimport styles from \"./UserList.scss\";\nimport baseStyles from \"./Base.scss\";\nimport { getData } from './ApiHandler';\n\nclass User {\n  constructor(tag, name) {\n    this.tag = tag;\n    this.name = name;\n  }\n}\n\n\nconst tableStyle = {\n  margin: \"auto\",\n};\nclass UserList extends Component {\n  constructor(props) {\n    super(props);\n    this.searchNickname = this.searchNickname.bind(this);\n    this.searchInputChange = this.searchInputChange.bind(this);\n  }\n  state = {\n    userList: [],\n    curPage: 0,\n    numUser: 0,\n    pageUrl: \"userList\",\n    nickname: \"\",\n  };\n  getQuery(props) {\n    const query = qs.parse(props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query;\n  }\n  setUserList(snapshot, page) {\n    var rows = [];\n    snapshot.forEach((doc) => {\n      var data = doc.data();\n      data[\"tag\"] = doc.id;\n      console.log(data);\n      rows.push(data);\n    });\n    console.log(rows);\n    this.setState({ userList: rows, curPage: page });\n  }\n  getUserList(page) {\n    console.log(\"getUserList\");\n    const queryPage = page - 1;\n    getData(`/member?page=${queryPage}&size=15`)\n      .then((response) => {\n        console.log(response);\n        const data = response.data;\n        this.setState({\n          userList: data.content,\n          curPage: data.number + 1,\n          numUser: data.totalElements\n        })\n      }).catch(\n        (error) => {\n          console.log(error);\n        });\n  }\n\n  componentDidMount() {\n    console.log(\"mount\");\n    let query = this.getQuery(this.props);\n    let curPage = query.curPage;\n    if (curPage === undefined) curPage = 1;\n    curPage = parseInt(curPage);\n    console.log(`curPage ${curPage}`);\n    if (curPage === undefined) curPage = 1;\n    this.getUserList(curPage);\n  }\n  componentDidUpdate(prevProps) {\n    let prevQuery = this.getQuery(prevProps);\n    let query = this.getQuery(this.props);\n    if (prevQuery.curPage !== query.curPage) {\n      this.getUserList(query.curPage);\n    }\n  }\n  changePageHandler(page) {\n    let { history } = this.props;\n    console.log(\"changePageHandler\");\n    this.setState({ curPage: page });\n    history.push(`/userList?curPage=${page}`);\n    this.getUserList(page);\n  }\n  showPlayList(tag) {\n    let { history } = this.props;\n    tag = tag.replace(\"#\", \"%23\");\n    history.push(`/playList?tag=${tag}`);\n    console.log(tag);\n  }\n  searchNickname() {\n    //console.log(this.state.nickname);\n    getData(`/member?name=${this.state.nickname}&page=0&size=15`)\n      .then((response) => {\n        console.log(response);\n        const data = response.data;\n        this.setState({\n          userList: data.content,\n          curPage: data.number + 1,\n          numUser: data.totalElements\n        })\n      }\n      );\n  }\n  searchInputChange(event) {\n    let value = event.target.value;\n    this.setState({\n      nickname: value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>UserList</h1>\n        <div>\n          <input\n            placeholder=\"search user nickname\"\n            onChange={this.searchInputChange}\n            value={this.state.nickname}\n          ></input>\n          <button onClick={this.searchNickname} className=\"btn btn-primary\">\n            search\n          </button>\n        </div>\n        <table style={tableStyle} className=\"table\">\n          <thead>\n            <tr>\n              <th>Index</th>\n              <th>Nickname(tag)</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.userList.map((user, index) => {\n              return (\n                <tr\n                  className=\"cursor\"\n                  key={user.tag}\n                  page={this.state.curPage}\n                  onClick={() => this.showPlayList(user.tag)}\n                >\n                  <td>{(this.state.curPage - 1) * 15 + index + 1}</td>\n                  <td>\n                    {user.name}({user.tag})\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <Pagination\n          key={`pagination-${this.state.curPage}`}\n          curPage={this.state.curPage}\n          numTotal={this.state.numUser}\n          numShowItems=\"15\"\n          pageUrl=\"/userList\"\n          onClick={this.changePageHandler.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserList;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./TopBar.scss\";\n\nclass TopBar extends Component {\n  render() {\n    return (\n      <div className=\"topBar\">\n        <div className=\"menuContainer\">\n          <div className=\"item\">\n            <Link to=\"/\">Home</Link>\n          </div>\n          <div className=\"item\">\n            <Link to=\"/userList\">User List</Link>\n          </div>\n          <div className=\"item\">\n            <Link to=\"/mapList\">Map List</Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TopBar;\n","import React, { Component } from \"react\";\nimport styles from \"./Home.scss\";\n\nconst languageList = [\"korean\", \"english\", \"japanese\"];\nconst displayNone = {\n  display: \"none\",\n};\nclass Home extends Component {\n  state = {\n    language: \"korean\",\n  };\n  changeLanguage = (language) => {\n    this.setState({\n      language: language,\n    });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          \"marginTop\": \"30px\",\n        }}\n        className=\"home\"\n      >\n        <div className=\"languageContainer\">\n          {languageList.map((lang, index) => (\n            <div\n              onClick={() => {\n                this.changeLanguage(lang);\n              }}\n              className={`language ${lang === this.state.language ? \"selected\" : \"\"\n                }`}\n              key={index}\n            >\n              {lang}\n            </div>\n          ))}\n        </div>\n\n        {this.state.language === \"korean\" ? (\n          <div className=\"contentContainer\">\n            <div className=\"content\">\n              브롤스타즈 전적 기록 사이트입니다.\n            <br />\n              <br />\n            User List를 클릭하여\n            자신의 닉네임을 검색하고\n            전적을 확인해보세요.\n            <br />\n            Map List에서는 맵별 브롤러 승률을 알 수 있습니다.\n            <br />\n              <br />\n            1시간 마다 전적이 동기화됩니다.\n            <br />\n              <br />\n\n            email : cubeprince@gmail.com\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n        {this.state.language === \"english\" ? (\n          <div className=\"contentContainer\">\n            <div className=\"content\">\n              This is the Brawl Stars game record site.\n              <br />\n              Click on the User List on the top menu\n              <br />\n              to search your nickname and check the history\n              <br />\n              Check brawlers' win rate in Map List menu.\n              <br />\n              Game records are synchronized every hour.\n              <br />\n              <br />\n              email : cubeprince@gmail.com\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n        {this.state.language === \"japanese\" ? (\n          <div className=\"contentContainer\">\n            <div className=\"content\">\n              ブロールスターズの戦闘記録サイトです。\n              <br />\n              UserListをクリックして、自分のニックネームを検索して、\n              <br />\n              戦闘記録を確認してください。\n              <br />\n              MapListではマップごとのキャラクターの勝率を確認できます。\n              <br />\n              <br />\n              戦闘記録は1時間ごとに同期されます。\n              <br />\n              <br />\n              email : cubeprince@gmail.com\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport mapListStyles from \"./MapList.scss\";\nimport ModeList from './ModeList';\nimport qs from 'qs';\nimport { getData } from './ApiHandler';\n\nclass MapList extends Component {\n    state = {\n        mode: 'gemGrab',\n        maps: [],\n        filteredMaps: [],\n    }\n    clickMap = (mapName, mapMode) => {\n        console.log(this);\n        let paramMapName = mapName.replace(\"&\", \"%26\");\n        let { history } = this.props;\n        history.push(`/map?mapName=${paramMapName}&mode=${mapMode}`);\n    }\n    setFilteredMap = (mode) => {\n        let filteredMaps = this.state.maps;\n        if (mode !== 'ALL' && mode !== undefined) {\n            filteredMaps = this.state.maps.filter(x => {\n                return x.mode === mode;\n            });\n        }\n        this.setState({\n            filteredMaps: filteredMaps,\n        });\n    }\n    changeMode = (mode) => {\n        console.log(`changeMode ${mode}`);\n        console.log(this);\n\n        this.setFilteredMap(mode);\n\n        let { history } = this.props;\n        history.push(`/mapList?mode=${mode}`);\n    }\n    componentDidMount() {\n        const query = qs.parse(this.props.location.search, {\n            ignoreQueryPrefix: true,\n        });\n        console.log(`query mode ${query.mode}`);\n\n        //this.setFilteredMap(query.mode);\n        getData(`/gameMap`).then(response => {\n            console.log(response);\n            const data = response.data;\n            let mode = 'gemGrab';\n            if (query.mode !== undefined) {\n                mode = query.mode;\n            }\n            this.setState({\n                maps: data,\n                mode: mode\n            })\n            this.setFilteredMap(mode);\n            //this.changeMode(query.mode);\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n    render() {\n        return <div className=\"mapList\">\n            <div>\n                <ModeList key={this.state.mode} changeMode={this.changeMode} mode={this.state.mode}></ModeList>\n            </div>\n            <div className=\"gemGrabContainer\">{\n                this.state.filteredMaps.map((map, index) => {\n                    return <div key={index} className=\"gemGrabItem\" >{map.name}\n                        <img onClick={() => { this.clickMap(map.name, map.mode) }} src={`./images/maps/${map.mode.indexOf(\"Showdown\") !== -1 ? \"showdown\" : map.mode}/${map.name}.png`}></img>\n                    </div>\n                })}\n            </div>\n        </div>\n    }\n}\n\nexport default MapList;","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSortUp, faSortDown, faSort } from '@fortawesome/free-solid-svg-icons'\nimport { isTrio, isDuo, isSolo, isAll } from './BaseFunctions';\nimport style from \"./RecordResult.scss\";\n\nclass RecordResult extends Component {\n    state = {\n        recordArr: [],\n        sumTotalGameNum: 0,\n    }\n    componentDidMount() {\n        const { recordArr, sumTotalGameNum } = this.props;\n        this.setState({\n            recordArr: recordArr,\n            sumTotalGameNum: sumTotalGameNum,\n        })\n    }\n    render() {\n        const { mode, isPersonal } = this.props;\n\n        return <div className=\"recordResult\">\n            <div className=\"infoContainer\">\n                <table className=\"table info\">\n                    <thead>\n                        <tr>\n                            <th>No</th>\n                            <th>Name</th>\n                            {isTrio(mode) ?\n                                <th>Win Rate <FontAwesomeIcon icon={faSortDown} /></th>\n                                :\n                                isDuo(mode) || isSolo(mode) ?\n                                    <th>Avg Rank <FontAwesomeIcon icon={faSortDown} /></th>\n                                    : <th># of Games</th>\n                            }\n                            <th>Pick Rate <FontAwesomeIcon icon={faSort} /></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.recordArr.map((ele, index) => {\n                            return (\n                                <tr key={ele.brawlerName}>\n                                    <td>{index + 1}</td>\n                                    <td>\n                                        {/* <div className=\"info\" key={index}> */}\n                                        <div className=\"brawler\">\n                                            <img src={`./images/${ele.brawlerName}.png`}></img>\n                                            <div className=\"brawlerName\">\n                                                {ele.brawlerName}\n                                            </div>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        {(isDuo(mode) || isSolo(mode)) ?\n                                            <div className=\"averageRank\">\n                                                {Math.round(ele.averageRank * 100) / 100}\n                                            </div>\n                                            : isTrio(mode) ?\n\n                                                <div className=\"winRate\">\n                                                    {Math.round(ele.winRate * 1000) / 10}%\n\n                                                </div>\n                                                : <div className=\"numberOfGames\">\n                                                    {ele.totalGameNum}\n                                                </div>\n                                        }\n                                    </td>\n\n                                    <td>\n                                        <div className=\"totalGame\">\n                                            {Math.round(ele.totalGameNum / this.state.sumTotalGameNum * 10000) / 100}%\n                            </div>\n                                    </td>\n                                    {/* </div> */}\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n\n                    {isPersonal ?\n                        <tfoot>\n                            {isAll(mode) ?\n                                <tr>\n                                    <td colSpan=\"2\">Total # of Games</td>\n                                    <td colSpan=\"2\">{this.state.sumTotalGameNum} games</td>\n                                </tr>\n                                : isTrio(mode) ?\n                                    <tr>\n                                        <td colSpan=\"2\">Avg Win Rate</td>\n                                        <td>{Math.round(this.state.recordArr.map(e => e.victory).reduce((a, b) => a + b, 0) / this.state.sumTotalGameNum * 1000) / 10}%</td>\n                                        <td>{this.state.sumTotalGameNum} games</td>\n                                    </tr>\n                                    : (isSolo(mode) || isDuo(mode)) ?\n                                        <tr>\n                                            <td colSpan=\"2\">Avg Rank</td>\n                                            <td>{Math.round(this.state.recordArr.map(e => e.averageRank * e.totalGameNum).reduce((a, b) => a + b, 0) / this.state.sumTotalGameNum * 10) / 10}</td>\n                                            <td>{this.state.sumTotalGameNum} games</td>\n                                        </tr>\n                                        : \"\"\n\n                            }\n                        </tfoot>\n                        : <tfoot>\n                            <tr>\n                                <td colSpan=\"2\">Total # of Games</td>\n                                <td colSpan=\"2\">{this.state.sumTotalGameNum} games</td>\n                            </tr>\n                        </tfoot>\n                    }\n                </table>\n            </div>\n        </div>\n    }\n}\nexport default RecordResult;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport qs from 'qs';\nimport styles from \"./Map.scss\";\nimport { getData } from './ApiHandler';\nimport RecordResult from './RecordResult';\nimport { isTrio } from './BaseFunctions';\n\nclass Map extends Component {\n    state = {\n        mapName: \"\",\n        recordArr: [],\n        sumTotalGameNum: 0,\n        trophyRange: '',\n    }\n    isSolo(mode) {\n        if (mode === \"soloShowdown\") {\n            return true;\n        }\n        return false;\n    }\n    isDuo(mode) {\n        if (mode === \"duoShowdown\") {\n            return true;\n        }\n        return false;\n    }\n    changeTrophyRange = (e) => {\n        //console.log(e.target.value);\n        this.setState({\n            trophyRange: e.target.value,\n        });\n        const { history } = this.props;\n        let searchParams = new URLSearchParams(this.props.location.search);\n        searchParams.set(\"trophyRange\", e.target.value);\n        this.getRecordResult(searchParams.get(\"mapName\"), searchParams.get(\"mode\"), searchParams.get(\"trophyRange\"));\n        history.push(`/map?${searchParams.toString()}`);\n\n    }\n    getRecordResult = (mapName, mode, trophyRange) => {\n        let records = {};\n        let recordArr = [];\n        let searchParams = new URLSearchParams();\n        searchParams.set(\"mode\", mode);\n        searchParams.set(\"trophyRange\", trophyRange);\n        searchParams.set(\"map\", mapName);\n\n        getData(`/record/result?${searchParams}`)\n            .then(response => {\n                console.log(response);\n                const data = response.data;\n                console.log(data);\n                data.forEach(e => {\n                    // brawlerName: \"COLETTE\"\n                    // cnt: 14\n                    // result: \"defeat\"\n                    // __proto__: Object\n                    if (isTrio(mode)) {\n                        if (records[e.brawlerName] === undefined) {\n                            records[e.brawlerName] = {\n                            };\n                        }\n                        records[e.brawlerName] = {\n                            ...records[e.brawlerName],\n                            [e.result]: e.cnt,\n                        }\n                    } else {\n                        records[e.brawlerName] = {\n                            brawlerName: e.brawlerName,\n                            averageRank: e.averageRank,\n                            cnt: e.cnt,\n                        }\n                    }\n                });\n                console.log(records);\n                let sumTotalGameNum = 0;\n                if (isTrio(mode)) {\n                    for (let key in records) {\n                        let { victory, defeat, draw } = records[key];\n                        const victoryNum = victory || 0;\n                        const defeatNum = defeat || 0;\n                        const drawNum = draw || 0;\n                        const totalGameNum = victoryNum + defeatNum + drawNum;\n                        recordArr.push({\n                            \"brawlerName\": key,\n                            \"victory\": victoryNum,\n                            \"defeat\": defeatNum,\n                            \"draw\": drawNum,\n                            \"winRate\": (victoryNum) / totalGameNum,\n                            \"totalGameNum\": totalGameNum\n                        });\n                        sumTotalGameNum += totalGameNum;\n                    }\n\n                    recordArr.sort((a, b) => {\n                        return b.winRate - a.winRate;\n                    })\n                } else {\n                    for (let key in records) {\n                        let { averageRank, cnt } = records[key];\n                        recordArr.push({\n                            \"brawlerName\": key,\n                            \"averageRank\": averageRank,\n                            \"totalGameNum\": cnt\n                        });\n                        sumTotalGameNum += cnt;\n                    }\n                    recordArr.sort((a, b) => {\n                        return a.averageRank - b.averageRank;\n                    })\n                }\n                console.log(recordArr);\n                this.setState({\n                    recordArr: recordArr,\n                    sumTotalGameNum: sumTotalGameNum\n                })\n            }).catch(error => {\n                console.log(error);\n            });\n    }\n    componentDidMount() {\n        const query = qs.parse(this.props.location.search, {\n            ignoreQueryPrefix: true,\n        });\n        console.log(query);\n        const mapName = query.mapName;\n        const mode = query.mode;\n        const trophyRange = query.trophyRange || this.state.trophyRange;\n        console.log(mapName);\n        this.setState({\n            trophyRange: trophyRange,\n        })\n        this.getRecordResult(mapName, mode, trophyRange);\n    }\n    render() {\n        const query = qs.parse(this.props.location.search, {\n            ignoreQueryPrefix: true,\n        });\n        console.log(query);\n        const mapName = query.mapName;\n        const mode = query.mode;\n\n        return <div className=\"mapClass\">\n            {/* <div className=\"trophySelect\">\n                <label htmlFor=\"trophyRange\">Trophies</label>\n                <select id=\"trophyRange\" value={this.state.trophyRange} onChange={this.changeTrophyRange}>\n                    <option value=\"ALL\" label=\"ALL\"></option>\n                    <option value=\"highRank\" label=\"500~\"></option>\n                    <option value=\"lowRank\" label=\"0~500\"></option>\n                </select>\n            </div> */}\n            {mapName === \"\" ? (<div>invalid map name</div>) :\n                <RecordResult key={this.state.recordArr} recordArr={this.state.recordArr} sumTotalGameNum={this.state.sumTotalGameNum} mode={mode} />\n            }\n        </div>\n    }\n}\n\nexport default Map;","import React, { Component } from \"react\";\nimport { getData } from \"./ApiHandler\";\nimport ModeList from './ModeList';\nimport { isTrio } from './BaseFunctions';\nimport RecordResult from \"./RecordResult\";\nimport style from \"./Statistics.scss\";\n\nclass Statistics extends Component {\n    state = {\n        tag: '',\n        mode: 'gemGrab',\n        recordArr: [],\n        sumTotalGameNum: 0,\n    }\n    getRecordResult(searchParams) {\n        let records = {};\n        let recordArr = [];\n        const mode = searchParams.get(\"mode\");\n        getData(`/record/result?${searchParams}`)\n            .then(response => {\n                console.log(response);\n                const data = response.data;\n                console.log(data);\n                data.forEach(e => {\n                    // brawlerName: \"COLETTE\"\n                    // cnt: 14\n                    // result: \"defeat\"\n                    // __proto__: Object\n                    if (isTrio(mode)) {\n                        if (records[e.brawlerName] === undefined) {\n                            records[e.brawlerName] = {\n                            };\n                        }\n                        records[e.brawlerName] = {\n                            ...records[e.brawlerName],\n                            [e.result]: e.cnt,\n                        }\n                    } else {\n                        records[e.brawlerName] = {\n                            brawlerName: e.brawlerName,\n                            averageRank: e.averageRank,\n                            cnt: e.cnt,\n                        }\n                    }\n                });\n                console.log(records);\n                let sumTotalGameNum = 0;\n                if (mode === 'ALL') {\n                    for (let key in records) {\n                        const { brawlerName, cnt } = records[key];\n                        recordArr.push({\n                            \"brawlerName\": brawlerName,\n                            \"totalGameNum\": cnt,\n                        });\n                        sumTotalGameNum += cnt;\n                    }\n                    recordArr.sort((a, b) => {\n                        return b.totalGameNum - a.totalGameNum;\n                    });\n\n                }\n                else if (isTrio(mode)) {\n                    for (let key in records) {\n                        let { victory, defeat, draw } = records[key];\n                        const victoryNum = victory || 0;\n                        const defeatNum = defeat || 0;\n                        const drawNum = draw || 0;\n                        const totalGameNum = victoryNum + defeatNum + drawNum;\n                        recordArr.push({\n                            \"brawlerName\": key,\n                            \"victory\": victoryNum,\n                            \"defeat\": defeatNum,\n                            \"draw\": drawNum,\n                            \"winRate\": (victoryNum) / totalGameNum,\n                            \"totalGameNum\": totalGameNum\n                        });\n                        sumTotalGameNum += totalGameNum;\n                    }\n\n                    recordArr.sort((a, b) => {\n                        return b.winRate - a.winRate;\n                    })\n                } else {\n                    for (let key in records) {\n                        let { averageRank, cnt } = records[key];\n                        recordArr.push({\n                            \"brawlerName\": key,\n                            \"averageRank\": averageRank,\n                            \"totalGameNum\": cnt\n                        });\n                        sumTotalGameNum += cnt;\n                    }\n                    recordArr.sort((a, b) => {\n                        return a.averageRank - b.averageRank;\n                    })\n                }\n                console.log(recordArr);\n                this.setState({\n                    recordArr: recordArr,\n                    sumTotalGameNum: sumTotalGameNum\n                })\n            }).catch(error => {\n                console.log(error);\n            });\n    }\n    componentDidMount() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n        let tag = searchParams.get(\"tag\");\n        const mode = searchParams.get(\"mode\") || this.state.mode;\n        searchParams.set(\"mode\", mode);\n        //console.log(`tag : ${tag}`);\n\n        this.setState({\n            tag: tag,\n        });\n\n        this.getRecordResult(searchParams);\n    }\n    changeMode = (mode) => {\n        console.log(`changeMode`);\n        this.setState({\n            mode: mode,\n        });\n        let searchParams = new URLSearchParams(this.props.location.search);\n        searchParams.set(\"mode\", mode);\n        this.getRecordResult(searchParams);\n    }\n\n    render() {\n\n        return <div>\n            <div className=\"statistics\">\n                <div className=\"modeListContainer\">\n                    <ModeList key={this.state.mode} mode={this.state.mode} changeMode={this.changeMode} />\n                </div>\n                <RecordResult key={this.state.recordArr} recordArr={this.state.recordArr} sumTotalGameNum={this.state.sumTotalGameNum} mode={this.state.mode}\n                    isPersonal={true} />\n            </div>\n        </div>\n    }\n}\n\nexport default Statistics;","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayList from \"./components/PlayList\";\nimport UserList from \"./components/UserList\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport TopBar from \"./components/TopBar\";\nimport Home from \"./components/Home\";\nimport MapList from \"./components/MapList\";\nimport Map from \"./components/Map\";\nimport Statistics from \"./components/Statistics\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <TopBar />\n        <Route path=\"/\" component={Home} exact={true} />\n        <Route path=\"/playList\" component={PlayList} exact={true} />\n        <Route path=\"/userList\" component={UserList} />\n        <Route path=\"/mapList\" component={MapList} />\n        <Route path=\"/map\" component={Map} />\n        <Route path=\"/statistics\" component={Statistics} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}