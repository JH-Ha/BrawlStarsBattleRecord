{"version":3,"sources":["components/ModeList.js","components/Firestore.js","components/PlayerTile.js","components/TrioMode.js","components/BrawlerList.js","components/SoloDuoMode.js","components/Pagination.js","components/PlayList.js","components/UserList.js","components/TopBar.js","components/Home.js","components/MapList.js","components/Map.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ModeList","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","props","state","value","change","bind","event","changeMode","this","mode","target","setState","console","log","className","htmlFor","id","onChange","Component","PlayerTile","brawlerName","playerName","trophies","src","width","TrioMode","imgSrc","brawler_name","battleTime","duration","map","isStarPalyer","trophyChange","power","result","type","groupRecords","substr","record","index","teamId","key","brawlerNameList","sort","unshift","BrawlerList","changeBrawler","label","SoloDuoMode","rankCss","rank","signTrophyChange","Math","floor","Page","link","pageNum","content","Pagination","curPage","prevProps","numTotal","numShowItems","pageUrl","onClick","maxPage","undefined","startPage","endPage","prevPage","nextPage","pageList","push","i","page","PlayList","playRecord","winRate","averageRank","tag","isEmpty","totalElements","changePageHandler","searchParams","URLSearchParams","location","search","get","getBattleLog","queryPage","set","history","toString","qs","parse","ignoreQueryPrefix","number","str","length","replace","paramMode","paramBrawlerName","axios","then","response","data","pageable","pageNumber","catch","error","parseInt","isTrio","resultRank","isStarPlayer","style","tableStyle","margin","UserList","userList","numUser","nickname","searchNickname","searchInputChange","snapshot","rows","forEach","doc","getQuery","getUserList","placeholder","user","showPlayList","name","TopBar","to","languageList","Home","language","changeLanguage","lang","MapList","maps","filteredMaps","clickMap","mapName","paramMapName","setFilteredMap","filter","x","query","Map","recordArr","sumTotalGameNum","records","e","cnt","victoryNum","victory","defeatNum","defeat","drawNum","draw","totalGameNum","a","b","icon","faSortDown","faSort","ele","round","App","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.743cc938.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ModeList extends Component {\n  constructor(props) {\n    super(props);\n    this.change = this.change.bind(this);\n  }\n  state = {\n    value: \"gemGrab\",\n  };\n  change(event) {\n    const { changeMode } = this.props;\n    let mode = event.target.value;\n    this.setState({ value: mode });\n    changeMode(mode);\n  }\n  componentDidMount() {\n    const { mode } = this.props;\n    console.log(`modeList : ${mode}`);\n    this.setState({\n      value: mode,\n    });\n  }\n  render() {\n    return (\n      <div className=\"selectBox\">\n        <label htmlFor=\"modeList\">mode </label>\n        <select id=\"modeList\" onChange={this.change} value={this.state.value}>\n          <option value=\"ALL\">ALL</option>\n          <option value=\"gemGrab\">gemGrab</option>\n          <option value=\"heist\">heist</option>\n          <option value=\"brawlBall\">brawlBall</option>\n          <option value=\"bounty\">bounty</option>\n          <option value=\"siege\">siege</option>\n          <option value=\"hotZone\">hotZone</option>\n          <option value=\"soloShowdown\">soloShowdown</option>\n          <option value=\"duoShowdown\">duoShowdown</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default ModeList;\n","import firebase, { firestore } from 'firebase'\nimport 'firebase/firestore'\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAvw6GqjvdJ30u8lhJPDpx_Asz6fw9QwaA\",\n    authDomain: \"brawlstars-260814.firebaseapp.com\",\n    databaseURL: \"https://brawlstars-260814.firebaseio.com\",\n    projectId: \"brawlstars-260814\",\n    storageBucket: \"brawlstars-260814.appspot.com\",\n    messagingSenderId: \"184744257860\",\n    appId: \"1:184744257860:web:7760bdf65e67cbeb9f8f11\",\n    measurementId: \"G-36T0YR0TBC\"\n};\n\nconst firestoreApp = firebase.initializeApp(firebaseConfig);\n\nexport default firestoreApp.firestore();","import React, { Component } from \"react\";\nimport playerTileStyles from \"./PlayerTile.scss\";\n\nclass PlayerTile extends Component {\n    constructor() {\n        super();\n    }\n    render() {\n        const {\n            brawlerName,\n            playerName,\n            trophies,\n        } = this.props;\n        return <div className={`playerTile`}>\n            <div>\n                <div>{trophies}</div>\n                <img src={`images/${brawlerName}.png`} width=\"50px\" />\n                <div className={`playerName`}>\n                    {playerName}\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default PlayerTile;","import React, { Component } from \"react\";\nimport styles from \"./TrioMode.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport PlayerTile from \"./PlayerTile\";\nclass TrioMode extends Component {\n  state = {\n    imgSrc: \"\",\n  };\n  componentDidMount() {\n    console.log(this.props);\n    const { brawler_name } = this.props;\n    this.setState({\n      imgSrc: `images/${brawler_name}.png`,\n    });\n  }\n  render() {\n    const {\n      battleTime,\n      brawler_name,\n      duration,\n      isStarPalyer,\n      map,\n      power,\n      trophies,\n      trophyChange,\n      result,\n      type,\n      mode,\n      groupRecords,\n    } = this.props;\n    //console.log(groupRecords);\n    return (\n      <div className=\"center\">\n        <div className={`trioContainer ${result}`}>\n          <div className={`typeInfo info ${result}`}>\n            <div className={`duration`}>\n              {duration} seconds\n            </div>\n            {type || \"game\"}\n            <div className={`battleTime`}>{battleTime.substr(0, 8)}</div>\n          </div>\n          <div className={`gameInfo top ${result}`}>\n            <div className={`modeMap`}>\n              <div className={`mode`}>{mode}\n              </div>\n              <div className={`map`}>\n                {map}\n              </div>\n            </div>\n            <div className={`gameResult`}>\n              {result}\n            </div>\n            <div className={`trophyChange`}>\n              {trophyChange}\n            </div>\n          </div>\n          <div className={`playerInfo info ${result}`}>\n            <div className={`trioPlayerContainer`}>\n              {groupRecords.map((record, index) => {\n                if (record.teamId === 0)\n                  return <PlayerTile key={index}\n                    brawlerName={record.brawlerName}\n                    playerName={record.playerName}\n                    trophies={record.trophies}\n                  ></PlayerTile>;\n              })}\n            </div>\n            <div className={`durationContainer`}>\n              <div>vs</div>\n            </div>\n            <div className={`trioPlayerContainer`}>\n              {groupRecords.map((record, index) => {\n                if (record.teamId === 1)\n                  return <PlayerTile key={index}\n                    brawlerName={record.brawlerName}\n                    playerName={record.playerName}\n                    trophies={record.trophies}\n                  ></PlayerTile>\n              })}\n            </div>\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default TrioMode;\n","import React, { Component } from \"react\";\n\nlet brawlerNameList = [\n  \"SHELLY\",\n  \"NITA\",\n  \"COLT\",\n  \"BULL\",\n  \"JESSIE\",\n  \"BROCK\",\n  \"DYNAMIKE\",\n  \"EL PRIMO\",\n  \"BARLEY\",\n  \"POCO\",\n  \"RICO\",\n  \"DARRYL\",\n  \"PIPER\",\n  \"PENNY\",\n  \"BO\",\n  \"MORTIS\",\n  \"TARA\",\n  \"PAM\",\n  \"FRANK\",\n  \"CROW\",\n  \"SPIKE\",\n  \"LEON\",\n  \"GENE\",\n  \"TICK\",\n  \"ROSA\",\n  \"8-BIT\",\n  \"CARL\",\n  \"BIBI\",\n  \"EMZ\",\n  \"BEA\",\n  \"SPROUT\",\n  \"SANDY\",\n  \"JACKY\",\n  \"MAX\",\n  \"MR. P\",\n  \"GALE\",\n  \"COLETTE\",\n  \"AMBER\",\n  \"BYRON\",\n  \"STU\",\n  \"COLONEL RUFFS\",\n  \"LOU\",\n  \"EDGAR\",\n  \"SURGE\",\n];\nbrawlerNameList = brawlerNameList.sort();\nbrawlerNameList.unshift(\"ALL\");\nclass BrawlerList extends Component {\n  constructor(props) {\n    super(props);\n    this.change = this.change.bind(this);\n    //this.setState({ changeBrawler: this.props.changeBrawler });\n    //console.log(this.props.changeBrawler);\n  }\n  state = {\n    brawlerName: \"ALL\",\n    changeBrawler: \"\",\n  };\n  change(event) {\n    let value = event.target.value;\n    this.props.changeBrawler(value);\n    this.setState({ value: value });\n  }\n  componentDidMount() {\n    const { brawlerName } = this.props;\n    this.setState({\n      brawlerName: brawlerName\n    });\n  }\n  render() {\n    return (\n      <div className=\"selectBox\">\n        <label htmlFor=\"brawlerName\">brawler</label>\n        <select\n          id=\"brawlerName\"\n          onChange={this.change}\n          value={this.state.brawlerName}\n        >\n          {brawlerNameList.map((brawlerName, index) => {\n            return (\n              <option key={brawlerName} label={brawlerName} value={brawlerName}>\n                {brawlerName}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default BrawlerList;\n","import React, { Component } from \"react\";\nimport styles from \"./SoloDuoMode.scss\";\n\nclass SoloDuoMode extends Component {\n  state = {\n    trophyChange: \"\",\n    rankCss: \"\",\n  };\n  componentDidMount() {\n    const { trophyChange, mode, rank } = this.props;\n    let signTrophyChange = null;\n    if (trophyChange > 0) {\n      signTrophyChange = \"+\" + trophyChange;\n    } else {\n      signTrophyChange = trophyChange;\n    }\n    if (mode == \"soloShowdown\") {\n      this.setState({\n        rankCss: Math.floor((rank + 1) / 2),\n      });\n    } else {\n      this.setState({\n        rankCss: rank,\n      });\n    }\n\n    this.setState({ trophyChange: signTrophyChange });\n  }\n  render() {\n    const {\n      battleTime,\n      rank,\n      result,\n      brawler_name,\n      map,\n      power,\n      trophies,\n      trophyChange,\n    } = this.props;\n    return (\n      <div className=\"center\">\n        <div className={`SoloDuoModeContainer rank${this.state.rankCss}`}>\n          <div className={`topContainer rank${this.state.rankCss}`}>\n            <div className={`rank rank${this.state.rankCss}Content`}>\n              {rank}\n            </div>\n            <div>{battleTime}</div>\n            <div>{this.state.trophyChange}</div>\n          </div>\n          <div className={`gameInfoContainer rank${this.state.rankCss}`}>\n            <div>\n              <img src={`/images/${brawler_name}.png`} width=\"50px\" />\n              <div>{brawler_name}</div>\n            </div>\n            <div className=\"tableContainer\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>map</th>\n                    <th>power</th>\n                    <th>trophies</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>{map}</td>\n                    <td>{power}</td>\n                    <td>{trophies}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SoloDuoMode;\n","import React, { Component } from \"react\";\nimport styles from \"./Pagination.scss\";\n\nclass Page {\n  constructor(link, pageNum, content, className) {\n    this.link = link;\n    this.pageNum = pageNum;\n    this.content = content;\n    this.className = className;\n  }\n}\nclass Pagination extends Component {\n  state = {\n    curPage: 1,\n  };\n  componentDidUpdate(prevProps) {\n    // if (this.props.curPage !== prevProps.curPage) {\n    //   //console.log(\"update!!!!\");\n    //   this.setState({\n    //     curPage: this.props.curPage,\n    //   });\n    // }\n  }\n  componentDidMount() {\n    this.setState({\n      curPage: this.props.curPage,\n    });\n  }\n  render() {\n    //   let { curPage } = this.props;\n    //   return (\n    //     <div>\n    //       {this.state.curPage}\n    //       {curPage}\n    //       <button onClick={() => this.props.onClick(this.state.curPage + 1)}>\n    //         next\n    //       </button>\n    //     </div>\n    //   );\n    // }\n    let { numTotal, numShowItems, pageUrl, onClick } = this.props;\n    //console.log(`pagination props ${this.state.curPage}`);\n    let curPage = this.state.curPage;\n    const numShowPages = 10;\n    let maxPage = Math.floor((numTotal - 1) / numShowItems) + 1;\n    //console.log(`maxPage ${maxPage}`);\n\n    if (curPage === undefined) curPage = 1;\n    if (numShowItems === undefined) numShowItems = 15;\n\n    //console.log(`curPage ${curPage}`);\n    if (curPage < 1) curPage = 1;\n    else if (curPage > maxPage) curPage = maxPage;\n\n    let startPage = Math.floor((curPage - 1) / numShowPages) * numShowPages + 1;\n    let endPage = startPage + numShowPages - 1;\n    if (startPage < 1) startPage = 1;\n    if (endPage > maxPage) endPage = maxPage;\n\n    let prevPage = startPage - 1;\n    if (prevPage < 1) prevPage = 1;\n    let nextPage = endPage + 1;\n    if (nextPage > maxPage) nextPage = curPage;\n    //console.log(`curPage ${curPage} startPage ${startPage} endPage ${endPage} `)\n    let pageList = [];\n    pageList.push(new Page(\"\", 0, \"<<\"));\n    pageList.push(new Page(\"\", prevPage, \"<\"));\n    for (let i = startPage; i <= endPage; i++) {\n      pageList.push(new Page(`${pageUrl}?curPage=${i}`, i, i, \"number\"));\n    }\n    pageList.push(new Page(\"\", nextPage, \">\"));\n    pageList.push(new Page(\"\", maxPage, \">>\", \"\"));\n\n    //console.log(\"chagnePageHandler\", this.props.onClick);\n    return (\n      <div className=\"center\">\n        <div className=\"btn-container\">\n          {pageList.map((page, index) => {\n            return (\n              <button\n                key={page.content}\n                className={\n                  \"btn-page \" + (curPage === page.pageNum && page.className === \"number\" ? \"activate \" : \"\")\n                }\n                onClick={() => onClick(page.pageNum)}\n              >\n                {page.content}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Pagination;\n","import React, { Component } from \"react\";\nimport qs from \"qs\";\nimport firestore from \"./Firestore\";\nimport ModeList from \"./ModeList\";\nimport TrioMode from \"./TrioMode\";\nimport BrawlerList from \"./BrawlerList\";\nimport playStyles from \"./PlayList.scss\";\nimport styles from \"./Base.scss\";\nimport SoloDuoMode from \"./SoloDuoMode\";\nimport axios from \"axios\";\nimport Pagination from \"./Pagination\";\n// const PlayList = ({location}) =>{\n//     const query = qs.parse(location.search,{\n//         ignoreQueryPrefix : true\n//     });\n//     const tag = query.tag || \"tag를 입력해주세요\";\nlet myTag = null || \"tag를 입력해주세요\";\nclass PlayList extends Component {\n  constructor(props) {\n    super(props);\n    this.changeMode = this.changeMode.bind(this);\n    this.changeBrawler = this.changeBrawler.bind(this);\n  }\n  state = {\n    playRecord: [],\n    winRate: 0,\n    averageRank: 0,\n    tag: '',\n    mode: \"ALL\",\n    brawlerName: \"ALL\",\n    isEmpty: false,\n    curPage: 1,\n    totalElements: 10,\n  };\n  getTag() {\n    const query = qs.parse(this.props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query.tag;\n  }\n  addZero(number) {\n    let str = number.toString();\n    if (str.length == 1) str = \"0\" + str;\n    return str;\n  }\n\n  changePageHandler = (page) => {\n\n    let searchParams = new URLSearchParams(this.props.location.search);\n    const mode = searchParams.get(\"mode\");\n    console.log(`changePageHandler mode !! ${mode}`);\n    const tag = searchParams.get(\"tag\");\n    const brawlerName = searchParams.get(\"brawlerName\");\n    this.getBattleLog(tag, mode, brawlerName, page);\n    const queryPage = page - 1;\n    searchParams.set(\"page\", queryPage);\n    searchParams.set(\"size\", 5);\n    let { history } = this.props;\n    history.push(`/playList?${searchParams.toString()}`);\n    console.log(tag);\n    console.log(searchParams.toString());\n    console.log(searchParams.get(\"tag\"));\n  }\n  getBattleLog(tag, mode, brawlerName, page) {\n    console.log(`getBattleLog tag ${tag} mode ${mode} bralerName ${brawlerName}`);\n    tag = tag.replace(\"#\", \"%23\");\n    const queryPage = page - 1;\n    let paramMode = mode;\n    if (mode === 'ALL' || mode === null || mode === undefined) {\n      paramMode = '';\n    }\n    let paramBrawlerName = brawlerName;\n    if (brawlerName === 'ALL' || brawlerName === null || brawlerName === undefined) {\n      paramBrawlerName = '';\n    }\n    let searchParams = new URLSearchParams();\n    searchParams.set(\"mode\", paramMode);\n    searchParams.set(\"brawlerName\", paramBrawlerName);\n    searchParams.set(\"page\", queryPage);\n    searchParams.set(\"size\", 5);\n    console.log(`searchParams ${searchParams.toString()}`);\n    axios.get(`http://brawlstat.xyz:8080/record/${tag}?${searchParams.toString()}`)\n      //axios.get(`http://localhost/record/${tag}`)\n      .then(response => {      // .then : 응답(상태코드200~300미만)성공시\n        console.log(response);\n        const data = response.data;\n        this.setState({\n          playRecord: response.data.content,\n          curPage: data.pageable.pageNumber + 1,\n          totalElements: data.totalElements\n        })\n      }).catch(error => {\n        console.log(error);\n      });\n  }\n  componentDidMount() {\n    let searchParams = new URLSearchParams(this.props.location.search);\n    const tag = searchParams.get(\"tag\")\n    if (tag !== null) {\n      this.setState({\n        tag: tag\n      });\n    }\n    const mode = searchParams.get(\"mode\");\n    if (mode !== null) {\n      this.setState({\n        mode: mode\n      })\n    }\n    const brawlerName = searchParams.get(\"brawlerName\");\n    if (brawlerName !== null) {\n      this.setState({\n        brawlerName: brawlerName\n      })\n    }\n    const page = parseInt(searchParams.get(\"page\"));\n    if (page !== null) {\n      this.setState({\n        page: page\n      })\n    }\n    //console.log(`compomentDidMount !!!!! ${brawlerName}`);\n    this.getBattleLog(tag, mode, brawlerName, page + 1);\n  }\n\n  changeMode(mode) {\n    //console.log('change Mode !!!');\n    //console.log(this.state.tag, mode, this.state.brawlerName);\n    this.setState({ mode: mode });\n    this.getBattleLog(this.state.tag, mode, this.state.brawlerName, 1);\n    const { history } = this.props;\n    let searchParams = new URLSearchParams(this.props.location.search);\n    searchParams.set(\"mode\", mode);\n    searchParams.set(\"page\", 0);\n    history.push(`/playList?${searchParams}`);\n  }\n  changeBrawler(brawlerName) {\n    //console.log(\"change bralwer\", brawlerName);\n    this.setState({ brawlerName: brawlerName });\n    this.getBattleLog(this.state.tag, this.state.mode, brawlerName, 1);\n    const { history } = this.props;\n    let searchParams = new URLSearchParams(this.props.location.search);\n    searchParams.set(\"brawlerName\", brawlerName);\n    searchParams.set(\"page\", 0);\n    history.push(`/playList?${searchParams.toString()}`);\n  }\n  getQuery(props) {\n    const query = qs.parse(props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query;\n  }\n\n  isTrio(mode) {\n    let result = false;\n    if (\n      mode === \"gemGrab\" ||\n      mode === \"heist\" ||\n      mode === \"siege\" ||\n      mode === \"bounty\" ||\n      mode === \"brawlBall\" ||\n      mode === \"hotZone\"\n    ) {\n      result = true;\n    }\n    return result;\n  }\n  render() {\n    return (\n      <div>\n        {/*\n                My Tag %239QU209UYC\n                */}\n        <h1>PlayList</h1>\n        <ModeList key={`mode-${this.state.mode}`} changeMode={this.changeMode} mode={this.state.mode} />\n        <BrawlerList key={this.state.brawlerName} brawlerName={this.state.brawlerName} changeBrawler={this.changeBrawler} />\n        <h2>Tag : {this.state.tag}</h2>\n\n        <div className={this.state.isEmpty ? \"noRecord\" : \"displayNone\"}>\n          No record\n        </div>\n        {\n          this.state.playRecord.map((data) => {\n            if (this.isTrio(data.mode)) {\n              return (\n                <TrioMode\n                  key={data.battleTime}\n                  battleTime={data.battleTime\n                  }\n                  rank={data.resultRank}\n                  result={data.result}\n                  brawler_name={data.brawlerName}\n                  duration={data.duration}\n                  isStarPalyer={data.isStarPlayer}\n                  map={data.map}\n                  power={data.power}\n                  trophies={data.trophies}\n                  trophyChange={data.trophyChange}\n                  type={data.type}\n                  mode={data.mode}\n                  groupRecords={data.groupRecords}\n                />\n              );\n            } else {\n              return (\n                <SoloDuoMode\n                  key={data.battleTime}\n                  battleTime={\n                    data.battleTime\n                  }\n                  rank={data.resultRank}\n                  result={data.result}\n                  brawler_name={data.brawlerName}\n                  duration={data.duration}\n                  isStarPalyer={data.isStarPlayer}\n                  map={data.map}\n                  power={data.power}\n                  trophies={data.trophies}\n                  trophyChange={data.trophyChange}\n                  mode={data.mode}\n                />\n              );\n            }\n          })}\n        <Pagination\n          key={this.state.curPage}\n          curPage={this.state.curPage}\n          numTotal={this.state.totalElements}\n          numShowItems=\"5\"\n          pageUrl=\"/playerList\"\n          onClick={this.changePageHandler.bind(this)}\n        ></Pagination>\n        <div style={{ 'marginBottom': \"10px\" }}>\n        </div>\n      </div >\n      // </div>\n    );\n  }\n}\n\nexport default PlayList;\n","import React, { Component } from \"react\";\nimport firestore from \"./Firestore\";\nimport Pagination from \"./Pagination\";\nimport qs from \"qs\";\nimport styles from \"./UserList.scss\";\nimport baseStyles from \"./Base.scss\";\nimport { Router } from \"react-router-dom\";\nimport axios from \"axios\";\n\nclass User {\n  constructor(tag, name) {\n    this.tag = tag;\n    this.name = name;\n  }\n}\n\n// const getUserList = () => {\n//     return firestore.collection(\"ID_LIST\")\n//         .get().then((snapshot) => {\n//             var rows = [];\n//             snapshot.forEach((doc) => {\n//                 var data = doc.data();\n//                 console.log(data);\n\n//             })\n//         });\n// }\n\nconst tableStyle = {\n  margin: \"auto\",\n};\nclass UserList extends Component {\n  constructor(props) {\n    super(props);\n    this.searchNickname = this.searchNickname.bind(this);\n    this.searchInputChange = this.searchInputChange.bind(this);\n  }\n  state = {\n    userList: [],\n    curPage: 0,\n    numUser: 0,\n    pageUrl: \"userList\",\n    nickname: \"\",\n  };\n  getQuery(props) {\n    const query = qs.parse(props.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    return query;\n  }\n  setUserList(snapshot, page) {\n    var rows = [];\n    snapshot.forEach((doc) => {\n      var data = doc.data();\n      data[\"tag\"] = doc.id;\n      console.log(data);\n      rows.push(data);\n    });\n    console.log(rows);\n    this.setState({ userList: rows, curPage: page });\n  }\n  getUserList(page) {\n    console.log(\"getUserList\");\n    const queryPage = page - 1;\n    axios.get(`http://brawlstat.xyz:8080/member?page=${queryPage}&size=15`)\n      //axios.get(`http://localhost/record/${tag}`)\n      .then(response => {      // .then : 응답(상태코드200~300미만)성공시\n        console.log(response);\n        const data = response.data;\n        this.setState({\n          userList: data.content,\n          curPage: data.number + 1,\n          numUser: data.totalElements\n        });\n\n      })\n      .catch(error => {\n        console.log(error);\n      });\n\n  }\n\n  componentDidMount() {\n    console.log(\"mount\");\n    let query = this.getQuery(this.props);\n    let curPage = query.curPage;\n    if (curPage === undefined) curPage = 1;\n    curPage = parseInt(curPage);\n    console.log(`curPage ${curPage}`);\n    if (curPage === undefined) curPage = 1;\n    this.getUserList(curPage);\n\n\n  }\n  changePageHandler(page) {\n    let { history } = this.props;\n    console.log(\"changePageHandler\");\n    this.setState({ curPage: page });\n    history.push(`/userList?curPage=${page}`);\n    this.getUserList(page);\n  }\n  showPlayList(tag) {\n    let { history } = this.props;\n    tag = tag.replace(\"#\", \"%23\");\n    history.push(`/playList?tag=${tag}`);\n    console.log(tag);\n  }\n  searchNickname() {\n    //console.log(this.state.nickname);\n    axios.get(`http://brawlstat.xyz:8080/member?name=${this.state.nickname}&page=0&size=15`)\n      //axios.get(`http://localhost/record/${tag}`)\n      .then(response => {\n        console.log(response);\n        const data = response.data;\n        this.setState({\n          userList: data.content,\n          curPage: data.number + 1,\n          numUser: data.totalElements\n        });\n        //this.setState({ playRecord: response.data.content });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n\n  }\n  searchInputChange(event) {\n    let value = event.target.value;\n    this.setState({\n      nickname: value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>UserList</h1>\n        <div>\n          <input\n            placeholder=\"search user nickname\"\n            onChange={this.searchInputChange}\n            value={this.state.nickname}\n          ></input>\n          <button onClick={this.searchNickname} className=\"btn btn-primary\">\n            search\n          </button>\n        </div>\n        <table style={tableStyle} className=\"table\">\n          <thead>\n            <tr>\n              <th>Index</th>\n              <th>Nickname(tag)</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.userList.map((user, index) => {\n              return (\n                <tr\n                  className=\"cursor\"\n                  key={user.tag}\n                  page={this.state.curPage}\n                  onClick={() => this.showPlayList(user.tag)}\n                >\n                  <td>{(this.state.curPage - 1) * 15 + index + 1}</td>\n                  <td>\n                    {user.name}({user.tag})\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <Pagination\n          key={`pagination-${this.state.curPage}`}\n          curPage={this.state.curPage}\n          numTotal={this.state.numUser}\n          numShowItems=\"15\"\n          pageUrl=\"/userList\"\n          onClick={this.changePageHandler.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserList;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./TopBar.scss\";\n\nclass TopBar extends Component {\n  render() {\n    return (\n      <div className=\"topBar\">\n        <div className=\"menuContainer\">\n          <div className=\"item\">\n            <Link to=\"/\">Home</Link>\n          </div>\n          <div className=\"item\">\n            <Link to=\"/userList\">User List</Link>\n          </div>\n          <div className=\"item\">\n            <Link to=\"/mapList\">Map List</Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TopBar;\n","import React, { Component } from \"react\";\nimport styles from \"./Home.scss\";\n\nconst languageList = [\"korean\", \"english\", \"japanese\"];\nconst displayNone = {\n  display: \"none\",\n};\nclass Home extends Component {\n  state = {\n    language: \"korean\",\n  };\n  changeLanguage = (language) => {\n    this.setState({\n      language: language,\n    });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          \"marginTop\": \"30px\",\n        }}\n        className=\"home\"\n      >\n        <div className=\"languageContainer\">\n          {languageList.map((lang, index) => (\n            <div\n              onClick={() => {\n                this.changeLanguage(lang);\n              }}\n              className={`language ${lang === this.state.language ? \"selected\" : \"\"\n                }`}\n              key={index}\n            >\n              {lang}\n            </div>\n          ))}\n        </div>\n\n        {this.state.language === \"korean\" ? (\n          <div className=\"contentContainer\">\n            <div className=\"content\">\n              브롤스타즈 전적 기록 사이트입니다.\n            <br />\n              <br />\n            User List를 클릭하여\n            자신의 닉네임을 검색하고\n            전적을 확인해보세요.\n            <br />\n            Map List에서는 맵별 브롤러 승률을 알 수 있습니다.\n            <br />\n              <br />\n            1시간 마다 전적이 동기화됩니다.\n            <br />\n              <br />\n\n            email : cubeprince@gmail.com\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n        {this.state.language === \"english\" ? (\n          <div className=\"contentContainer\">\n            <div className=\"content\">\n              This is the Brawl Stars game record site.\n              <br />\n              Click on the User List on the top menu\n              <br />\n              to search your nickname and check the history\n              <br />\n              Check brawlers' win rate in Map List menu.\n              <br />\n              Game records are synchronized every hour.\n              <br />\n              <br />\n              email : cubeprince@gmail.com\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n        {this.state.language === \"japanese\" ? (\n          <div className=\"contentContainer\">\n            <div className=\"content\">\n              ブロールスターズの戦闘記録サイトです。\n              <br />\n              UserListをクリックして、自分のニックネームを検索して、\n              <br />\n              戦闘記録を確認してください。\n              <br />\n              MapListではマップごとのキャラクターの勝率を確認できます。\n              <br />\n              <br />\n              戦闘記録は1時間ごとに同期されます。\n              <br />\n              <br />\n              email : cubeprince@gmail.com\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport mapListStyles from \"./MapList.scss\";\nimport ModeList from './ModeList';\nimport qs from 'qs';\n\nclass MapList extends Component {\n    state = {\n        mode: 'gemGrab',\n        maps: [],\n        filteredMaps: [],\n    }\n    clickMap = (mapName) => {\n        console.log(this);\n        let paramMapName = mapName.replace(\"&\", \"%26\");\n        let { history } = this.props;\n        history.push(`/map?mapName=${paramMapName}`);\n    }\n    setFilteredMap = (mode) => {\n        let filteredMaps = this.state.maps;\n        if (mode !== 'ALL' && mode !== undefined) {\n            filteredMaps = this.state.maps.filter(x => {\n                return x.mode === mode;\n            });\n        }\n        this.setState({\n            filteredMaps: filteredMaps,\n        });\n    }\n    changeMode = (mode) => {\n        console.log(`changeMode ${mode}`);\n        console.log(this);\n\n        this.setFilteredMap(mode);\n\n        let { history } = this.props;\n        history.push(`/mapList?mode=${mode}`);\n    }\n    componentDidMount() {\n        const query = qs.parse(this.props.location.search, {\n            ignoreQueryPrefix: true,\n        });\n        console.log(`query mode ${query.mode}`);\n\n        //this.setFilteredMap(query.mode);\n        axios.get(`http://brawlstat.xyz:8080/gameMap`)\n            //axios.get(`http://localhost/record/${tag}`)\n            .then(response => {\n                console.log(response);\n                const data = response.data;\n                // const gemGrabMaps = data.filter(x => {\n                //     return x.mode === \"gemGrab\"\n                // });\n                let mode = 'gemGrab';\n                if (query.mode !== undefined) {\n                    mode = query.mode;\n                }\n                this.setState({\n                    maps: data,\n                    mode: mode\n                })\n                this.setFilteredMap(mode);\n                //this.changeMode(query.mode);\n            }).catch(error => {\n                console.log(error);\n            });\n    }\n    render() {\n        return <div className=\"mapList\">\n            <div>\n                <ModeList key={this.state.mode} changeMode={this.changeMode} mode={this.state.mode}></ModeList>\n            </div>\n            <div className=\"gemGrabContainer\">{\n                this.state.filteredMaps.map((map, index) => {\n                    return <div key={index} className=\"gemGrabItem\" >{map.name}\n                        <img onClick={() => { this.clickMap(map.name) }} src={`./images/maps/${map.mode}/${map.name}.png`}></img>\n                    </div>\n                })}\n            </div>\n        </div>\n    }\n}\n\nexport default MapList;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport qs from 'qs';\nimport styles from \"./Map.scss\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSortUp, faSortDown, faSort } from '@fortawesome/free-solid-svg-icons'\n\nclass Map extends Component {\n    state = {\n        mapName: \"\",\n        recordArr: [],\n        sumTotalGameNum: 0,\n    }\n    componentDidMount() {\n        const query = qs.parse(this.props.location.search, {\n            ignoreQueryPrefix: true,\n        });\n        console.log(query);\n        const mapName = query.mapName;\n        console.log(mapName);\n        let records = {};\n        let recordArr = [];\n        axios.get(`http://brawlstat.xyz:8080/record/map/${mapName}`)\n            //axios.get(`http://localhost/record/${tag}`)\n            .then(response => {\n                console.log(response);\n                const data = response.data;\n                console.log(data);\n                data.forEach(e => {\n                    // brawlerName: \"COLETTE\"\n                    // cnt: 14\n                    // result: \"defeat\"\n                    // __proto__: Object\n                    if (records[e.brawlerName] === undefined) {\n                        records[e.brawlerName] = {\n                        };\n                    }\n                    records[e.brawlerName] = {\n                        ...records[e.brawlerName],\n                        [e.result]: e.cnt\n                    }\n                });\n                console.log(records);\n                let sumTotalGameNum = 0;\n                for (let key in records) {\n                    let { victory, defeat, draw } = records[key];\n                    const victoryNum = victory || 0;\n                    const defeatNum = defeat || 0;\n                    const drawNum = draw || 0;\n                    const totalGameNum = victoryNum + defeatNum + drawNum;\n                    recordArr.push({\n                        \"brawlerName\": key,\n                        \"victory\": victoryNum,\n                        \"defeat\": defeatNum,\n                        \"draw\": drawNum,\n                        \"winRate\": (victoryNum) / totalGameNum,\n                        \"totalGameNum\": totalGameNum\n                    });\n                    sumTotalGameNum += totalGameNum;\n                }\n                recordArr.sort((a, b) => {\n                    return b.winRate - a.winRate;\n                })\n                console.log(recordArr);\n                this.setState({\n                    recordArr: recordArr,\n                    sumTotalGameNum: sumTotalGameNum\n                })\n            }).catch(error => {\n                console.log(error);\n            });\n    }\n    render() {\n        let { mapName } = this.props;\n        return <div className=\"mapClass\">\n            {mapName === \"\" ? (<div>invalid map name</div>) :\n                <div className=\"infoContainer\">\n                    <table className=\"table info\">\n                        <thead>\n                            <tr>\n                                <th>No</th>\n                                <th>Name</th>\n                                <th>Win Rate <FontAwesomeIcon icon={faSortDown} /></th>\n                                <th>Pick Rate <FontAwesomeIcon icon={faSort} /></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.recordArr.map((ele, index) => {\n                                return (\n                                    <tr key={ele.brawlerName}>\n                                        <td>{index + 1}</td>\n                                        <td>\n                                            {/* <div className=\"info\" key={index}> */}\n                                            <div className=\"brawler\">\n                                                <img src={`./images/${ele.brawlerName}.png`}></img>\n                                                <div className=\"brawlerName\">\n                                                    {ele.brawlerName}\n                                                </div>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div className=\"winRate\">\n                                                {Math.round(ele.winRate * 1000) / 10}%\n                                        </div>\n                                        </td>\n                                        <td>\n                                            <div className=\"totalGame\">\n                                                {Math.round(ele.totalGameNum / this.state.sumTotalGameNum * 10000) / 100}%\n                                        </div>\n                                        </td>\n                                        {/* </div> */}\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            }\n        </div>\n    }\n}\n\nexport default Map;","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayList from \"./components/PlayList\";\nimport UserList from \"./components/UserList\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport TopBar from \"./components/TopBar\";\nimport Home from \"./components/Home\";\nimport MapList from \"./components/MapList\";\nimport Map from \"./components/Map\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <TopBar />\n        <Route path=\"/\" component={Home} exact={true} />\n        <Route path=\"/playList\" component={PlayList} exact={true} />\n        <Route path=\"/userList\" component={UserList} />\n        <Route path=\"/mapList\" component={MapList} />\n        <Route path=\"/map\" component={Map} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}