import Head from 'next/head'
import styles from '../styles/Home.module.css'
import EventRotation from '../components/eventRotation'
import { getData } from '../components/ApiHandler'
import { calWinRate, getLocalTime, isTrio } from '../components/BaseFunctions';
import Script from 'next/script'

export default function Home({ todayEvents, nextEvents }) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Brawl Meta</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="theme-color" content="#000000" />
        <meta name="description" content="You can check win rate and pick rate of brawlers at each map. Also, you can check your battle log
             브롤스타즈 전적 기록 및 승률 확인 사이트입니다. 맵 마다 브롤러 별 승률과 선택률을 확인할 수 있습니다. 또한 당신의 전투 기록도 확인 가능합니다." />
        <link rel="icon" href="/favicon.ico" />
        <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4114406385852589" crossOrigin="anonymous"></script>
      </Head>
      {/* <!-- Global site tag (gtag.js) - Google Analytics --> */}
      <Script async src="https://www.googletagmanager.com/gtag/js?id=G-34JGP66PP0"></Script>
      <Script id="google-analytics" strategy="afterInteractive">{`
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());

          gtag('config', 'G-34JGP66PP0');
          `}
      </Script>
      <EventRotation todayEvents={todayEvents} nextEvents={nextEvents} />
    </div>
  )
}



export async function getServerSideProps() {
  // Fetch data from external API
  // Pass data to the page via props

  const res = await getData("/api/events/rotation");
  //const data = await res.json();

  const events = res.data;
  let now = new Date();
  let todayEvents = [];
  let nextEvents = [];

  //console.log(showdownEvents);

  events
    .filter(e => e.event.mode !== 'duoShowdown')
    .forEach(e => {
      const startTime = getLocalTime(e.startTime);
      const endTime = getLocalTime(e.endTime);
      if ((startTime < now) && (now <= endTime)) {
        todayEvents.push(e);
      } else {
        nextEvents.push(e);
      }
      //console.log(`${startTime} - ${now} -${endTime}`);
      if (e.event.mode === 'soloShowdown' && e.startTime.substr(9, 2) ===
        "08") {
        e.event.isPlus = true;
      }
      if (e.statistics !== null) {
        e.winRate = calWinRate(e.statistics, e.event.mode).slice(0, 5);
      }
    });


  return { props: { todayEvents, nextEvents } }
}